// scripts/testPostgreSQL.js
import "dotenv/config";
import { sequelize } from '../app/models/sequelize-client.js';

async function testPostgreSQLConfig() {
    try {
        console.log('üîç Test de la configuration PostgreSQL...');
        
        // Test de connexion
        await sequelize.authenticate();
        console.log('‚úÖ Connexion PostgreSQL r√©ussie');
        
        // V√©rifier les param√®tres critiques
        const configChecks = [
            'max_locks_per_transaction',
            'shared_buffers',
            'max_connections'
        ];
        
        for (const param of configChecks) {
            try {
                const result = await sequelize.query(`SHOW ${param};`);
                const value = result[0][0][param];
                console.log(`üìã ${param}: ${value}`);
                
                if (param === 'max_locks_per_transaction' && parseInt(value) < 128) {
                    console.log(`‚ö†Ô∏è  ATTENTION: ${param} devrait √™tre >= 128 (actuellement ${value})`);
                }
            } catch (error) {
                console.log(`‚ùå Impossible de v√©rifier ${param}: ${error.message}`);
            }
        }
        
        // Test de cr√©ation de table simple
        console.log('\nüß™ Test de cr√©ation de table...');
        
        try {
            await sequelize.query(`
                CREATE TABLE IF NOT EXISTS test_locks (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(100),
                    created_at TIMESTAMP DEFAULT NOW()
                );
            `);
            
            await sequelize.query(`ALTER TABLE test_locks ADD COLUMN IF NOT EXISTS test_col VARCHAR(50);`);
            await sequelize.query(`DROP TABLE IF EXISTS test_locks;`);
            
            console.log('‚úÖ Test de cr√©ation/modification de table r√©ussi');
            
        } catch (error) {
            console.log('‚ùå √âchec du test de table:', error.message);
            
            if (error.message.includes('m√©moire partag√©e √©puis√©e')) {
                console.log('\nüö® PROBL√àME D√âTECT√â:');
                console.log('La m√©moire partag√©e PostgreSQL est √©puis√©e.');
                console.log('\nüìã SOLUTIONS:');
                console.log('1. Trouvez postgresql.conf avec: SHOW config_file;');
                console.log('2. Ajoutez: max_locks_per_transaction = 256');
                console.log('3. Ajoutez: shared_buffers = 256MB');
                console.log('4. Red√©marrez PostgreSQL');
            }
        }
        
        console.log('\n‚úÖ Test termin√©');
        
    } catch (error) {
        console.error('‚ùå Erreur de test:', error.message);
        
        if (error.code === 'ECONNREFUSED') {
            console.log('\nüö® PostgreSQL ne semble pas d√©marr√©');
            console.log('üìã V√©rifiez le service PostgreSQL');
        }
        
    } finally {
        await sequelize.close();
    }
}

// Lancer le test
testPostgreSQLConfig();