// scripts/createMissingFiles.js
import fs from 'fs';
import path from 'path';

function ensureDirectoryExists(dirPath) {
    if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath, { recursive: true });
        console.log(`üìÅ Dossier cr√©√©: ${dirPath}`);
    }
}

function createFile(filePath, content) {
    const dir = path.dirname(filePath);
    ensureDirectoryExists(dir);
    
    fs.writeFileSync(filePath, content, 'utf8');
    console.log(`üìù Fichier cr√©√©: ${filePath}`);
}

// 1. Cr√©er le dossier scripts
ensureDirectoryExists('./scripts');

// 2. Cr√©er initMaintenanceSettings.js
const initMaintenanceSettings = `// scripts/initMaintenanceSettings.js
import "dotenv/config";
import { sequelize } from '../app/models/sequelize-client.js';

async function initMaintenanceSettings() {
    try {
        console.log('üîß Initialisation des param√®tres de maintenance...');
        
        // Connexion
        await sequelize.authenticate();
        console.log('‚úÖ Connexion r√©ussie');
        
        // Cr√©er la table settings si elle n'existe pas
        await sequelize.query(\`
            CREATE TABLE IF NOT EXISTS settings (
                id SERIAL PRIMARY KEY,
                section VARCHAR(50) NOT NULL,
                key VARCHAR(100) NOT NULL,
                value TEXT,
                type VARCHAR(20) DEFAULT 'string',
                description TEXT,
                is_public BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW(),
                UNIQUE(section, key)
            );
        \`);
        
        console.log('‚úÖ Table settings cr√©√©e/v√©rifi√©e');
        
        // Ins√©rer les param√®tres de maintenance par d√©faut
        const maintenanceSettings = [
            {
                section: 'maintenance',
                key: 'enabled',
                value: 'false',
                type: 'boolean',
                description: 'Active ou d√©sactive le mode maintenance'
            },
            {
                section: 'maintenance', 
                key: 'message',
                value: 'Site temporairement indisponible pour maintenance technique',
                type: 'string',
                description: 'Message affich√© pendant la maintenance'
            },
            {
                section: 'maintenance',
                key: 'allowed_ips',
                value: '["127.0.0.1", "localhost"]',
                type: 'json',
                description: 'IPs autoris√©es pendant la maintenance'
            }
        ];
        
        for (const setting of maintenanceSettings) {
            await sequelize.query(\`
                INSERT INTO settings (section, key, value, type, description, is_public)
                VALUES (:section, :key, :value, :type, :description, :is_public)
                ON CONFLICT (section, key) DO UPDATE SET
                    description = EXCLUDED.description,
                    type = EXCLUDED.type,
                    updated_at = NOW()
            \`, {
                replacements: {
                    ...setting,
                    is_public: false
                }
            });
        }
        
        console.log('‚úÖ Param√®tres de maintenance initialis√©s');
        
        // V√©rifier les param√®tres cr√©√©s
        const [results] = await sequelize.query(\`
            SELECT section, key, value, type 
            FROM settings 
            WHERE section = 'maintenance'
            ORDER BY key
        \`);
        
        console.log('\\nüìã Param√®tres de maintenance cr√©√©s:');
        results.forEach(row => {
            console.log(\`   \${row.section}.\${row.key} = \${row.value} (\${row.type})\`);
        });
        
        console.log('\\n‚úÖ Initialisation termin√©e avec succ√®s');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de l\\'initialisation:', error);
        throw error;
        
    } finally {
        await sequelize.close();
    }
}

// Lancer l'initialisation
initMaintenanceSettings();`;

createFile('./scripts/initMaintenanceSettings.js', initMaintenanceSettings);

// 3. Cr√©er testPostgreSQL.js (version corrig√©e)
const testPostgreSQL = `// scripts/testPostgreSQL.js
import "dotenv/config";
import { sequelize } from '../app/models/sequelize-client.js';

async function testPostgreSQLConfig() {
    try {
        console.log('üîç Test de la configuration PostgreSQL...');
        
        // Test de connexion
        await sequelize.authenticate();
        console.log('‚úÖ Connexion PostgreSQL r√©ussie');
        
        // V√©rifier les param√®tres critiques (version corrig√©e)
        const configChecks = [
            'max_locks_per_transaction',
            'shared_buffers',
            'max_connections'
        ];
        
        for (const param of configChecks) {
            try {
                const [results] = await sequelize.query(\`SHOW \${param};\`);
                const value = results[0][param];
                console.log(\`üìã \${param}: \${value}\`);
                
                if (param === 'max_locks_per_transaction' && parseInt(value) < 128) {
                    console.log(\`‚ö†Ô∏è  ATTENTION: \${param} devrait √™tre >= 128 (actuellement \${value})\`);
                }
            } catch (error) {
                console.log(\`‚ùå Impossible de v√©rifier \${param}: \${error.message}\`);
            }
        }
        
        // Test de cr√©ation de table simple
        console.log('\\nüß™ Test de cr√©ation de table...');
        
        try {
            await sequelize.query(\`
                CREATE TABLE IF NOT EXISTS test_locks (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(100),
                    created_at TIMESTAMP DEFAULT NOW()
                );
            \`);
            
            await sequelize.query(\`ALTER TABLE test_locks ADD COLUMN IF NOT EXISTS test_col VARCHAR(50);\`);
            await sequelize.query(\`DROP TABLE IF EXISTS test_locks;\`);
            
            console.log('‚úÖ Test de cr√©ation/modification de table r√©ussi');
            
        } catch (error) {
            console.log('‚ùå √âchec du test de table:', error.message);
            
            if (error.message.includes('m√©moire partag√©e √©puis√©e')) {
                console.log('\\nüö® PROBL√àME D√âTECT√â:');
                console.log('La m√©moire partag√©e PostgreSQL est √©puis√©e.');
                console.log('\\nüìã SOLUTIONS:');
                console.log('1. Trouvez postgresql.conf avec: SHOW config_file;');
                console.log('2. D√©commentez: max_locks_per_transaction = 256');
                console.log('3. Ajoutez: shared_buffers = 256MB');
                console.log('4. Red√©marrez PostgreSQL avec: net restart postgresql-x64-17');
            }
        }
        
        console.log('\\n‚úÖ Test termin√©');
        
    } catch (error) {
        console.error('‚ùå Erreur de test:', error.message);
        
        if (error.code === 'ECONNREFUSED') {
            console.log('\\nüö® PostgreSQL ne semble pas d√©marr√©');
            console.log('üìã V√©rifiez le service PostgreSQL');
        }
        
    } finally {
        await sequelize.close();
    }
}

// Lancer le test
testPostgreSQLConfig();`;

createFile('./scripts/testPostgreSQL.js', testPostgreSQL);

// 4. Cr√©er settingsModel.js
const settingsModel = `// app/models/settingsModel.js
import { DataTypes, Model } from "sequelize";
import { sequelize } from "./sequelize-client.js";

export class Setting extends Model {}

Setting.init({
    id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true
    },
    section: {
        type: DataTypes.STRING(50),
        allowNull: false,
        comment: 'Section du param√®tre (maintenance, general, etc.)'
    },
    key: {
        type: DataTypes.STRING(100),
        allowNull: false,
        comment: 'Cl√© unique du param√®tre'
    },
    value: {
        type: DataTypes.TEXT,
        allowNull: true,
        comment: 'Valeur du param√®tre'
    },
    type: {
        type: DataTypes.ENUM('string', 'number', 'boolean', 'json'),
        defaultValue: 'string',
        comment: 'Type de donn√©e'
    },
    description: {
        type: DataTypes.TEXT,
        allowNull: true,
        comment: 'Description du param√®tre'
    },
    is_public: {
        type: DataTypes.BOOLEAN,
        defaultValue: false,
        comment: 'Param√®tre visible c√¥t√© client'
    }
}, {
    sequelize,
    tableName: "settings",
    timestamps: true,
    underscored: true,
    indexes: [
        {
            unique: true,
            fields: ['section', 'key'],
            name: 'settings_section_key_unique'
        },
        {
            fields: ['section'],
            name: 'settings_section_idx'
        },
        {
            fields: ['is_public'],
            name: 'settings_public_idx'
        }
    ]
});

export default Setting;`;

createFile('./app/models/settingsModel.js', settingsModel);

console.log('\n‚úÖ Tous les fichiers manquants ont √©t√© cr√©√©s !');
console.log('\nüìã Prochaines √©tapes:');
console.log('1. Red√©marrez PostgreSQL: net restart postgresql-x64-17');
console.log('2. Lancez: node scripts/initMaintenanceSettings.js');
console.log('3. Testez: node scripts/testPostgreSQL.js');
console.log('4. D√©marrez l\\'app: npm run dev');`;

createFile('./scripts/createMissingFiles.js', createMissingFiles);

console.log('üéØ Script de cr√©ation des fichiers manquants cr√©√© !');
console.log('üìã Ex√©cutez: node scripts/createMissingFiles.js');