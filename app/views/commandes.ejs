<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title || 'Administration - Suivi des Commandes' %></title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <style>
        :root {
            --primary: #E8B4B8;
            --primary-dark: #B8868A;
            --primary-light: #F5D7DA;
            --secondary: #FDF9F6;
            --accent: #D4A5A9;
            --success: #10b981;
            --danger: #ef4444;
            --warning: #f59e0b;
            --info: #3b82f6;
            --dark: #1f2937;
            --gray-light: #f8fafc;
            --gray-medium: #64748b;
            --white: #ffffff;
            --border: #e2e8f0;
            --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            --radius: 8px;
            --radius-lg: 12px;
            --transition: all 0.2s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: var(--gray-light);
            color: var(--dark);
            line-height: 1.6;
            font-size: 14px;
        }

        /* Layout Principal */
        .app-layout {
            display: flex;
            min-height: 100vh;
        }

        /* Header Mobile */
        .mobile-header {
            display: none;
            background: var(--primary);
            color: white;
            padding: 1rem;
            position: sticky;
            top: 0;
            z-index: 100;
            box-shadow: var(--shadow-md);
        }

        .mobile-header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .mobile-menu-btn {
            background: none;
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            padding: 0.5rem;
        }

        

        .sidebar-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border);
            background: var(--primary);
            color: white;
        }

        .sidebar-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin: 0;
        }

        .sidebar-nav {
            padding: 1rem 0;
        }

        .nav-item {
            margin: 0.25rem 0;
        }

        .nav-link {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.75rem 1.5rem;
            color: var(--gray-medium);
            text-decoration: none;
            transition: var(--transition);
            border-right: 3px solid transparent;
        }

        .nav-link:hover,
        .nav-link.active {
            background: var(--primary-light);
            color: var(--primary-dark);
            border-right-color: var(--primary);
        }

        .nav-link i {
            width: 20px;
            text-align: center;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 2rem;
            min-width: 0;
        }

        .page-header {
            background: white;
            padding: 1.5rem;
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
        }

        .page-title {
            font-size: 1.8rem;
            font-weight: 600;
            color: var(--dark);
            margin: 0;
        }

        .page-subtitle {
            color: var(--gray-medium);
            margin-top: 0.5rem;
        }

        /* Stats Dashboard */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow);
            transition: var(--transition);
        }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

        .stat-label {
            font-size: 0.875rem;
            color: var(--gray-medium);
            margin-bottom: 0.5rem;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: var(--dark);
            margin-bottom: 0.5rem;
        }

        .stat-trend {
            display: flex;
            align-items: center;
            gap: 0.25rem;
            font-size: 0.875rem;
        }

        .stat-trend.up { color: var(--success); }
        .stat-trend.down { color: var(--danger); }

        /* Controls */
        .controls {
            background: white;
            padding: 1.5rem;
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
        }

        .controls-grid {
            display: grid;
            grid-template-columns: 1fr auto;
            gap: 1rem;
            align-items: center;
        }

        .search-section {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .search-box {
            position: relative;
            flex: 1;
            min-width: 250px;
        }

        .search-box i {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--gray-medium);
        }

        .search-input {
            width: 100%;
            padding: 0.75rem 1rem 0.75rem 2.5rem;
            border: 1px solid var(--border);
            border-radius: var(--radius);
            font-size: 0.875rem;
            transition: var(--transition);
        }

        .search-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(232, 180, 184, 0.1);
        }

        .filter-group {
            display: flex;
            gap: 0.75rem;
            flex-wrap: wrap;
        }

        .filter-select {
            padding: 0.75rem;
            border: 1px solid var(--border);
            border-radius: var(--radius);
            font-size: 0.875rem;
            background: white;
            cursor: pointer;
            transition: var(--transition);
        }

        .filter-select:focus {
            outline: none;
            border-color: var(--primary);
        }

        .actions-group {
            display: flex;
            gap: 0.5rem;
        }

        .btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1rem;
            border: none;
            border-radius: var(--radius);
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
            white-space: nowrap;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background: var(--primary-dark);
        }

        .btn-secondary {
            background: var(--gray-light);
            color: var(--gray-medium);
            border: 1px solid var(--border);
        }

        .btn-secondary:hover {
            background: var(--border);
        }

        /* Table */
        .table-container {
            background: white;
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow);
            overflow: hidden;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

        .table th {
            background: var(--gray-light);
            padding: 1rem;
            text-align: left;
            font-weight: 600;
            color: var(--dark);
            border-bottom: 1px solid var(--border);
            white-space: nowrap;
        }

        .table td {
            padding: 1rem;
            border-bottom: 1px solid var(--border);
            vertical-align: middle;
        }

        .table tbody tr {
            transition: var(--transition);
        }

        .table tbody tr:hover {
            background: var(--gray-light);
        }

        .order-number {
            font-weight: 600;
            color: var(--dark);
        }

        .customer-info {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }

        .customer-name {
            font-weight: 500;
        }

        .customer-email {
            font-size: 0.8rem;
            color: var(--gray-medium);
        }

        .amount {
            font-weight: 600;
            color: var(--primary-dark);
        }

        /* ✅ AMÉLIORATION STYLES PRIX AVEC PROMO */
        .amount-display {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
        }

        .original-price {
            color: var(--gray-medium);
            text-decoration: line-through;
            font-size: 0.85rem;
            margin-bottom: 2px;
        }

        .discounted-price {
            font-weight: 600;
            color: var(--primary-dark);
            font-size: 1rem;
        }

        .discount-amount {
            color: var(--success);
            font-size: 0.8rem;
            font-weight: 500;
            margin-top: 2px;
        }

        .status {
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
            padding: 0.25rem 0.75rem;
            border-radius: 50px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .status.en-attente {
            background: #fef3c7;
            color: #92400e;
        }

        .status.preparation {
            background: #dbeafe;
            color: #1e40af;
        }

        .status.expediee {
            background: #d1fae5;
            color: #065f46;
        }

        .status.livree {
            background: #dcfce7;
            color: #166534;
        }

        .status.annulee {
            background: #fee2e2;
            color: #991b1b;
        }

        .action-buttons {
            display: flex;
            gap: 0.5rem;
        }

        .action-btn {
            width: 32px;
            height: 32px;
            border: none;
            border-radius: var(--radius);
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .action-btn.view {
            background: var(--info);
            color: white;
        }

        .action-btn.edit {
            background: var(--warning);
            color: white;
        }

        .action-btn:hover {
            transform: scale(1.1);
        }

        /* Promo Code Display */
        .promo-info {
            background: var(--success);
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: var(--radius);
            font-size: 0.75rem;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
            margin-top: 0.25rem;
        }

        .discount-percent {
            color: var(--success);
            font-weight: 600;
            font-size: 0.8rem;
        }

        /* Modal */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            padding: 1rem;
        }

        .modal-content {
            background: white;
            border-radius: var(--radius-lg);
            max-width: 900px;
            width: 100%;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: var(--shadow-lg);
        }

        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: var(--primary-light);
        }

        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--primary-dark);
            margin: 0;
        }

        .close-modal {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--gray-medium);
            padding: 0.25rem;
        }

        .modal-body {
            padding: 1.5rem;
        }

        /* Sizes Info */
        .sizes-info {
            min-width: 140px;
            max-width: 180px;
        }

        .sizes-summary {
            display: flex;
            align-items: center;
            margin-bottom: 4px;
            font-weight: 500;
            font-size: 0.85rem;
        }

        .sizes-meta {
            display: flex;
            align-items: center;
            gap: 6px;
            flex-wrap: wrap;
        }

        .size-coverage {
            display: inline-flex;
            align-items: center;
            white-space: nowrap;
            font-weight: 600;
            border: 1px solid rgba(0,0,0,0.1);
            font-size: 0.75rem;
            padding: 2px 6px;
            border-radius: 12px;
            transition: var(--transition);
        }

        .size-coverage.full-coverage {
            background: #dcfce7 !important;
            color: #065f46 !important;
            border-color: #10b981;
        }

        .size-coverage.partial-coverage {
            background: #fef3c7 !important;
            color: #92400e !important;
            border-color: #f59e0b;
        }

        .size-coverage.limited-coverage {
            background: #fecaca !important;
            color: #991b1b !important;
            border-color: #ef4444;
        }

        .size-coverage.no-coverage {
            background: #f1f5f9 !important;
            color: #64748b !important;
            border-color: #cbd5e1;
        }

        .development-indicator {
            color: var(--gray-medium);
            font-size: 0.8rem;
            display: flex;
            align-items: center;
            gap: 4px;
            font-style: italic;
        }

        .development-indicator i {
            opacity: 0.5;
        }

        .sizes-info:hover {
            transform: scale(1.02);
            transition: transform 0.2s ease;
        }

        .sizes-info:hover .size-coverage {
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 3rem 1rem;
            color: var(--gray-medium);
        }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }

        /* Toast */
        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: var(--success);
            color: white;
            padding: 1rem 1.5rem;
            border-radius: var(--radius);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transform: translateX(400px);
            transition: transform 0.3s ease;
            z-index: 10000;
            box-shadow: var(--shadow-lg);
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast.error {
            background: var(--danger);
        }

        .toast.warning {
            background: var(--warning);
        }

        .toast.info {
            background: var(--info);
        }

        /* Loading */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-top: 3px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Mobile Cards */
        .mobile-cards {
            display: none;
        }

        .order-card {
            background: white;
            border-radius: var(--radius);
            padding: 1rem;
            margin-bottom: 1rem;
            box-shadow: var(--shadow);
            border-left: 4px solid var(--primary);
        }

        .order-card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.75rem;
        }

        .order-card-body {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .order-card-field {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }

        .order-card-label {
            font-size: 0.75rem;
            color: var(--gray-medium);
            font-weight: 500;
        }

        .order-card-value {
            font-size: 0.875rem;
            color: var(--dark);
            font-weight: 500;
        }

        .order-card-actions {
            display: flex;
            gap: 0.5rem;
            justify-content: flex-end;
        }

        .sizes-card-info {
            background: rgba(243, 244, 246, 0.7);
            border: 1px solid #e5e7eb;
            border-radius: 6px;
            padding: 8px 12px;
            margin-top: 8px;
        }

        .sizes-card-info .sizes-label {
            font-weight: 600;
            color: var(--info);
            margin-bottom: 4px;
            font-size: 0.85rem;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .mobile-header {
                display: block;
            }

            .app-layout {
                flex-direction: column;
            }

            .sidebar {
                position: fixed;
                top: 0;
                left: -250px;
                height: 100vh;
                z-index: 200;
                transition: left 0.3s ease;
            }

            .sidebar.open {
                left: 0;
            }

            .sidebar-overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.5);
                z-index: 199;
                display: none;
            }

            .sidebar-overlay.show {
                display: block;
            }

            .main-content {
                padding: 1rem;
                width: 100%;
            }

            .page-header {
                padding: 1rem;
                margin-bottom: 1rem;
            }

            .page-title {
                font-size: 1.5rem;
            }

            .stats-grid {
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                gap: 0.75rem;
                margin-bottom: 1rem;
            }

            .stat-card {
                padding: 1rem;
            }

            .stat-value {
                font-size: 1.5rem;
            }

            .controls {
                padding: 1rem;
                margin-bottom: 1rem;
            }

            .controls-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }

            .search-section {
                flex-direction: column;
            }

            .search-box {
                min-width: auto;
            }

            .filter-group {
                justify-content: space-between;
            }

            .actions-group {
                justify-content: center;
            }

            .table-container {
                overflow-x: auto;
                -webkit-overflow-scrolling: touch;
            }

            .table {
                min-width: 700px;
            }

            .table th,
            .table td {
                padding: 0.75rem 0.5rem;
                font-size: 0.8rem;
            }

            .table th:nth-child(6),
            .table td:nth-child(6) {
                display: none;
            }

            @media (max-width: 600px) {
                .table-container {
                    display: none;
                }

                .mobile-cards {
                    display: block;
                }
            }

            .modal-content {
                margin: 0;
                border-radius: 0;
                height: 100vh;
                max-height: 100vh;
            }
        }

        /* Animation classes */
        .fade-in {
            animation: fadeIn 0.3s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .slide-in {
            animation: slideIn 0.3s ease-out;
        }

        @keyframes slideIn {
            from { transform: translateX(-20px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        /* ✅ STYLES POUR LES COMMANDES CORRIGÉES */

/* Badge pour les invités */
.guest-badge {
    background: #f3f4f6;
    color: #374151;
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 10px;
    margin-left: 5px;
    font-weight: 500;
}

/* Informations de date */
.date-info {
    display: flex;
    flex-direction: column;
    gap: 2px;
}

.date-primary {
    font-weight: 600;
    color: var(--text-dark);
}

.date-time {
    font-size: 12px;
    color: var(--text-medium);
}

/* Informations client */
.customer-info {
    display: flex;
    flex-direction: column;
    gap: 2px;
}

.customer-name {
    font-weight: 500;
    color: var(--text-dark);
}

.customer-email {
    font-size: 12px;
    color: var(--text-medium);
}

/* Affichage des tailles */
.sizes-info {
    min-width: 120px;
}

.sizes-display {
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.sizes-text {
    font-size: 13px;
    color: var(--text-dark);
    line-height: 1.2;
}

.sizes-indicator {
    display: flex;
    align-items: center;
}

.coverage-badge {
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 10px;
    font-weight: 500;
    white-space: nowrap;
}

.coverage-badge.complete {
    background: #d1fae5;
    color: #065f46;
}

.coverage-badge.partial {
    background: #fef3c7;
    color: #92400e;
}

.coverage-badge.standard {
    background: #e0e7ff;
    color: #3730a3;
}

.coverage-badge.development {
    background: #f3f4f6;
    color: #374151;
}

/* Mobile - Affichage des tailles */
.sizes-mobile-display {
    display: flex;
    flex-direction: column;
    gap: 4px;
    margin-top: 2px;
}

.sizes-coverage {
    display: flex;
    align-items: center;
}

.coverage-complete,
.coverage-partial,
.coverage-standard,
.coverage-development {
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 10px;
    font-weight: 500;
}

.coverage-complete {
    background: #d1fae5;
    color: #065f46;
}

.coverage-partial {
    background: #fef3c7;
    color: #92400e;
}

.coverage-standard {
    background: #e0e7ff;
    color: #3730a3;
}

.coverage-development {
    background: #f3f4f6;
    color: #374151;
}

/* Informations prix */
.amount-display {
    display: flex;
    flex-direction: column;
    gap: 2px;
}

.final-amount {
    font-weight: 600;
    color: var(--text-dark);
}

.promo-info {
    display: flex;
    flex-direction: column;
    gap: 1px;
}

.original-amount {
    font-size: 11px;
    color: var(--text-medium);
    text-decoration: line-through;
}

.promo-code {
    font-size: 10px;
    background: var(--success-light);
    color: var(--success-dark);
    padding: 1px 4px;
    border-radius: 3px;
    align-self: flex-start;
}

/* Paiement */
.payment-info {
    display: flex;
    flex-direction: column;
    gap: 2px;
}

.payment-method {
    font-size: 13px;
    color: var(--text-dark);
}

.payment-status {
    font-size: 11px;
    font-weight: 500;
}

.payment-status.paid {
    color: var(--success);
}

/* Responsive amélioré */
@media (max-width: 768px) {
    .guest-badge {
        font-size: 9px;
        padding: 1px 4px;
    }
    
    .sizes-mobile-display {
        max-width: 100%;
    }
    
    .sizes-text {
        font-size: 12px;
        word-break: break-word;
    }
}

/* États vides */
.empty-state {
    text-align: center;
    padding: 40px 20px;
    color: var(--text-medium);
}

.empty-state i {
    font-size: 48px;
    margin-bottom: 16px;
    opacity: 0.5;
}

/* Actions des boutons */
.action-btn {
    background: none;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    padding: 8px 10px;
    cursor: pointer;
    transition: all 0.2s;
    color: var(--text-medium);
}

.action-btn:hover {
    background: var(--grey-light);
    border-color: var(--rose-gold);
    color: var(--rose-gold);
}

.action-btn.view:hover {
    background: var(--info-light);
    border-color: var(--info);
    color: var(--info);
}

.action-btn.edit:hover {
    background: var(--warning-light);
    border-color: var(--warning);
    color: var(--warning);
}

/* ✅ STYLES POUR LES STATUTS AVEC COULEURS */

.status-badge, .status {
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    display: inline-flex;
    align-items: center;
    gap: 4px;
    white-space: nowrap;
}

/* En attente */
.status.en-attente, .status-badge.en-attente {
    background: #fef3c7;
    color: #92400e;
    border: 1px solid #f59e0b;
}

/* En préparation */
.status.preparation, .status-badge.preparation {
    background: #dbeafe;
    color: #1e40af;
    border: 1px solid #3b82f6;
}

/* Expédiée */
.status.expediee, .status-badge.expediee {
    background: #d1fae5;
    color: #065f46;
    border: 1px solid #10b981;
}

/* Livrée */
.status.livree, .status-badge.livree {
    background: #dcfce7;
    color: #14532d;
    border: 1px solid #22c55e;
}

/* Annulée */
.status.annulee, .status-badge.annulee {
    background: #fee2e2;
    color: #991b1b;
    border: 1px solid #ef4444;
}

/* Confirmée */
.status.confirmee, .status-badge.confirmee {
    background: #e0e7ff;
    color: #3730a3;
    border: 1px solid #6366f1;
}

/* Icône dans les statuts */
.status i, .status-badge i {
    font-size: 8px;
    margin-right: 2px;
}

/* Effet hover pour les statuts */
.status:hover, .status-badge:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    transition: all 0.2s ease;
}

/* ✅ STYLES POUR LA MODALE DÉTAILS */

.order-details-container {
    max-height: 80vh;
    overflow-y: auto;
    padding: 20px;
}

.order-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 25px;
    padding-bottom: 15px;
    border-bottom: 2px solid #f3f4f6;
}

.order-title {
    display: flex;
    align-items: center;
    gap: 15px;
}

.order-title h3 {
    margin: 0;
    color: var(--text-dark);
}

.order-date {
    font-size: 14px;
    color: var(--text-medium);
}

.section {
    margin-bottom: 25px;
    background: #f9fafb;
    border-radius: 8px;
    padding: 20px;
}

.section h4 {
    margin: 0 0 15px 0;
    color: var(--text-dark);
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 16px;
    font-weight: 600;
}

.section h4 i {
    color: var(--rose-gold);
}

.info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 10px;
}

.info-grid > div {
    background: white;
    padding: 10px 12px;
    border-radius: 6px;
    font-size: 14px;
}

/* Articles */
.items-list {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.item-row {
    display: flex;
    align-items: center;
    gap: 15px;
    background: white;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.item-image {
    width: 50px;
    height: 50px;
    object-fit: cover;
    border-radius: 6px;
}

.item-info {
    flex: 1;
}

.item-name {
    font-weight: 600;
    color: var(--text-dark);
    margin-bottom: 4px;
}

.item-details {
    font-size: 13px;
    color: var(--text-medium);
}

.item-total {
    font-weight: 600;
    color: var(--rose-gold);
    font-size: 16px;
}

/* Totaux */
.totals-table {
    background: white;
    border-radius: 8px;
    overflow: hidden;
}

.total-row {
    display: flex;
    justify-content: space-between;
    padding: 12px 16px;
    border-bottom: 1px solid #f3f4f6;
}

.total-row:last-child {
    border-bottom: none;
}

.total-row.discount {
    color: var(--success);
    background: #f0fdf4;
}

.total-row.final {
    background: var(--rose-gold-light);
    color: var(--rose-gold-dark);
    font-weight: 700;
    font-size: 16px;
}

/* Paiement */
.payment-details {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 10px;
}

.payment-details > div {
    background: white;
    padding: 12px;
    border-radius: 6px;
}

.payment-status.paid {
    color: var(--success);
}

.payment-status.pending {
    color: var(--warning);
}

/* Historique */
.history-list {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.history-item {
    background: white;
    padding: 15px;
    border-radius: 8px;
    border-left: 4px solid var(--rose-gold);
}

.history-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
}

.history-action {
    font-weight: 600;
    color: var(--text-dark);
}

.history-date {
    font-size: 12px;
    color: var(--text-medium);
}

.history-details {
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.history-user {
    font-size: 13px;
    color: var(--text-medium);
}

.history-notes {
    font-size: 13px;
    color: var(--text-dark);
    background: #f9fafb;
    padding: 8px;
    border-radius: 4px;
    margin-top: 4px;
}

.no-history {
    text-align: center;
    color: var(--text-medium);
    font-style: italic;
    padding: 20px;
}

/* Suivi */
.tracking-list {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.tracking-item {
    background: white;
    padding: 15px;
    border-radius: 8px;
    border-left: 4px solid var(--info);
}

.tracking-status {
    font-weight: 600;
    color: var(--text-dark);
    margin-bottom: 4px;
}

.tracking-description {
    color: var(--text-medium);
    margin-bottom: 8px;
}

.tracking-date {
    font-size: 12px;
    color: var(--text-medium);
}

.tracking-location {
    font-size: 12px;
    color: var(--info);
    margin-top: 4px;
}

/* Actions de la modale */
.modal-actions {
    display: flex;
    gap: 10px;
    justify-content: flex-end;
    padding-top: 20px;
    border-top: 1px solid #f3f4f6;
    margin-top: 20px;
}

.btn {
    padding: 10px 20px;
    border-radius: 6px;
    border: none;
    cursor: pointer;
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: all 0.2s;
}

.btn-secondary {
    background: #f3f4f6;
    color: var(--text-dark);
}

.btn-secondary:hover {
    background: #e5e7eb;
}

.btn-primary {
    background: var(--rose-gold);
    color: white;
}

.btn-primary:hover {
    background: var(--rose-gold-dark);
}

/* Responsive */
@media (max-width: 768px) {
    .order-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
    }
    
    .info-grid {
        grid-template-columns: 1fr;
    }
    
    .item-row {
        flex-direction: column;
        text-align: center;
    }
    
    .modal-actions {
        flex-direction: column;
    }
}
    </style>
</head>

<body>

     <%- include('partials/navbarre.ejs') %>
     
    <!-- Mobile Header -->
    <div class="mobile-header">
        <div class="mobile-header-content">
            <button class="mobile-menu-btn" onclick="toggleSidebar()">
                <i class="fas fa-bars"></i>
            </button>
            <h1>Admin Commandes</h1>
            <div></div>
        </div>
    </div>

    <!-- Sidebar Overlay for Mobile -->
    <div class="sidebar-overlay" onclick="closeSidebar()"></div>

    <div class="app-layout">
        <!-- Sidebar -->
        
    <!-- Main Content -->
    <main class="main-content">
        <!-- Page Header -->
        <div class="page-header fade-in">
            <h1 class="page-title">Gestion des Commandes</h1>
            <p class="page-subtitle">Suivi et administration des commandes avec historique complet</p>
        </div>

        <!-- Stats Dashboard -->
        <div class="stats-grid fade-in">
            <div class="stat-card">
                <div class="stat-label">Total Commandes</div>
                <div class="stat-value" id="totalCommandes">
                    <%= stats.totalCommandes.value %>
                </div>
                <div class="stat-trend <%= stats.totalCommandes.direction %>">
                    <i class="fas fa-arrow-<%= stats.totalCommandes.direction %>"></i>
                    <%= Math.abs(stats.totalCommandes.trend) %>% <%= stats.totalCommandes.compared %>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Chiffre d'Affaires</div>
                <div class="stat-value" id="chiffreAffaires">
                    <%= helpers.formatPrice(stats.chiffreAffaires.value) %>€
                </div>
                <div class="stat-trend <%= stats.chiffreAffaires.direction %>">
                    <i class="fas fa-arrow-<%= stats.chiffreAffaires.direction %>"></i>
                    <%= Math.abs(stats.chiffreAffaires.trend) %>% <%= stats.chiffreAffaires.compared %>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Codes Promo Utilisés</div>
                <div class="stat-value" id="codesPromo">
                    <%= stats.codesPromoUtilises.value %>
                </div>
                <div class="stat-trend <%= stats.codesPromoUtilises.direction %>">
                    <i class="fas fa-arrow-<%= stats.codesPromoUtilises.direction %>"></i>
                    <%= Math.abs(stats.codesPromoUtilises.trend) %>% <%= stats.codesPromoUtilises.compared %>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Économies Clients</div>
                <div class="stat-value" id="reductionTotale">
                    <%= helpers.formatPrice(stats.economiesClients.value) %>€
                </div>
                <div class="stat-trend down">
                    <i class="fas fa-piggy-bank"></i>
                    <%= stats.economiesClients.compared %>
                </div>
            </div>
        </div>

        <!-- Stats par statut -->
        <div class="stats-grid fade-in" style="margin-bottom: 2rem;">
            <div class="stat-card" style="border-left: 4px solid #f59e0b;">
                <div class="stat-label">
                    <i class="fas fa-clock" style="color: #f59e0b;"></i> En Attente
                </div>
                <div class="stat-value" style="color: #f59e0b;">
                    <%= statusStats.waiting %>
                </div>
                <small style="color: #64748b;">Commandes à traiter</small>
            </div>
            <div class="stat-card" style="border-left: 4px solid #3b82f6;">
                <div class="stat-label">
                    <i class="fas fa-cogs" style="color: #3b82f6;"></i> En Préparation
                </div>
                <div class="stat-value" style="color: #3b82f6;">
                    <%= statusStats.preparing %>
                </div>
                <small style="color: #64748b;">En cours de traitement</small>
            </div>
            <div class="stat-card" style="border-left: 4px solid #10b981;">
                <div class="stat-label">
                    <i class="fas fa-shipping-fast" style="color: #10b981;"></i> Expédiées
                </div>
                <div class="stat-value" style="color: #10b981;">
                    <%= statusStats.shipped %>
                </div>
                <small style="color: #64748b;">En cours de livraison</small>
            </div>
            <div class="stat-card" style="border-left: 4px solid #059669;">
                <div class="stat-label">
                    <i class="fas fa-check-circle" style="color: #059669;"></i> Livrées
                </div>
                <div class="stat-value" style="color: #059669;">
                    <%= statusStats.delivered %>
                </div>
                <small style="color: #64748b;">Commandes terminées</small>
            </div>
            <div class="stat-card" style="border-left: 4px solid #ef4444;">
                <div class="stat-label">
                    <i class="fas fa-times-circle" style="color: #ef4444;"></i> Annulées
                </div>
                <div class="stat-value" style="color: #ef4444;">
                    <%= statusStats.cancelled %>
                </div>
                <small style="color: #64748b;">Commandes annulées</small>
            </div>
        </div>

        <!-- Controls -->
    <!-- ✅ SECTION CONTROLS CORRIGÉE AVEC SÉCURITÉ - Remplacer dans votre template -->

<!-- Controls avec formulaire fonctionnel -->
<div class="controls slide-in">
    <!-- ✅ SÉCURITÉ : Définir filters s'il n'existe pas -->
    <%
    // Initialiser filters s'il n'est pas défini
    if (typeof filters === 'undefined') {
        filters = {
            search: '',
            status: '',
            promo: '',
            date: '',
            payment: ''
        };
    }
    
    // Sécuriser helpers
    if (typeof helpers === 'undefined') {
        helpers = {
            translateStatus: function(status) {
                const statusMap = {
                    'waiting': 'En attente',
                    'preparing': 'En préparation',
                    'shipped': 'Expédiée',
                    'delivered': 'Livrée',
                    'cancelled': 'Annulée'
                };
                return statusMap[status] || 'En attente';
            },
            getPaymentMethodDisplay: function(method) {
                const methodMap = {
                    'card': 'Carte bancaire',
                    'paypal': 'PayPal',
                    'bank_transfer': 'Virement bancaire'
                };
                return methodMap[method] || 'Carte bancaire';
            }
        };
    }
    %>
    
    <!-- Info sur les filtres actifs -->
    <% 
    const activeFilters = [];
    if (filters.search && filters.search.trim()) {
        activeFilters.push(`Recherche: "${filters.search}"`);
    }
    if (filters.status) {
        try {
            activeFilters.push(`Statut: ${helpers.translateStatus(filters.status)}`);
        } catch (e) {
            activeFilters.push(`Statut: ${filters.status}`);
        }
    }
    if (filters.promo === 'with-promo') {
        activeFilters.push('Avec code promo');
    } else if (filters.promo === 'without-promo') {
        activeFilters.push('Sans code promo');
    }
    if (filters.payment) {
        try {
            activeFilters.push(`Paiement: ${helpers.getPaymentMethodDisplay(filters.payment)}`);
        } catch (e) {
            activeFilters.push(`Paiement: ${filters.payment}`);
        }
    }
    if (filters.date) {
        const dateLabels = {
            'today': 'Aujourd\'hui',
            'week': 'Cette semaine', 
            'month': 'Ce mois'
        };
        activeFilters.push(`Date: ${dateLabels[filters.date] || filters.date}`);
    }
    %>
    
    <!-- Affichage des filtres actifs -->
    <% if (activeFilters.length > 0) { %>
    <div style="background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%); border: 1px solid #22c55e; border-radius: 8px; padding: 12px; margin-bottom: 15px;">
        <div style="display: flex; align-items: center; gap: 8px; flex-wrap: wrap;">
            <i class="fas fa-filter" style="color: #16a34a;"></i>
            <strong style="color: #15803d;">Filtres actifs :</strong>
            <% activeFilters.forEach((filter, index) => { %>
                <span style="background: #dcfce7; color: #166534; padding: 2px 8px; border-radius: 12px; font-size: 12px;">
                    <%= filter %><% if (index < activeFilters.length - 1) { %>,<% } %>
                </span>
            <% }) %>
            <a href="/admin/suivi-commandes" style="background: #ef4444; color: white; padding: 2px 8px; border-radius: 12px; font-size: 12px; text-decoration: none; margin-left: 8px;">
                <i class="fas fa-times"></i> Effacer tout
            </a>
        </div>
    </div>
    <% } %>

    <!-- Formulaire de filtres -->
    <form method="GET" action="/admin/suivi-commandes" id="filtersForm">
        <div class="controls-grid">
            <div class="search-section">
                <!-- Champ de recherche -->
                <div class="search-box">
                    <i class="fas fa-search"></i>
                    <input type="text" 
                           class="search-input" 
                           name="search"
                           value="<%= filters.search || '' %>"
                           placeholder="Rechercher par numéro, client, email, code promo...">
                </div>
                
                <!-- Filtres -->
                <div class="filter-group">
                    <!-- Filtre statut -->
                    <select class="filter-select" name="status">
                        <option value="">Tous les statuts</option>
                        <option value="waiting" <%= (filters.status === 'waiting') ? 'selected' : '' %>>⏳ En attente</option>
                        <option value="preparing" <%= (filters.status === 'preparing') ? 'selected' : '' %>>🔧 En préparation</option>
                        <option value="shipped" <%= (filters.status === 'shipped') ? 'selected' : '' %>>📦 Expédiée</option>
                        <option value="delivered" <%= (filters.status === 'delivered') ? 'selected' : '' %>>✅ Livrée</option>
                        <option value="cancelled" <%= (filters.status === 'cancelled') ? 'selected' : '' %>>❌ Annulée</option>
                    </select>
                    
                    <!-- Filtre promo -->
                    <select class="filter-select" name="promo">
                        <option value="">Tous les types</option>
                        <option value="with-promo" <%= (filters.promo === 'with-promo') ? 'selected' : '' %>>🎫 Avec code promo</option>
                        <option value="without-promo" <%= (filters.promo === 'without-promo') ? 'selected' : '' %>>🚫 Sans code promo</option>
                    </select>
                    
                    <!-- Filtre paiement -->
                    <select class="filter-select" name="payment">
                        <option value="">Tous les paiements</option>
                        <option value="card" <%= (filters.payment === 'card') ? 'selected' : '' %>>💳 Carte bancaire</option>
                        <option value="paypal" <%= (filters.payment === 'paypal') ? 'selected' : '' %>>🏦 PayPal</option>
                        <option value="bank_transfer" <%= (filters.payment === 'bank_transfer') ? 'selected' : '' %>>🏪 Virement</option>
                        <option value="apple_pay" <%= (filters.payment === 'apple_pay') ? 'selected' : '' %>>🍎 Apple Pay</option>
                        <option value="google_pay" <%= (filters.payment === 'google_pay') ? 'selected' : '' %>>🔍 Google Pay</option>
                    </select>
                    
                    <!-- Filtre date -->
                    <select class="filter-select" name="date">
                        <option value="">Toutes les dates</option>
                        <option value="today" <%= (filters.date === 'today') ? 'selected' : '' %>>📅 Aujourd'hui</option>
                        <option value="week" <%= (filters.date === 'week') ? 'selected' : '' %>>📆 Cette semaine</option>
                        <option value="month" <%= (filters.date === 'month') ? 'selected' : '' %>>🗓️ Ce mois</option>
                    </select>
                </div>
            </div>
            
            <!-- Boutons d'action -->
            <div class="actions-group">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-search"></i>
                    Filtrer
                </button>
                <a href="/admin/suivi-commandes" class="btn btn-secondary">
                    <i class="fas fa-undo"></i>
                    Reset
                </a>
                <button type="button" class="btn btn-secondary" onclick="exportData()">
                    <i class="fas fa-download"></i>
                    Export
                </button>
                <button type="button" class="btn btn-primary" onclick="refreshData()">
                    <i class="fas fa-sync-alt"></i>
                    Actualiser
                </button>
            </div>
        </div>
        
        <!-- Préservation des paramètres de pagination -->
        <% if (typeof pagination !== 'undefined' && pagination && pagination.currentPage > 1) { %>
            <input type="hidden" name="page" value="<%= pagination.currentPage %>">
        <% } %>
    </form>
</div>

<!-- ✅ Section de résultats avec pagination (avec sécurité) -->
<% if (typeof pagination !== 'undefined' && pagination && pagination.total > 0) { %>
<div style="background: white; padding: 15px; border-radius: 8px; margin-bottom: 15px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
    <div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 10px;">
        <div style="color: #6b7280; font-size: 14px;">
            <i class="fas fa-list"></i>
            Affichage de <strong><%= pagination.startItem || 1 %></strong> à 
            <strong><%= pagination.endItem || pagination.total %></strong> 
            sur <strong><%= pagination.total %></strong> commandes
            <% if (activeFilters.length > 0) { %>
                <span style="background: #fef3c7; color: #92400e; padding: 2px 6px; border-radius: 4px; font-size: 11px; margin-left: 8px;">
                    Filtré
                </span>
            <% } %>
        </div>
        
        <% if (pagination.totalPages > 1) { %>
        <div style="display: flex; gap: 5px; align-items: center;">
            <!-- Première page -->
            <% if (pagination.hasPrev) { %>
                <a href="<%= buildPaginationUrl(1) %>" 
                   style="padding: 6px 10px; background: #f9fafb; border: 1px solid #e5e7eb; border-radius: 4px; text-decoration: none; color: #374151;">
                    <i class="fas fa-angle-double-left"></i>
                </a>
                <a href="<%= buildPaginationUrl(pagination.currentPage - 1) %>" 
                   style="padding: 6px 10px; background: #f9fafb; border: 1px solid #e5e7eb; border-radius: 4px; text-decoration: none; color: #374151;">
                    <i class="fas fa-angle-left"></i>
                </a>
            <% } %>
            
            <!-- Pages numérotées -->
            <% 
            const startPage = Math.max(1, pagination.currentPage - 2);
            const endPage = Math.min(pagination.totalPages, pagination.currentPage + 2);
            
            for (let i = startPage; i <= endPage; i++) { %>
                <% if (i === pagination.currentPage) { %>
                    <span style="padding: 6px 10px; background: var(--primary); color: white; border-radius: 4px; font-weight: bold;">
                        <%= i %>
                    </span>
                <% } else { %>
                    <a href="<%= buildPaginationUrl(i) %>" 
                       style="padding: 6px 10px; background: #f9fafb; border: 1px solid #e5e7eb; border-radius: 4px; text-decoration: none; color: #374151;">
                        <%= i %>
                    </a>
                <% } %>
            <% } %>
            
            <!-- Dernière page -->
            <% if (pagination.hasNext) { %>
                <a href="<%= buildPaginationUrl(pagination.currentPage + 1) %>" 
                   style="padding: 6px 10px; background: #f9fafb; border: 1px solid #e5e7eb; border-radius: 4px; text-decoration: none; color: #374151;">
                    <i class="fas fa-angle-right"></i>
                </a>
                <a href="<%= buildPaginationUrl(pagination.totalPages) %>" 
                   style="padding: 6px 10px; background: #f9fafb; border: 1px solid #e5e7eb; border-radius: 4px; text-decoration: none; color: #374151;">
                    <i class="fas fa-angle-double-right"></i>
                </a>
            <% } %>
        </div>
        <% } %>
    </div>
</div>
<% } %>

<!-- ✅ FONCTION HELPER EJS SÉCURISÉE POUR CONSTRUIRE LES URLS DE PAGINATION -->
<%
function buildPaginationUrl(page) {
    try {
        const params = new URLSearchParams();
        
        // Préserver tous les filtres actuels (avec sécurité)
        if (typeof filters !== 'undefined' && filters) {
            Object.keys(filters).forEach(key => {
                if (filters[key] && filters[key] !== '' && filters[key] !== 'all') {
                    params.set(key, filters[key]);
                }
            });
        }
        
        // Ajouter la page
        if (page && page > 1) {
            params.set('page', page);
        }
        
        const queryString = params.toString();
        return '/admin/commandes' + (queryString ? '?' + queryString : '');
    } catch (error) {
        console.error('Erreur buildPaginationUrl:', error);
        return '/admin/commandes';
    }
}
%>


<!-- ✅ FONCTION HELPER EJS POUR CONSTRUIRE LES URLS DE PAGINATION -->
<%
function buildPaginationUrl(page) {
    const params = new URLSearchParams();
    
    // Préserver tous les filtres actuels
    if (filters) {
        Object.keys(filters).forEach(key => {
            if (filters[key] && filters[key] !== '' && filters[key] !== 'all') {
                params.set(key, filters[key]);
            }
        });
    }
    
    // Ajouter la page
    if (page && page > 1) {
        params.set('page', page);
    }
    
    const queryString = params.toString();
    return '/admin/commandes' + (queryString ? '?' + queryString : '');
}
%>
        <!-- Desktop Table -->
        <div class="table-container slide-in">
            <table class="table" id="commandesTable">
                <thead>
                    <tr>
                        <th>N° Commande</th>
                        <th>Date & Heure</th>
                        <th>Client</th>
                        <th>Montant & Promo</th>
                        <th>Paiement</th>
                        <th>📏 Tailles</th>
                        <th>Statut</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="commandesTableBody">
                <tbody id="commandesTableBody">
    <% if (commandes && commandes.length > 0) { %>
        <% commandes.forEach(commande => { %>
            <tr data-order-id="<%= commande.id %>" 
                data-status="<%= commande.status %>"
                data-promo="<%= commande.promo_code ? 'true' : 'false' %>">
                
                <!-- N° Commande -->
                <td class="order-number">
                    <div class="numero-commande">
                        <%= commande.numero_commande %>
                        <% if (commande.isGuestOrder) { %>
                            <span class="guest-badge">👥 Invité</span>
                        <% } %>
                    </div>
                </td>
                
                <!-- ✅ DATE & HEURE CORRIGÉE -->
                <td class="order-date">
                    <div class="date-info">
                        <div class="date-primary">
                            <%= commande.date || new Date().toLocaleDateString('fr-FR') %>
                        </div>
                        <div class="date-time">
                            <%= commande.dateTime || new Date().toLocaleString('fr-FR') %>
                        </div>
                    </div>
                </td>
                
                <!-- Client -->
                <td class="customer-info">
                    <div class="customer-name">
                        <%= commande.customerName || 'Client inconnu' %>
                    </div>
                    <div class="customer-email">
                        <%= commande.customerEmail || 'email@inconnu.com' %>
                    </div>
                </td>
                
                <!-- Montant & Promo -->
                <td class="order-amount">
                    <div class="amount-display">
                        <span class="final-amount">
                            <%= helpers.formatPrice(commande.amount) %>€
                        </span>
                        <% if (commande.hasDiscount) { %>
                            <div class="promo-info">
                                <span class="original-amount">
                                    <%= helpers.formatPrice(commande.originalAmount) %>€
                                </span>
                                <span class="promo-code">
                                    <%= commande.promo_code %>
                                </span>
                            </div>
                        <% } %>
                    </div>
                </td>
                
                <!-- Paiement -->
<td>
    <div style="display: flex; flex-direction: column; gap: 4px;">
        <div style="font-weight: 500; color: var(--dark);">
            <% 
            const paymentMethod = commande.payment_method || 'card';
            %>
            
            <!-- Icône selon la méthode -->
            <% if (paymentMethod === 'paypal') { %>
                <i class="fab fa-paypal" style="color: #0070ba; margin-right: 4px;"></i>
            <% } else if (paymentMethod === 'apple' || paymentMethod === 'apple_pay') { %>
                <i class="fab fa-apple-pay" style="color: #000; margin-right: 4px;"></i>
            <% } else if (paymentMethod === 'google' || paymentMethod === 'google_pay') { %>
                <i class="fab fa-google-pay" style="color: #4285f4; margin-right: 4px;"></i>
            <% } else { %>
                <i class="fas fa-credit-card" style="color: var(--info); margin-right: 4px;"></i>
            <% } %>
            
            <%= getPaymentMethodDisplay(paymentMethod) %>
        </div>
        <div style="font-size: 0.8rem; color: var(--gray-medium);">
            <% if (commande.payment_status === 'paid') { %>
                ✅ Payé
            <% } else if (commande.payment_status === 'pending') { %>
                ⏳ En attente
            <% } else { %>
                ✅ Payé
            <% } %>
        </div>
    </div>
</td>


<!-- ✅ FONCTION HELPER À AJOUTER DANS LE TEMPLATE -->
<%
function getPaymentMethodDisplay(paymentMethod) {
    const methods = {
        'card': 'Carte bancaire',
        'credit_card': 'Carte bancaire', 
        'paypal': 'PayPal',
        'apple_pay': 'Apple Pay',
        'google_pay': 'Google Pay',
        'bank_transfer': 'Virement bancaire',
        'check': 'Chèque',
        'cash': 'Espèces'
    };
    return methods[paymentMethod] || 'Carte bancaire';
}
%>

                
                <!-- ✅ TAILLES CORRIGÉES -->
                <td class="sizes-info">
                    <% 
                    const sizesInfo = commande.sizesInfo || { 
                        totalItems: 0, 
                        itemsWithSizes: 0, 
                        sizesDisplay: 'Non spécifiées',
                        hasSizeInfo: false,
                        sizesCoverage: 0
                    };
                    %>
                    
                    <div class="sizes-display">
                        <div class="sizes-text">
                            <%= sizesInfo.sizesDisplay %>
                        </div>
                        
                        <% if (sizesInfo.totalItems > 0) { %>
                            <div class="sizes-indicator">
                                <% if (sizesInfo.sizesCoverage === 100) { %>
                                    <span class="coverage-badge complete">🎯 Complète</span>
                                <% } else if (sizesInfo.sizesCoverage > 0) { %>
                                    <span class="coverage-badge partial">📏 Partielle (<%= sizesInfo.sizesCoverage %>%)</span>
                                <% } else { %>
                                    <span class="coverage-badge standard">📐 Standard</span>
                                <% } %>
                            </div>
                        <% } else { %>
                            <div class="sizes-indicator">
                                <span class="coverage-badge development">❓ En développement</span>
                            </div>
                        <% } %>
                    </div>
                </td>
                
                <!-- Statut -->
                <td class="order-status">
                    <span class="status-badge <%= helpers.getStatusClass(commande.status) %>">
                        <%= helpers.translateStatus(commande.status) %>
                    </span>
                </td>
                
                <!-- Actions -->
                <td class="order-actions">
                    <button class="action-btn view" 
                            data-order-id="<%= commande.id %>"
                            onclick="viewOrderDetails('<%= commande.id %>')">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button class="action-btn edit" 
                            data-order-id="<%= commande.id %>"
                            onclick="editOrder('<%= commande.id %>')">
                        <i class="fas fa-edit"></i>
                    </button>
                </td>
            </tr>
        <% }) %>
    <% } else { %>
        <tr>
            <td colspan="8" class="empty-state">
                <i class="fas fa-inbox"></i>
                <div>Aucune commande trouvée</div>
            </td>
        </tr>
    <% } %>
</tbody>

<!-- ✅ SECTION MOBILE CORRIGÉE -->
<div class="mobile-cards">
    <% if (commandes && commandes.length > 0) { %>
        <% commandes.forEach(commande => { %>
            <% 
            const sizesInfo = commande.sizesInfo || { 
                totalItems: 0, 
                itemsWithSizes: 0, 
                sizesDisplay: 'Non spécifiées',
                hasSizeInfo: false,
                sizesCoverage: 0
            };
            %>
            
            <div class="order-card" 
                 data-order-id="<%= commande.id %>" 
                 data-status="<%= commande.status %>">
                
                <!-- En-tête de carte -->
                <div class="order-card-header">
                    <div class="order-number">
                        <%= commande.numero_commande %>
                        <% if (commande.isGuestOrder) { %>
                            <span class="guest-badge">👥 Invité</span>
                        <% } %>
                    </div>
                    <span class="status-badge <%= helpers.getStatusClass(commande.status) %>">
                        <%= helpers.translateStatus(commande.status) %>
                    </span>
                </div>
                
                <!-- Informations principales -->
                <div class="order-card-content">
                    <!-- ✅ DATE CORRIGÉE -->
                    <div class="info-item">
                        <strong>📅 Date:</strong>
                        <span><%= commande.date || new Date().toLocaleDateString('fr-FR') %></span>
                    </div>
                    
                    <div class="info-item">
                        <strong>🕐 Heure:</strong>
                        <span><%= commande.dateTime || new Date().toLocaleString('fr-FR') %></span>
                    </div>
                    
                    <!-- Client -->
                    <div class="info-item">
                        <strong>👤 Client:</strong>
                        <span><%= commande.customerName || 'Client inconnu' %></span>
                        <small class="customer-email">
                            <%= commande.customerEmail || 'email@inconnu.com' %>
                        </small>
                    </div>
                    
                    <!-- Montant -->
                    <div class="info-item">
                        <strong>💰 Montant:</strong>
                        <span class="amount">
                            <%= helpers.formatPrice(commande.amount) %>€
                            <% if (commande.hasDiscount) { %>
                                <small class="original-price">
                                    (était <%= helpers.formatPrice(commande.originalAmount) %>€)
                                </small>
                            <% } %>
                        </span>
                    </div>
                    
                    <!-- ✅ TAILLES CORRIGÉES POUR MOBILE -->
                    <div class="info-item">
                        <strong>📏 Tailles:</strong>
                        <div class="sizes-mobile-display">
                            <div class="sizes-text">
                                <%= sizesInfo.sizesDisplay %>
                            </div>
                            
                            <% if (sizesInfo.totalItems > 0) { %>
                                <div class="sizes-coverage">
                                    <% if (sizesInfo.sizesCoverage === 100) { %>
                                        <span class="coverage-complete">🎯 Complète</span>
                                    <% } else if (sizesInfo.sizesCoverage > 0) { %>
                                        <span class="coverage-partial">📏 <%= sizesInfo.sizesCoverage %>%</span>
                                    <% } else { %>
                                        <span class="coverage-standard">📐 Standard</span>
                                    <% } %>
                                </div>
                            <% } else { %>
                                <div class="sizes-coverage">
                                    <span class="coverage-development">❓ En développement</span>
                                </div>
                            <% } %>
                        </div>
                    </div>
                    
                    <!-- Code promo -->
                    <% if (commande.promo_code) { %>
                        <div class="info-item">
                            <strong>🎫 Promo:</strong>
                            <span class="promo-code"><%= commande.promo_code %></span>
                        </div>
                    <% } %>
                </div>
                
                <!-- Actions -->
                <div class="order-card-actions">
                    <button class="action-btn view" 
                            data-order-id="<%= commande.id %>"
                            onclick="viewOrderDetails('<%= commande.id %>')">
                        <i class="fas fa-eye"></i>
                        Voir
                    </button>
                    <button class="action-btn edit" 
                            data-order-id="<%= commande.id %>"
                            onclick="editOrder('<%= commande.id %>')">
                        <i class="fas fa-edit"></i>
                        Modifier
                    </button>
                </div>
            </div>
        <% }) %>
    <% } else { %>
        <div class="empty-state">
            <i class="fas fa-inbox"></i>
            <div>Aucune commande trouvée</div>
        </div>
    <% } %>
</div>
                </tbody>
            </table>
        </div>

        <!-- Mobile Cards -->
        <div class="mobile-cards" id="mobileCards">
            <% if (commandes && commandes.length > 0) { %>
                <% commandes.forEach(commande => { %>
                   <% 
                    const priceInfoMobile = helpers.calculateCorrectPrices(commande);
                    const sizesInfoMobile = commande.sizesInfo || helpers.getTaillesFromOrder(commande);
                    %>
                    <div class="order-card" 
                         data-order-id="<%= commande.id %>" 
                         data-status="<%= commande.status %>"
                         data-promo="<%= commande.promo_code ? 'with-promo' : 'without-promo' %>"
                         data-date="<%= commande.date %>">
                        
                        <div class="order-card-header">
                            <div class="order-number">
                                <%= commande.numero_commande || 'CMD-' + commande.id %>
                            </div>
                            <span class="status <%= helpers.getStatusClass(commande.status) %>">
                                <%= helpers.translateStatus(commande.status) %>
                            </span>
                        </div>
                        
                        <div class="order-card-body">
                            <div class="order-card-field">
                                <div class="order-card-label">Date & Heure</div>
                                <div class="order-card-value">
                                    <%= helpers.formatDateTime(commande.created_at || commande.order_date || commande.date) %>
                                    <br><small><%= helpers.getTimeAgo(commande.created_at || commande.order_date || commande.date) %></small>
                                </div>
                            </div>
                            <div class="order-card-field">
                                <div class="order-card-label">Client</div>
                                <div class="order-card-value"><%= commande.customer_name || commande.customerName %></div>
                            </div>
                            <div class="order-card-field">
                                <div class="order-card-label">Montant</div>
                                <div class="order-card-value">
                                    <% if (priceInfoMobile.hasDiscount) { %>
                                        <div style="text-decoration: line-through; color: var(--gray-medium); font-size: 0.8rem;">
                                            <%= priceInfoMobile.originalAmount.toFixed(2) %>€
                                        </div>
                                        <div class="amount" style="color: var(--primary-dark);">
                                            <%= priceInfoMobile.finalTotal.toFixed(2) %>€
                                        </div>
                                        <small style="color: var(--success);">-<%= priceInfoMobile.discountAmount.toFixed(2) %>€</small>
                                    <% } else { %>
                                        <div class="amount">
                                            <%= priceInfoMobile.finalTotal.toFixed(2) %>€
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                            <div class="order-card-field">
                                <div class="order-card-label">Paiement</div>
                                <div class="order-card-value">
                                    <i class="fas fa-credit-card"></i> <%= helpers.getPaymentMethodDisplay(commande.payment_method) %>

                                </div>
                            </div>
                            <div class="order-card-field">
                                <div class="order-card-label">Code Promo</div>
                                <div class="order-card-value">
                                    <% if (commande.promo_code) { %>
                                        <span class="promo-info">
                                            <%= commande.promo_code %>
                                        </span>
                                    <% } else { %>
                                        <span style="color: var(--gray-medium);">Aucun</span>
                                    <% } %>
                                </div>
                            </div>
                            
                            <!-- Tailles pour mobile -->
                            <div class="order-card-field" style="grid-column: 1 / -1;">
                                <div class="order-card-label">
                                    <i class="fas fa-ruler"></i> Tailles commandées
                                </div>
                                <div class="order-card-value">
                                    <% if (sizesInfoMobile && sizesInfoMobile.hasSizeInfo) { %>
                                        <div class="sizes-card-info">
                                            <div class="sizes-label">
                                               <%= helpers.formatSizesDisplay(sizesInfoMobile) %>

                                            </div>
                                            <div style="display: flex; align-items: center; gap: 8px; flex-wrap: wrap; margin-top: 4px;">
                                                <% 
                                                const mobileCoverage = sizesInfoMobile.sizesCoverage || 0;
                                                let mobileCoverageClass = 'no-coverage';
                                                if (mobileCoverage === 100) mobileCoverageClass = 'full-coverage';
                                                else if (mobileCoverage > 50) mobileCoverageClass = 'partial-coverage';
                                                else if (mobileCoverage > 0) mobileCoverageClass = 'limited-coverage';
                                                %>
                                                <span class="size-coverage <%= mobileCoverageClass %>">
                                                    <%= sizesInfoMobile.itemsWithSizes %>/<%= sizesInfoMobile.totalItems %>
                                                </span>
                                                <span style="font-size: 0.7rem; opacity: 0.8;">
                                                    <%= helpers.getSizesCoverageIndicator(sizesInfoMobile) %>
                                                </span>
                                            </div>
                                        </div>
                                    <% } else { %>
                                        <div class="development-indicator">
                                            <i class="fas fa-question-circle"></i>
                                            Gestion des tailles en cours de développement
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                        
                        <div class="order-card-actions">
                            <button class="action-btn view" 
                                    onclick="viewOrderDetails('<%= commande.id %>')">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="action-btn edit" 
                                    onclick="editOrder('<%= commande.id %>')">
                                <i class="fas fa-edit"></i>
                            </button>
                        </div>
                    </div>
                <% }) %>
            <% } else { %>
                <div class="empty-state">
                    <i class="fas fa-inbox"></i>
                    <div>Aucune commande trouvée</div>
                </div>
            <% } %>
        </div>
    </main>
</div>

<!-- Modal de détails -->
<div id="orderModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 class="modal-title" id="modalTitle">Détails de la commande</h2>
            <button class="close-modal" onclick="closeModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body" id="modalBody">
            <!-- Contenu dynamique -->
        </div>
    </div>
</div>

<!-- Toast Notification -->
<div id="toast" class="toast">
    <i class="fas fa-check-circle"></i>
    <span id="toastMessage">Message</span>
</div>

<!-- Loading Overlay -->
<div id="loadingOverlay" class="loading-overlay">
    <div class="spinner"></div>
</div>

<!-- ✅ PAGINATION AVANCÉE AVEC FILTRES - À ajouter dans commandes.ejs -->



<!-- ✅ CSS POUR LA PAGINATION -->
<style>
.pagination-section {
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    padding: 20px;
    margin-top: 25px;
}

.pagination-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 1px solid #e5e7eb;
}

.results-summary {
    display: flex;
    align-items: center;
    gap: 8px;
    color: #6b7280;
    font-size: 14px;
}

.results-summary i {
    color: #667eea;
}

.filtered-indicator {
    background: #fef3c7;
    color: #92400e;
    padding: 4px 8px;
    border-radius: 6px;
    font-size: 12px;
    margin-left: 10px;
}

.page-size-selector {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 14px;
}

.page-size-selector label {
    color: #6b7280;
    font-weight: 500;
}

.page-size-selector select {
    padding: 6px 10px;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 14px;
}

.pagination-nav {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 8px;
    margin-bottom: 20px;
    flex-wrap: wrap;
}

.pagination-btn {
    display: inline-flex;
    align-items: center;
    gap: 6px;
    padding: 10px 16px;
    background: #f9fafb;
    color: #374151;
    text-decoration: none;
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.2s;
    border: 1px solid #e5e7eb;
}

.pagination-btn:hover:not(.disabled) {
    background: #667eea;
    color: white;
    transform: translateY(-1px);
}

.pagination-btn.disabled {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
}

.pagination-numbers {
    display: flex;
    align-items: center;
    gap: 4px;
}

.pagination-number {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    background: #f9fafb;
    color: #374151;
    text-decoration: none;
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.2s;
    border: 1px solid #e5e7eb;
}

.pagination-number:hover {
    background: #667eea;
    color: white;
    transform: translateY(-1px);
}

.pagination-number.active {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-color: #667eea;
    box-shadow: 0 2px 4px rgba(102, 126, 234, 0.3);
}

.pagination-ellipsis {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    color: #9ca3af;
    font-weight: bold;
}

.quick-nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: 15px;
    border-top: 1px solid #e5e7eb;
}

.jump-to-page {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 14px;
}

.jump-to-page label {
    color: #6b7280;
    font-weight: 500;
}

.jump-to-page input {
    width: 60px;
    padding: 6px 10px;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    text-align: center;
    font-size: 14px;
}

.btn-jump {
    padding: 6px 10px;
    background: #667eea;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s;
}

.btn-jump:hover {
    background: #5a67d8;
    transform: translateY(-1px);
}

.quick-actions {
    display: flex;
    gap: 6px;
}

.quick-btn {
    width: 36px;
    height: 36px;
    background: #f9fafb;
    color: #6b7280;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    justify-content: center;
}

.quick-btn:hover {
    background: #667eea;
    color: white;
    transform: translateY(-1px);
}

/* Responsive */
@media (max-width: 768px) {
    .pagination-info {
        flex-direction: column;
        gap: 15px;
        text-align: center;
    }
    
    .pagination-nav {
        gap: 4px;
    }
    
    .pagination-btn {
        padding: 8px 12px;
        font-size: 14px;
    }
    
    .pagination-number {
        width: 36px;
        height: 36px;
        font-size: 14px;
    }
    
    .quick-nav {
        flex-direction: column;
        gap: 15px;
    }
    
    .pagination-numbers {
        flex-wrap: wrap;
        justify-content: center;
    }
}

@media (max-width: 480px) {
    .pagination-numbers {
        display: none; /* Masquer les numéros sur très petits écrans */
    }
    
    .pagination-nav {
        justify-content: space-between;
    }
    
    .pagination-btn {
        flex: 1;
        justify-content: center;
        max-width: 120px;
    }
}
</style>

<!-- ✅ JAVASCRIPT POUR LA PAGINATION -->
<script>
// ✅ FONCTION POUR CONSTRUIRE L'URL DE PAGINATION
function buildPaginationUrl(page) {
    const url = new URL(window.location);
    url.searchParams.set('page', page);
    return url.toString();
}

// ✅ CHANGEMENT DE TAILLE DE PAGE
function changePageSize(newSize) {
    const url = new URL(window.location);
    url.searchParams.set('limit', newSize);
    url.searchParams.set('page', '1'); // Retour à la première page
    window.location.href = url.toString();
}

// ✅ SAUT À UNE PAGE SPÉCIFIQUE


// ✅ GESTION DE LA TOUCHE ENTRÉE POUR LE SAUT
function handleJumpToPage(event) {
    if (event.key === 'Enter') {
        event.preventDefault();
        jumpToPage();
    }
}

// ✅ NAVIGATION RAPIDE
function goToFirstPage() {
    window.location.href = buildPaginationUrl(1);
}




</script>

<!-- ✅ FONCTION HELPER EJS POUR CONSTRUIRE LES URLS -->
<%
function buildPaginationUrl(page) {
    const params = new URLSearchParams();
    
    // Préserver tous les filtres actuels
    if (filters) {
        Object.keys(filters).forEach(key => {
            if (filters[key] && filters[key] !== 'all' && filters[key] !== '') {
                params.set(key, filters[key]);
            }
        });
    }
    
    // Ajouter la page
    params.set('page', page);
    
    return '/admin/commandes?' + params.toString();
}
%>

<script>

console.log('🔍 DEBUG: Vérification des éléments de modal');

// 2. Vérifiez que tous les éléments existent
document.addEventListener('DOMContentLoaded', function() {
    // Vérification des éléments modaux
    const modal = document.getElementById('orderModal');
    const modalTitle = document.getElementById('modalTitle');
    const modalBody = document.getElementById('modalBody');
    
    console.log('📋 Éléments modal trouvés:', {
        modal: !!modal,
        modalTitle: !!modalTitle,
        modalBody: !!modalBody
    });
    
    if (!modal) {
        console.error('❌ ERREUR: #orderModal non trouvé!');
    }
    if (!modalTitle) {
        console.error('❌ ERREUR: #modalTitle non trouvé!');
    }
    if (!modalBody) {
        console.error('❌ ERREUR: #modalBody non trouvé!');
    }
    
    // Vérification des boutons
    const viewButtons = document.querySelectorAll('.action-btn.view');
    const editButtons = document.querySelectorAll('.action-btn.edit');
    
    console.log('🔘 Boutons trouvés:', {
        viewButtons: viewButtons.length,
        editButtons: editButtons.length
    });
    
    // Test de la fonction showModal
    window.testModal = function() {
        console.log('🧪 Test de la modal...');
        showModal();
    };
    
    console.log('🧪 Pour tester la modal, tapez: testModal() dans la console');
});

// 3. Version corrigée de viewOrderDetails avec plus de debug
async function viewOrderDetails(orderId) {
    try {
        console.log('🚀 === DÉBUT viewOrderDetails ===');
        console.log(`📋 orderId reçu: "${orderId}" (type: ${typeof orderId})`);
        
        // Validation stricte de l'orderId
        if (!orderId || orderId === 'undefined' || orderId === 'null' || orderId === '') {
            console.error('❌ orderId invalide:', orderId);
            showToast('Erreur: ID de commande invalide', 'error');
            return;
        }
        
        const cleanOrderId = String(orderId).trim();
        console.log(`✅ orderId nettoyé: "${cleanOrderId}"`);
        
        // Vérifier que la modal existe
        const modal = document.getElementById('orderModal');
        if (!modal) {
            console.error('❌ ERREUR CRITIQUE: Modal #orderModal non trouvée!');
            alert('Erreur: Modal non trouvée dans le DOM');
            return;
        }
        
        console.log('📡 Début de la requête fetch...');
        showLoading();
        
        const url = `/admin/commandes/${cleanOrderId}/details`;
        console.log(`🔗 URL: ${url}`);
        
        const response = await fetch(url, {
            method: 'GET',
            headers: { 
                'Accept': 'application/json', 
                'Content-Type': 'application/json' 
            }
        });
        
        console.log(`📡 Réponse reçue - Status: ${response.status}`);
        
        if (!response.ok) {
            throw new Error(`Erreur HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('📊 Données reçues:', {
            success: data.success,
            hasOrder: !!data.order,
            hasItems: !!data.items && data.items.length,
            orderNumber: data.order?.numero_commande
        });
        
        if (data.success && data.order) {
            console.log('✅ Données valides, construction de la modal...');
            await buildAndShowModal(data, cleanOrderId);
        } else {
            throw new Error(data.message || 'Données invalides reçues');
        }
        
    } catch (error) {
        console.error('❌ Erreur dans viewOrderDetails:', error);
        console.error('Stack:', error.stack);
        showToast(`Erreur: ${error.message}`, 'error');
    } finally {
        hideLoading();
        console.log('🏁 === FIN viewOrderDetails ===');
    }
}

// 4. Fonction séparée pour construire et afficher la modal
async function buildAndShowModal(data, orderId) {
    try {
        console.log('🏗️ Construction de la modal...');
        
        const { order, items = [], history = [], tracking = [] } = data;
        
        // Construction du contenu simple pour tester
        const modalContent = `
            <div class="order-details-container">
                <!-- Test simple -->
                <div class="order-header">
                    <h3>Commande ${order.numero_commande || order.id}</h3>
                    <div>Date: ${formatDateTime(order.created_at) || 'N/A'}</div>
                </div>
                
                <!-- Informations client -->
                <div class="section">
                    <h4><i class="fas fa-user"></i> Informations de livraison</h4>
                    <div>
                        <p><strong>Nom:</strong> ${order.customer_name || 'N/A'}</p>
                        <p><strong>Email:</strong> ${order.customer_email || 'N/A'}</p>
                        <p><strong>Téléphone:</strong> ${order.customer_phone || order.shipping_phone || 'N/A'}</p>
                        <p><strong>Adresse:</strong> ${order.shipping_address || 'N/A'}</p>
                    </div>
                </div>
                
                <!-- Articles -->
                <div class="section">
                    <h4><i class="fas fa-shopping-bag"></i> Articles (${items.length})</h4>
                    ${items.map(item => `
                        <div style="border: 1px solid #eee; padding: 10px; margin: 5px 0;">
                            <strong>${item.name}</strong><br>
                            Quantité: ${item.quantity} | Prix: ${formatPrice(item.price || 0)}€
                        </div>
                    `).join('')}
                </div>
                
                <!-- Actions -->
                <div style="margin-top: 20px; text-align: center;">
                    <button onclick="closeModal()" style="padding: 10px 20px; margin: 5px;">
                        Fermer
                    </button>
                    <button onclick="editOrder('${orderId}')" style="padding: 10px 20px; margin: 5px;">
                        Modifier
                    </button>
                </div>
            </div>
        `;
        
        // Mise à jour du DOM
        console.log('📝 Mise à jour du contenu de la modal...');
        
        const modalTitle = document.getElementById('modalTitle');
        const modalBody = document.getElementById('modalBody');
        
        if (modalTitle) {
            modalTitle.textContent = `Commande ${order.numero_commande || order.id}`;
            console.log('✅ Titre mis à jour');
        } else {
            console.error('❌ modalTitle non trouvé');
        }
        
        if (modalBody) {
            modalBody.innerHTML = modalContent;
            console.log('✅ Contenu mis à jour');
        } else {
            console.error('❌ modalBody non trouvé');
        }
        
        // Affichage de la modal
        console.log('👁️ Affichage de la modal...');
        showModal();
        
    } catch (error) {
        console.error('❌ Erreur construction modal:', error);
        throw error;
    }
}

// 5. Version simplifiée et robuste de showModal
function showModal() {
    console.log('🎭 showModal appelée');
    
    const modal = document.getElementById('orderModal');
    if (!modal) {
        console.error('❌ Modal non trouvée dans showModal');
        alert('Erreur: Modal non trouvée');
        return false;
    }
    
    try {
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
        console.log('✅ Modal affichée avec succès');
        return true;
    } catch (error) {
        console.error('❌ Erreur affichage modal:', error);
        return false;
    }
}

// 6. Version robuste de closeModal
function closeModal() {
    console.log('🎭 closeModal appelée');
    
    const modal = document.getElementById('orderModal');
    if (modal) {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
        console.log('✅ Modal fermée');
    } else {
        console.error('❌ Modal non trouvée dans closeModal');
    }
}

// 7. Test de formatPrice et formatDateTime
function formatPrice(price) {
    try {
        return parseFloat(price || 0).toLocaleString('fr-FR', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        });
    } catch (error) {
        console.error('Erreur formatPrice:', error);
        return '0,00';
    }
}

function formatDateTime(dateString) {
    try {
        if (!dateString) return 'N/A';
        const date = new Date(dateString);
        return date.toLocaleString('fr-FR');
    } catch (error) {
        console.error('Erreur formatDateTime:', error);
        return 'Date invalide';
    }
}

// 8. Export des fonctions globalement
window.viewOrderDetails = viewOrderDetails;
window.showModal = showModal;
window.closeModal = closeModal;
window.testModal = testModal;

    // ✅ SCRIPT ADMIN COMMANDES - SOLUTION DIRECTE POUR orderId
// Configuration et variables globales
const config = {
    baseUrl: '',
    currentUser: typeof user !== 'undefined' ? (user?.name || "Admin") : 'Admin',
    totalOrders: typeof commandes !== 'undefined' ? commandes.length : 0,
    filters: { search: '', status: '', promo: '', date: '', payment: '' }
};

let allOrders = [];
let filteredOrders = [];

// ✅ INITIALISATION AVEC CORRECTION IMMÉDIATE DES BOUTONS
document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 Initialisation Admin Commandes - Solution directe orderId');
    initializeData();
    fixAllActionButtons(); // ✅ CORRECTION IMMÉDIATE
    setupEventListeners();
    debugOrderStructure();
});

// ✅ FONCTION POUR CORRIGER TOUS LES BOUTONS D'ACTION
function fixAllActionButtons() {
    console.log('🔧 Correction de tous les boutons d\'action');
    
    // ✅ CORRIGER LES BOUTONS DANS LE TABLEAU
    const tableRows = document.querySelectorAll('#commandesTableBody tr[data-order-id]');
    tableRows.forEach((row, index) => {
        const orderId = row.dataset.orderId;
        if (!orderId) {
            console.warn(`⚠️ Ligne ${index} sans orderId`);
            return;
        }
        
        console.log(`🔧 Correction boutons pour commande ${orderId}`);
        
        // Corriger bouton "Voir"
        const viewButton = row.querySelector('.action-btn.view');
        if (viewButton) {
            viewButton.setAttribute('data-order-id', orderId);
            viewButton.onclick = function(e) {
                e.preventDefault();
                console.log(`👁️ Clic Voir - orderId: ${orderId}`);
                viewOrderDetails(orderId);
            };
        }
        
        // Corriger bouton "Modifier"
        const editButton = row.querySelector('.action-btn.edit');
        if (editButton) {
            editButton.setAttribute('data-order-id', orderId);
            editButton.onclick = function(e) {
                e.preventDefault();
                console.log(`✏️ Clic Modifier - orderId: ${orderId}`);
                editOrder(orderId);
            };
        }
    });
    
    // ✅ CORRIGER LES BOUTONS DANS LES CARTES MOBILES
    const mobileCards = document.querySelectorAll('.order-card[data-order-id]');
    mobileCards.forEach((card, index) => {
        const orderId = card.dataset.orderId;
        if (!orderId) {
            console.warn(`⚠️ Carte ${index} sans orderId`);
            return;
        }
        
        console.log(`📱 Correction boutons mobile pour commande ${orderId}`);
        
        // Corriger boutons dans les cartes
        const viewButton = card.querySelector('.action-btn.view');
        const editButton = card.querySelector('.action-btn.edit');
        
        if (viewButton) {
            viewButton.onclick = function(e) {
                e.preventDefault();
                console.log(`👁️ Clic Mobile Voir - orderId: ${orderId}`);
                viewOrderDetails(orderId);
            };
        }
       
          if (editButton) {
            editButton.setAttribute('data-order-id', orderId);
            editButton.onclick = function(e) {
                e.preventDefault();
                console.log(`✏️ Clic Modifier mobile - orderId: ${orderId}`);
                editOrder(orderId);
            };
        }
    });
    
    console.log('✅ Tous les boutons d\'action ont été corrigés');
}

// ✅ DEBUG POUR VOIR LA STRUCTURE EXACTE
function debugOrderStructure() {
    console.log('🔍 Debug structure des commandes');
    const tableRows = document.querySelectorAll('#commandesTableBody tr[data-order-id]');
    const mobileCards = document.querySelectorAll('.order-card[data-order-id]');
    
    console.log(`📊 Trouvé ${tableRows.length} lignes de tableau et ${mobileCards.length} cartes mobiles`);
    
    tableRows.forEach((row, index) => {
        if (index < 3) { // Log seulement les 3 premiers pour éviter le spam
            console.log(`📋 Ligne ${index}: orderId = ${row.dataset.orderId}`);
        }
    });
}

// Fonctions utilitaires
// Fonctions utilitaires
function safeToFixed(value, decimals = 2) {
    if (value === null || value === undefined || isNaN(value)) return '0.00';
    return parseFloat(value).toFixed(decimals);
}

function safeParseFloat(value) {
    if (value === null || value === undefined || value === '') return 0;
    const parsed = parseFloat(value);
    return isNaN(parsed) ? 0 : parsed;
}

function formatCurrency(amount) {
    const safeAmount = safeParseFloat(amount);
    return safeAmount.toLocaleString('fr-FR', { 
        minimumFractionDigits: 2, 
        maximumFractionDigits: 2 
    }) + '€';
}

function formatDateTime(dateString) {
    if (!dateString) return 'N/A';
    try {
        const date = new Date(dateString);
        return date.toLocaleString('fr-FR', {
            day: '2-digit',
            month: '2-digit', 
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    } catch (error) {
        return dateString;
    }
}

// ✅ FONCTION HELPER POUR FORMATER LES PRIX
function formatPrice(price) {
    return parseFloat(price || 0).toLocaleString('fr-FR', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
    });
}

function getTimeAgo(dateString) {
    if (!dateString || typeof dateString === 'string' && dateString.includes('Il y a')) {
        return 'Temps à recalculer';
    }
    try {
        const date = new Date(dateString);
        if (isNaN(date.getTime())) return 'Date invalide';
        
        const now = new Date();
        const diffMs = Math.abs(now - date);
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffHours / 24);
        
        if (diffDays > 0) {
            return `Il y a ${diffDays} jour${diffDays > 1 ? 's' : ''}`;
        } else if (diffHours > 0) {
            return `Il y a ${diffHours} heure${diffHours > 1 ? 's' : ''}`;
        } else {
            return 'Récemment';
        }
    } catch (error) {
        return 'Erreur de date';
    }
}

function getStatusClass(status) {
    const statusMap = {
        'waiting': 'en-attente', 'preparing': 'preparation', 'shipped': 'expediee',
        'delivered': 'livree', 'cancelled': 'annulee', 'en_attente': 'en-attente',
        'preparation': 'preparation', 'expediee': 'expediee', 'livree': 'livree', 
        'annulee': 'annulee', 'en_preparation': 'preparation', 'confirmee': 'confirmee'
    };
    return statusMap[status] || 'en-attente';
}

function translateStatus(status) {
    const statusMap = {
        'waiting': 'En attente', 'preparing': 'En préparation', 'shipped': 'Expédiée',
        'delivered': 'Livrée', 'cancelled': 'Annulée', 'en_attente': 'En attente',
        'preparation': 'En préparation', 'expediee': 'Expédiée', 'livree': 'Livrée', 
        'annulee': 'Annulée', 'en_preparation': 'En préparation', 'confirmee': 'Confirmée'
    };
    return statusMap[status] || 'En attente';
}

function getPaymentMethodDisplay(paymentMethod) {
    const methods = {
        'card': 'Carte bancaire', 'credit_card': 'Carte bancaire',
        'paypal': 'PayPal', 'bank_transfer': 'Virement bancaire',
        'cash': 'Espèces'
    };
    return methods[paymentMethod] || 'Carte bancaire';
}

function initializeData() {
    const rows = document.querySelectorAll('#commandesTableBody tr[data-order-id]');
    allOrders = Array.from(rows).map(row => ({
        id: row.dataset.orderId, 
        status: row.dataset.status, 
        promo: row.dataset.promo,
        date: row.dataset.date, 
        element: row,
        cardElement: document.querySelector(`.order-card[data-order-id="${row.dataset.orderId}"]`)
    }));
    filteredOrders = [...allOrders];
    console.log(`📊 ${allOrders.length} commandes initialisées`);
}

function setupEventListeners() {
    // Supprimer tous les anciens event listeners automatiques
    console.log('⚠️ Anciens event listeners désactivés pour éviter les conflits');

    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal')) closeModal();
    });

    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') { closeModal(); closeSidebar(); }
    });
}

// ✅ FONCTION VIEW ORDER DETAILS SIMPLIFIÉE
// ✅ FONCTION VIEWORDERDETAILS CORRIGÉE
async function viewOrderDetails(orderId) {
    try {
        console.log(`👁️ Affichage détails commande ${orderId}`);
        showLoading();
        
        const response = await fetch(`/admin/commandes/${orderId}/details`);
        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message || 'Erreur lors du chargement');
        }
        
        const order = data.order;
        const items = data.items || [];
        const history = data.history || [];
        const tracking = data.tracking || [];
        
        // ✅ CONSTRUIRE LE CONTENU DE LA MODALE AVEC PRIX CORRECTS
        const modalContent = `
            <div class="order-details-container">
                <!-- En-tête -->
                <div class="order-header">
                    <div class="order-title">
                        <h3>Commande ${order.numero_commande || order.id}</h3>
                        <span class="status-badge ${getStatusClass(order.status)}">
                            ${translateStatus(order.status)}
                        </span>
                    </div>
                    <div class="order-date">
                        ${formatDateTime(order.created_at)} 
                        ${order.isGuestOrder ? '<span class="guest-badge">👥 Invité</span>' : ''}
                    </div>
                </div>
                
                <!-- Informations client -->
               <div class="section">
    <h4><i class="fas fa-user"></i> Informations de livraison</h4>
    <div class="info-grid">
        <div><strong>Nom complet:</strong> ${order.customer_name || 'N/A'}</div>
        <div><strong>Email:</strong> ${order.customer_email || 'N/A'}</div>
        <div><strong>Téléphone:</strong> ${order.customer_phone || order.shipping_phone || 'N/A'}</div>
        <div><strong>Adresse complète:</strong> 
            ${order.shipping_address || 'N/A'}
            ${order.shipping_city ? '<br>' + order.shipping_city : ''}
            ${order.shipping_postal_code ? '<br>' + order.shipping_postal_code : ''}
            ${order.shipping_country ? '<br>' + order.shipping_country : ''}
        </div>
    </div>
</div>
                
               <!-- Articles commandés -->
<div class="section">
    <h4><i class="fas fa-shopping-bag"></i> Articles commandés</h4>
    <div class="items-list">
        ${items.map(item => {
            // ✅ CORRECTION : Construire le bon chemin d'image
            let imagePath = '/images/placeholder.jpg'; // Image par défaut
            
            // Vérifier différentes sources d'image possibles
            if (item.image && !item.image.includes('/images/placeholder.jpg')) {
                // Si l'image existe et n'est pas le placeholder
                if (item.image.startsWith('/uploads/')) {
                    imagePath = item.image; // Chemin déjà complet
                } else {
                    imagePath = `/uploads/jewels/${item.image}`; // Ajouter le chemin
                }
            } else if (item.jewel_main_image) {
                imagePath = `/uploads/jewels/${item.jewel_main_image}`;
            } else if (item.jewel_image) {
                imagePath = item.jewel_image.startsWith('/uploads/') ? item.jewel_image : `/uploads/jewels/${item.jewel_image}`;
            }
            
            return `
                <div class="item-row">
                    <img src="${imagePath}" 
                         alt="${item.name || item.jewel_name}" 
                         class="item-image"
                         onerror="this.src='/images/placeholder.jpg'; this.style.opacity='0.5';">
                    <div class="item-info">
                        <div class="item-name">${item.name || item.jewel_name}</div>
                        <div class="item-details">
                            ${item.size && item.size !== 'Non spécifiée' ? `Taille: ${item.size} |` : ''}
                            Quantité: ${item.quantity} |
                            Prix unitaire: ${formatPrice(item.price)}€
                            ${item.matiere ? `| Matière: ${item.matiere}` : ''}
                        </div>
                    </div>
                    <div class="item-total">
                        ${formatPrice(item.total || (item.price * item.quantity))}€
                    </div>
                </div>
            `;
        }).join('')}
    </div>
</div>
                
                <!-- ✅ TOTAUX CORRIGÉS -->
                <div class="section">
                    <h4><i class="fas fa-calculator"></i> Récapitulatif financier</h4>
                    <div class="totals-table">
                        <div class="total-row">
                            <span>Sous-total articles:</span>
                            <span>${formatPrice(data.summary?.originalSubtotal || order.subtotal || 0)}€</span>
                        </div>
                        ${data.summary?.discount > 0 ? `
                            <div class="total-row discount">
                                <span>Réduction ${order.promo_code ? `(${order.promo_code})` : ''}:</span>
                                <span>-${formatPrice(data.summary.discount)}€</span>
                            </div>
                        ` : ''}
                        <div class="total-row">
                            <span>Frais de livraison:</span>
                            <span>${formatPrice(data.summary?.shipping || order.shipping_price || 0)}€</span>
                        </div>
                        <div class="total-row final">
                            <strong>Total payé:</strong>
                            <strong>${formatPrice(data.summary?.total || order.total || 0)}€</strong>
                        </div>
                    </div>
                </div>
                
                <!-- ✅ PAIEMENT -->
                <!-- ✅ PAIEMENT SYNCHRONISÉ -->
<div class="section">
    <h4><i class="fas fa-credit-card"></i> Paiement</h4>
    <div class="payment-details">
        <div><strong>Méthode:</strong> ${order.payment_method_display || getPaymentMethodDisplay(order.payment_method || 'card')}</div>
        <div><strong>Statut:</strong> 
            <span class="payment-status ${order.payment_status === 'paid' ? 'paid' : 'pending'}">
                ${order.payment_status === 'paid' ? '✅ Payé' : 
                  order.payment_status === 'pending' ? '⏳ En attente' : 
                  order.payment_status === 'failed' ? '❌ Échec' : '⏳ En attente'}
            </span>
        </div>
        ${order.payment_date ? `<div><strong>Date:</strong> ${new Date(order.payment_date).toLocaleDateString('fr-FR')}</div>` : ''}
    </div>
</div>
                </div>
                
                <!-- ✅ HISTORIQUE DES MODIFICATIONS -->
                <div class="section">
    <h4><i class="fas fa-history"></i> Historique des modifications</h4>
    <div class="history-list">
        ${history && history.length > 0 ? history
            .filter(h => h.new_status && h.new_status !== 'N/A' && h.new_status.trim() !== '')
            .slice(0, 5) // Limiter à 5 entrées max
            .map(h => `
                <div class="history-item">
                    <div class="history-header">
                        <span class="history-action">
                            ${h.old_status && h.old_status !== h.new_status ? 
                                `${translateStatus(h.old_status)} → ${translateStatus(h.new_status)}` : 
                                `Statut: ${translateStatus(h.new_status)}`
                            }
                        </span>
                        <span class="history-date">
                            ${h.created_at ? new Date(h.created_at).toLocaleDateString('fr-FR') + ' ' + 
                              new Date(h.created_at).toLocaleTimeString('fr-FR', {hour: '2-digit', minute: '2-digit'}) 
                              : 'Date inconnue'}
                        </span>
                    </div>
                    <div class="history-details">
                        ${h.updated_by ? `<div class="history-user">👤 Par: ${h.updated_by}</div>` : ''}
                        ${h.notes && h.notes !== 'N/A' ? `<div class="history-notes">📝 ${h.notes}</div>` : ''}
                    </div>
                </div>
            `).join('') 
            : '<div class="no-history">Aucune modification enregistrée</div>'}
    </div>
</div>           
                <!-- Suivi livraison -->
                ${tracking.length > 0 ? `
                    <div class="section">
                        <h4><i class="fas fa-truck"></i> Suivi de livraison</h4>
                        <div class="tracking-list">
                            ${tracking.map(t => `
                                <div class="tracking-item">
                                    <div class="tracking-status">${t.status}</div>
                                    <div class="tracking-description">${t.description}</div>
                                    <div class="tracking-date">${formatDateTime(t.created_at)}</div>
                                    ${t.location ? `<div class="tracking-location">📍 ${t.location}</div>` : ''}
                                </div>
                            `).join('')}
                        </div>
                    </div>
                ` : ''}
                
                <!-- Actions -->
                <div class="modal-actions">
                    <button class="btn btn-secondary" onclick="closeModal()">
                        <i class="fas fa-times"></i> Fermer
                    </button>
                    <button class="btn btn-primary" onclick="editOrder('${orderId}')">
                        <i class="fas fa-edit"></i> Modifier
                    </button>
                </div>
            </div>
        `;
        
        document.getElementById('modalTitle').textContent = `Détails de la commande ${order.numero_commande || order.id}`;
        document.getElementById('modalBody').innerHTML = modalContent;
        showModal();
        
    } catch (error) {
        console.error('❌ Erreur chargement détails:', error);
        showToast('Erreur lors du chargement des détails', 'error');
    } finally {
        hideLoading();
    }
}

// ✅ AFFICHAGE MODAL AVEC STYLE ORIGINAL COMPLET
function displayOrderDetails(data, orderId) {
    const { order, items, summary, modifications, history } = data;
    const safeOrder = order || {};
    const safeItems = items || [];
    const safeSummary = summary || {};
    const safeModifications = modifications || history || [];
    const finalOrderId = orderId || safeOrder.id;
    
    const realDate = safeOrder.created_at || safeOrder.order_date || safeOrder.date;
    const realTrackingNumber = safeOrder.tracking_number || '';
    
    // ✅ UTILISER LES BONNES DONNÉES DE LIVRAISON
    const deliveryInfo = {
        // Nom du destinataire (priorité aux données de la commande)
        name: safeOrder.customer_name || `${safeOrder.customer_first_name || ''} ${safeOrder.customer_last_name || ''}`.trim() || 'Destinataire inconnu',
        
        // Email (priorité à celui de la commande)
        email: safeOrder.customer_email || safeOrder.display_customer_email || safeOrder.email?.final_used || 'Email non renseigné',
        
        // Adresse de livraison (PAS l'adresse du compte)
        address: safeOrder.shipping_address || safeOrder.delivery_address || 'Adresse de livraison non renseignée',
        city: safeOrder.shipping_city || safeOrder.delivery_city || '',
        postalCode: safeOrder.shipping_postal_code || safeOrder.delivery_postal_code || '',
        country: safeOrder.shipping_country || safeOrder.delivery_country || 'France',
        
        // Téléphone de livraison (priorité au téléphone de livraison)
        phone: safeOrder.shipping_phone || safeOrder.delivery_phone || safeOrder.phone || 'Non renseigné'
    };
    
    console.log(`📦 Données de livraison extraites:`, deliveryInfo);
    
    document.getElementById('modalTitle').innerHTML = `<i class="fas fa-receipt"></i> Commande ${safeOrder.numero_commande || 'CMD-' + finalOrderId}`;

    const modalContent = `
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 25px; margin-bottom: 25px;">
            <!-- Informations générales -->
            <div>
                <h4 style="color: var(--primary-dark); margin-bottom: 15px; padding-bottom: 10px; border-bottom: 2px solid var(--primary-light);">
                    <i class="fas fa-info-circle"></i> Informations générales
                </h4>
                <div style="background: #f8fafc; padding: 20px; border-radius: 10px; border-left: 4px solid var(--primary);">
                    <div style="display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #e5e7eb;">
                        <span style="color: #64748b; font-weight: 500;">Mode de livraison:</span>
                        <strong style="color: var(--dark);">${safeOrder.shipping_method || 'Standard'}</strong>
                    </div>
                    <div style="display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #e5e7eb;">
                        <span style="color: #64748b; font-weight: 500;">Mode de paiement:</span>
                        <strong style="color: var(--dark);">
                            <i class="fas fa-credit-card"></i> ${getPaymentMethodDisplay(safeOrder.payment_method)}
                        </strong>
                    </div>
                    ${realTrackingNumber ? `
                    <div style="display: flex; justify-content: space-between; padding: 10px 0;">
                        <span style="color: #64748b; font-weight: 500;">Numéro de suivi:</span>
                        <strong style="color: var(--primary-dark); font-family: monospace;">
                            <i class="fas fa-truck"></i> ${realTrackingNumber}
                        </strong>
                    </div>
                    ` : ''}
                    ${safeOrder.internal_notes ? `
                    <div style="padding: 10px 0;">
                        <span style="color: #64748b; font-weight: 500;">Notes internes:</span>
                        <div style="background: #fef3c7; padding: 8px; border-radius: 4px; margin-top: 5px; font-size: 14px;">
                            ${safeOrder.internal_notes}
                        </div>
                    </div>
                    ` : ''}
                </div>
            </div>

            <!-- ✅ INFORMATIONS DE LIVRAISON CORRIGÉES -->
            <div>
                <h4 style="color: var(--primary-dark); margin-bottom: 15px; padding-bottom: 10px; border-bottom: 2px solid var(--primary-light);">
                    <i class="fas fa-shipping-fast"></i> Informations de livraison
                </h4>
                <div style="background: #f0f9ff; padding: 20px; border-radius: 10px; border-left: 4px solid #3b82f6;">
                    <div style="margin-bottom: 15px;">
                        <div style="color: #1e40af; font-weight: 600; margin-bottom: 5px;">
                            <i class="fas fa-user"></i> Destinataire
                        </div>
                        <div style="color: var(--dark); font-weight: 500;">${deliveryInfo.name}</div>
                    </div>
                    
                    <div style="margin-bottom: 15px;">
                        <div style="color: #1e40af; font-weight: 600; margin-bottom: 5px;">
                            <i class="fas fa-envelope"></i> Email
                        </div>
                        <div style="color: var(--dark);">${deliveryInfo.email}</div>
                    </div>
                    
                    <div style="margin-bottom: 15px;">
                        <div style="color: #1e40af; font-weight: 600; margin-bottom: 5px;">
                            <i class="fas fa-map-marker-alt"></i> Adresse de livraison
                        </div>
                        <div style="color: var(--dark); line-height: 1.4;">
                            ${deliveryInfo.address}
                            ${deliveryInfo.city ? `<br>${deliveryInfo.postalCode} ${deliveryInfo.city}` : ''}
                            ${deliveryInfo.country !== 'France' ? `<br>${deliveryInfo.country}` : ''}
                        </div>
                    </div>
                    
                    ${deliveryInfo.phone !== 'Non renseigné' ? `
                    <div style="margin-bottom: 15px;">
                        <div style="color: #1e40af; font-weight: 600; margin-bottom: 5px;">
                            <i class="fas fa-phone"></i> Téléphone
                        </div>
                        <div style="color: var(--dark);">${deliveryInfo.phone}</div>
                    </div>
                    ` : ''}
                </div>
            </div>
        </div>

        <!-- Articles commandés -->
        <div style="margin-bottom: 25px;">
            <h4 style="color: var(--primary-dark); margin-bottom: 15px; padding-bottom: 10px; border-bottom: 2px solid var(--primary-light);">
                <i class="fas fa-box"></i> Articles commandés (${safeItems.length})
            </h4>
            <div style="background: white; border-radius: 10px; overflow: hidden; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                ${safeItems.length > 0 ? safeItems.map(item => `
                    <div style="display: flex; align-items: center; padding: 15px; border-bottom: 1px solid #f1f5f9; transition: background 0.2s;" 
                         onmouseover="this.style.background='#f8fafc'" onmouseout="this.style.background='white'">
                        <div style="width: 60px; height: 60px; border-radius: 8px; overflow: hidden; margin-right: 15px; flex-shrink: 0;">
                            <img src="${item.image || '/images/placeholder.jpg'}" 
                                 style="width: 100%; height: 100%; object-fit: cover;" 
                                 alt="${item.name}"
                                 onerror="this.src='/images/placeholder.jpg'">
                        </div>
                        <div style="flex: 1;">
                            <div style="font-weight: 600; color: var(--dark); margin-bottom: 4px;">${item.name || 'Article'}</div>
                            <div style="color: #64748b; font-size: 14px; margin-bottom: 4px;">
                                Quantité: <strong>${item.quantity || 1}</strong>
                                ${item.size && item.size !== 'Non spécifiée' ? ` • Taille: <strong>${item.size}</strong>` : ''}
                                ${item.matiere ? ` • Matière: <strong>${item.matiere}</strong>` : ''}
                            </div>
                            <div style="color: var(--primary); font-weight: 600;">${(item.price || 0).toFixed(2)} €</div>
                        </div>
                        <div style="text-align: right; color: var(--primary-dark); font-weight: 700; font-size: 16px;">
                            ${(item.total || (item.price * item.quantity) || 0).toFixed(2)} €
                        </div>
                    </div>
                `).join('') : `
                    <div style="padding: 30px; text-align: center; color: #64748b;">
                        <i class="fas fa-box-open" style="font-size: 48px; margin-bottom: 15px; opacity: 0.5;"></i>
                        <div>Aucun article trouvé pour cette commande</div>
                    </div>
                `}
            </div>
        </div>

        <!-- Résumé financier -->
        <div style="margin-bottom: 25px;">
            <h4 style="color: var(--primary-dark); margin-bottom: 15px; padding-bottom: 10px; border-bottom: 2px solid var(--primary-light);">
                <i class="fas fa-calculator"></i> Résumé financier
            </h4>
            <div style="background: #f8fafc; padding: 20px; border-radius: 10px; border: 1px solid #e2e8f0;">
                <div style="display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid #e5e7eb;">
                    <span style="color: #64748b;">Sous-total articles:</span>
                    <strong>${(safeSummary.originalSubtotal || 0).toFixed(2)} €</strong>
                </div>
                ${(safeSummary.discount || 0) > 0 ? `
                <div style="display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid #e5e7eb; color: #059669;">
                    <span><i class="fas fa-tag"></i> Réduction:</span>
                    <strong>-${(safeSummary.discount || 0).toFixed(2)} €</strong>
                </div>
                ` : ''}
                <div style="display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid #e5e7eb;">
                    <span style="color: #64748b;">Frais de livraison:</span>
                    <strong>${(safeSummary.shipping || 0).toFixed(2)} €</strong>
                </div>
                <div style="display: flex; justify-content: space-between; padding: 12px 0; border-top: 2px solid var(--primary); margin-top: 10px;">
                    <span style="color: var(--primary-dark); font-weight: 700; font-size: 18px;">TOTAL:</span>
                    <strong style="color: var(--primary-dark); font-size: 20px;">${(safeSummary.total || 0).toFixed(2)} €</strong>
                </div>
            </div>
        </div>

        <!-- Historique des modifications (si disponible) -->
        ${safeModifications.length > 0 ? `
        <div style="margin-bottom: 25px;">
            <h4 style="color: var(--primary-dark); margin-bottom: 15px; padding-bottom: 10px; border-bottom: 2px solid var(--primary-light);">
                <i class="fas fa-history"></i> Historique des modifications
            </h4>
            <div style="background: #fffbeb; border: 1px solid #fbbf24; border-radius: 10px; padding: 15px;">
                ${safeModifications.map(mod => `
                    <div style="padding: 10px 0; border-bottom: 1px solid #fde68a;">
                        <div style="font-weight: 600; color: #92400e;">
                            ${mod.type || mod.modification_type || 'Modification'} 
                            <span style="font-weight: normal; color: #78350f;">
                                par ${mod.modified_by || mod.updated_by || 'Système'}
                            </span>
                        </div>
                        <div style="color: #78350f; font-size: 14px; margin-top: 5px;">
                            ${mod.description || mod.notes || 'Aucune description'}
                        </div>
                        <div style="color: #a16207; font-size: 12px; margin-top: 5px;">
                            ${mod.date || new Date(mod.created_at).toLocaleString('fr-FR') || ''}
                        </div>
                    </div>
                `).join('')}
            </div>
        </div>
        ` : ''}

        <!-- Boutons d'actions -->
        <div style="display: flex; gap: 15px; justify-content: flex-end; margin-top: 30px;">
            <button onclick="closeModal()" 
                    style="background: #6b7280; color: white; border: none; padding: 12px 24px; border-radius: 8px; cursor: pointer; font-weight: 500;">
                <i class="fas fa-times"></i> Fermer
            </button>
            <button onclick="editOrderDirect('${finalOrderId}')" 
                    style="background: var(--primary); color: white; border: none; padding: 12px 24px; border-radius: 8px; cursor: pointer; font-weight: 500;">
                <i class="fas fa-edit"></i> Modifier
            </button>
        </div>
    `;

    document.getElementById('modalBody').innerHTML = modalContent;
    console.log(`✅ Modal affichée pour commande ${finalOrderId} avec adresse: "${deliveryInfo.address}"`);
}


// ✅ FONCTION EDIT ORDER DIRECTE AVEC LOG COMPLET
function editOrderDirect(orderId) {
    console.log(`🎯 editOrderDirect appelé avec orderId: "${orderId}"`);
    editOrder(orderId);
}

// ✅ FONCTION EDIT ORDER ULTRA-SIMPLIFIÉE POUR DEBUG
// ✅ FONCTION EDIT ORDER COMPLÈTE ET CORRIGÉE
// ✅ FONCTION EDIT ORDER COMPLÈTE - Avec tracking pré-rempli et form complet
async function editOrder(orderId) {
    try {
        console.log(`🚀 EditOrder démarré avec orderId: "${orderId}"`);
        
        if (!orderId || orderId === 'undefined' || orderId === 'null') {
            console.error('❌ orderId invalide');
            showToast('Erreur: ID de commande invalide', 'error');
            return;
        }

        const cleanOrderId = String(orderId).trim();
        console.log(`✅ orderId nettoyé: "${cleanOrderId}"`);
        
        // ✅ RÉCUPÉRER LES DONNÉES ACTUELLES
        showLoading();
        const response = await fetch(`/admin/commandes/${cleanOrderId}/details`);
        const data = await response.json();
        
        if (!response.ok || !data.success) {
            throw new Error(data.message || 'Erreur lors de la récupération des données');
        }
        
        const currentOrder = data.order;
        
        // ✅ NORMALISATION DU STATUT ACTUEL (PROBLÈME 5)
        let currentStatus = 'waiting'; // Valeur par défaut
        
        if (currentOrder.status) {
            const statusNormalization = {
                'en_attente': 'waiting',
                'en attente': 'waiting',
                'waiting': 'waiting',
                'preparation': 'preparing',
                'en_preparation': 'preparing',
                'en préparation': 'preparing',
                'preparing': 'preparing',
                'expediee': 'shipped',
                'expédiée': 'shipped',
                'shipped': 'shipped',
                'livree': 'delivered',
                'livrée': 'delivered',
                'delivered': 'delivered',
                'annulee': 'cancelled',
                'annulée': 'cancelled',
                'cancelled': 'cancelled'
            };
            
            const normalizedStatus = currentOrder.status.toString().toLowerCase().trim();
            currentStatus = statusNormalization[normalizedStatus] || 'waiting';
        }
        
        const currentTracking = currentOrder.tracking_number || '';
        const currentNotes = currentOrder.internal_notes || currentOrder.notes || '';
        
        console.log(`📊 Données récupérées:`, { 
            originalStatus: currentOrder.status,
            normalizedStatus: currentStatus,
            tracking: currentTracking,
            email: currentOrder.customer_email
        });
        
        hideLoading();

        // ✅ OPTIONS DE STATUT AVEC ICÔNES
        const statusOptions = [
            { value: 'waiting', label: '⏳ En attente', color: '#f59e0b' },
            { value: 'preparing', label: '🔧 En préparation', color: '#3b82f6' },
            { value: 'shipped', label: '📦 Expédiée', color: '#10b981' },
            { value: 'delivered', label: '✅ Livrée', color: '#059669' },
            { value: 'cancelled', label: '❌ Annulée', color: '#ef4444' }
        ];

        const optionsHtml = statusOptions.map(option => {
            const selected = option.value === currentStatus ? 'selected' : '';
            return `<option value="${option.value}" ${selected} data-color="${option.color}">${option.label}</option>`;
        }).join('');

        // ✅ FORMULAIRE COMPLET AVEC TOUTES LES CORRECTIONS
        const formHtml = `
            <div style="padding: 25px; max-height: 80vh; overflow-y: auto;">
                <h3 style="margin-bottom: 25px; color: var(--primary-dark); display: flex; align-items: center; gap: 10px;">
                    <i class="fas fa-edit" style="color: var(--warning);"></i> 
                    Modifier la commande 
                    <span style="font-family: monospace; background: #f3f4f6; padding: 4px 8px; border-radius: 4px; font-size: 14px;">#${cleanOrderId}</span>
                </h3>
                
                <!-- Info client sécurisée (PROBLÈME 4) -->
                <div style="background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%); border: 1px solid #0ea5e9; border-radius: 8px; padding: 15px; margin-bottom: 20px;">
                    <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 8px;">
                        <i class="fas fa-user" style="color: #0ea5e9; font-size: 16px;"></i>
                        <strong style="color: #0c4a6e;">Client: ${currentOrder.customer_name || 'N/A'}</strong>
                    </div>
                    <div style="color: #0c4a6e; font-size: 14px;">
                        📧 Email: ${typeof currentOrder.customer_email === 'string' && 
                                   !currentOrder.customer_email.includes('object') ? 
                                   currentOrder.customer_email : 'Email non disponible'}<br>
                        💰 Total: ${parseFloat(currentOrder.total || 0).toFixed(2)}€
                    </div>
                </div>
                
                <!-- Info notifications -->
                <div style="background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%); border: 1px solid #3b82f6; border-radius: 8px; padding: 15px; margin-bottom: 20px;">
                    <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 8px;">
                        <i class="fas fa-info-circle" style="color: #3b82f6; font-size: 18px;"></i>
                        <strong style="color: #1e40af;">Notifications automatiques activées</strong>
                    </div>
                    <div style="color: #1e3a8a; font-size: 14px; line-height: 1.5;">
                        • Le client recevra un email automatique selon le nouveau statut<br>
                        • L'historique des modifications sera enregistré avec date et heure<br>
                        • Le numéro de suivi sera inclus dans les notifications
                    </div>
                </div>
                
                <form id="editOrderForm">
                    <!-- ✅ STOCKAGE SÉCURISÉ DE L'orderId -->
                    <input type="hidden" id="finalOrderId" value="${cleanOrderId}">
                    
                    <!-- ✅ STATUT AVEC SÉLECTION CORRIGÉE (PROBLÈME 5) -->
                    <div style="margin-bottom: 20px;">
                        <label style="display: block; font-weight: 600; margin-bottom: 8px; color: var(--dark);">
                            <i class="fas fa-tasks" style="color: var(--info); margin-right: 6px;"></i> 
                            Statut de la commande :
                        </label>
                        <select id="orderStatus" required style="width: 100%; padding: 12px; border: 2px solid #e2e8f0; border-radius: 8px; font-size: 14px; background: white; cursor: pointer;">
                            ${optionsHtml}
                        </select>
                        <small style="color: #6b7280; display: block; margin-top: 5px; font-style: italic;">
                            <i class="fas fa-envelope" style="margin-right: 4px;"></i>
                            Statut actuel détecté: <strong>${currentStatus}</strong> (depuis "${currentOrder.status}")
                        </small>
                    </div>
                    
                    <!-- Numéro de suivi -->
                    <div style="margin-bottom: 20px;">
                        <label style="display: block; font-weight: 600; margin-bottom: 8px; color: var(--dark);">
                            <i class="fas fa-truck" style="color: var(--success); margin-right: 6px;"></i> 
                            Numéro de suivi :
                        </label>
                        <input type="text" 
                               id="trackingNumber" 
                               value="${currentTracking}"
                               placeholder="Ex: FR123456789, LP123456789FR"
                               style="width: 100%; padding: 12px; border: 2px solid #e2e8f0; border-radius: 8px; font-family: 'Courier New', monospace; font-size: 14px; background: #f8fafc;">
                        <small style="color: #6b7280; display: block; margin-top: 5px;">
                            <i class="fas fa-save" style="margin-right: 4px;"></i>
                            Sera sauvegardé dans la commande et inclus dans l'email client
                        </small>
                    </div>
                    
                    <!-- Notes internes -->
                    <div style="margin-bottom: 25px;">
                        <label style="display: block; font-weight: 600; margin-bottom: 8px; color: var(--dark);">
                            <i class="fas fa-sticky-note" style="color: var(--warning); margin-right: 6px;"></i> 
                            Notes internes :
                        </label>
                        <textarea id="orderNotes" 
                                  rows="4" 
                                  placeholder="Notes pour l'équipe (préparation, particularités, remarques...)"
                                  style="width: 100%; padding: 12px; border: 2px solid #e2e8f0; border-radius: 8px; resize: vertical; font-size: 14px; line-height: 1.5; background: #f8fafc;">${currentNotes}</textarea>
                        <small style="color: #6b7280; display: block; margin-top: 5px;">
                            <i class="fas fa-eye-slash" style="margin-right: 4px;"></i>
                            Ces notes ne sont visibles que par l'équipe administrative
                        </small>
                    </div>
                    
                    <!-- Aperçu des modifications -->
                    <div id="modificationPreview" style="background: #f9fafb; border: 1px solid #e5e7eb; border-radius: 8px; padding: 15px; margin-bottom: 20px; display: none;">
                        <h4 style="margin: 0 0 10px 0; color: var(--dark); font-size: 14px;">
                            <i class="fas fa-eye" style="color: var(--info); margin-right: 6px;"></i>
                            Aperçu des modifications :
                        </h4>
                        <div id="previewContent" style="font-size: 13px; color: #4b5563;"></div>
                    </div>
                    
                    <!-- Boutons d'action -->
                    <div style="display: flex; gap: 12px; justify-content: center; flex-wrap: wrap; padding-top: 20px; border-top: 1px solid #e5e7eb;">
                        <button type="button" 
                                onclick="closeModal()" 
                                style="padding: 12px 24px; background: #6b7280; color: white; border: none; border-radius: 8px; cursor: pointer; font-size: 14px; font-weight: 500; transition: all 0.2s ease;">
                            <i class="fas fa-times" style="margin-right: 6px;"></i>
                            Annuler
                        </button>
                        <button type="submit" 
                                id="saveOrderBtn" 
                                style="padding: 12px 24px; background: linear-gradient(135deg, #d89ab3 0%, #c084a1 100%); color: white; border: none; border-radius: 8px; cursor: pointer; font-size: 14px; font-weight: 500; transition: all 0.2s ease; box-shadow: 0 2px 4px rgba(216, 154, 179, 0.3);">
                            <i class="fas fa-save" style="margin-right: 6px;"></i>
                            Enregistrer et notifier
                        </button>
                    </div>
                </form>
            </div>
        `;

        // ✅ AFFICHAGE DE LA MODAL
        document.getElementById('modalTitle').innerHTML = `<i class="fas fa-edit"></i> Modifier la commande ${currentOrder.numero_commande || '#' + cleanOrderId}`;
        document.getElementById('modalBody').innerHTML = formHtml;
        showModal();

        // ✅ VÉRIFICATION ET CORRECTION DE LA SÉLECTION DU STATUT
        setTimeout(() => {
            const statusSelect = document.getElementById('orderStatus');
            if (statusSelect) {
                console.log(`🔧 Vérification sélection statut...`);
                console.log(`   - Valeur attendue: "${currentStatus}"`);
                console.log(`   - Valeur actuelle: "${statusSelect.value}"`);
                
                // ✅ FORCER LA SÉLECTION CORRECTE
                if (statusSelect.value !== currentStatus) {
                    statusSelect.value = currentStatus;
                    console.log(`✅ Statut forcé à: "${currentStatus}"`);
                }
                
                // ✅ SI TOUJOURS PAS BON, ESSAYER OPTION PAR OPTION
                if (statusSelect.value !== currentStatus) {
                    const options = statusSelect.querySelectorAll('option');
                    let found = false;
                    
                    options.forEach(option => {
                        if (option.value === currentStatus) {
                            option.selected = true;
                            found = true;
                            console.log(`✅ Option trouvée et sélectionnée: "${currentStatus}"`);
                        } else {
                            option.selected = false;
                        }
                    });
                    
                    if (!found) {
                        console.warn(`⚠️ Aucune option trouvée pour: "${currentStatus}"`);
                        statusSelect.value = 'waiting'; // Fallback
                    }
                }
            }
        }, 100);

        // ✅ EVENT LISTENERS POUR L'APERÇU
        const trackingInput = document.getElementById('trackingNumber');
        const notesTextarea = document.getElementById('orderNotes');
        const previewDiv = document.getElementById('modificationPreview');
        const previewContent = document.getElementById('previewContent');

        function updatePreview() {
            const changes = [];
            const statusSelect = document.getElementById('orderStatus');
            
            if (statusSelect && statusSelect.value !== currentStatus) {
                const newOption = statusSelect.options[statusSelect.selectedIndex];
                changes.push(`<span style="color: #059669;"><i class="fas fa-arrow-right"></i> Statut: ${currentStatus} → ${newOption.text}</span>`);
            }
            
            if (trackingInput && trackingInput.value.trim() !== currentTracking) {
                const newTracking = trackingInput.value.trim();
                if (newTracking) {
                    changes.push(`<span style="color: #3b82f6;"><i class="fas fa-truck"></i> Tracking: ${newTracking}</span>`);
                } else {
                    changes.push(`<span style="color: #ef4444;"><i class="fas fa-trash"></i> Tracking supprimé</span>`);
                }
            }
            
            if (notesTextarea && notesTextarea.value.trim() !== currentNotes) {
                changes.push(`<span style="color: #f59e0b;"><i class="fas fa-sticky-note"></i> Notes mises à jour</span>`);
            }
            
            if (changes.length > 0) {
                previewContent.innerHTML = changes.join('<br>');
                previewDiv.style.display = 'block';
            } else {
                previewDiv.style.display = 'none';
            }
        }

        // ✅ ÉCOUTER LES CHANGEMENTS
        const statusSelect = document.getElementById('orderStatus');
        if (statusSelect) statusSelect.addEventListener('change', updatePreview);
        if (trackingInput) trackingInput.addEventListener('input', updatePreview);
        if (notesTextarea) notesTextarea.addEventListener('input', updatePreview);

        // ✅ GESTIONNAIRE DE SOUMISSION DU FORMULAIRE
        document.getElementById('editOrderForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formOrderId = document.getElementById('finalOrderId').value;
            const newStatus = document.getElementById('orderStatus').value;
            const trackingNumber = document.getElementById('trackingNumber').value.trim();
            const notes = document.getElementById('orderNotes').value.trim();
            
            console.log('🔥 SOUMISSION FORMULAIRE:', {
                formOrderId, newStatus, trackingNumber, notes
            });
            
            if (!formOrderId) {
                console.error('❌ formOrderId est vide !');
                showToast('Erreur: ID de commande vide !', 'error');
                return;
            }
            
            if (!newStatus) {
                showToast('Veuillez sélectionner un statut', 'warning');
                return;
            }

            const saveBtn = document.getElementById('saveOrderBtn');
            const originalText = saveBtn.innerHTML;
            
            try {
                saveBtn.disabled = true;
                saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Enregistrement...';
                
                const payload = {
                    status: newStatus,
                    tracking_number: trackingNumber || null,
                    notes: notes || null
                };
                
                console.log('🚀 PAYLOAD:', JSON.stringify(payload, null, 2));
                
                showLoading();

                const response = await fetch(`/admin/commandes/${formOrderId}`, {
                    method: 'PUT',
                    headers: { 
                        'Accept': 'application/json', 
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(payload)
                });

                console.log('📡 Réponse reçue, status:', response.status);

                const data = await response.json();
                console.log('📊 Data reçue:', data);

                if (!response.ok) {
                    throw new Error(data.message || `Erreur HTTP ${response.status}`);
                }

                if (data.success) {
                    showToast('✅ Commande mise à jour avec succès !', 'success');
                    
                    // ✅ AFFICHER INFO EMAIL
                    if (data.data?.emailSent) {
                        setTimeout(() => {
                            showToast('📧 Email de notification envoyé au client !', 'info');
                        }, 1000);
                    } else if (data.data?.statusChanged && !data.data?.emailSent) {
                        setTimeout(() => {
                            showToast('⚠️ Statut mis à jour mais email non envoyé', 'warning');
                        }, 1500);
                    }
                    
                    // ✅ SYNCHRONISER LA MODALE
                    syncModalStatus(formOrderId, newStatus, trackingNumber);
                    
                    closeModal();
                    
                    // ✅ ACTUALISATION COMPLÈTE APRÈS DÉLAI
                    setTimeout(() => {
                        showToast('🔄 Actualisation des données...', 'info');
                        window.location.reload();
                    }, 2500);
                } else {
                    throw new Error(data.message || 'Erreur lors de la modification');
                }
                
            } catch (error) {
                console.error('❌ Erreur modification:', error);
                showToast(`Erreur: ${error.message}`, 'error');
            } finally {
                saveBtn.disabled = false;
                saveBtn.innerHTML = originalText;
                hideLoading();
            }
        });

    } catch (error) {
        console.error('❌ Erreur dans editOrder:', error);
        showToast('Erreur lors de l\'ouverture du formulaire', 'error');
        hideLoading();
    }
}

function highlightFilterButton() {
    const submitBtn = document.querySelector('#filtersForm button[type="submit"]');
    if (submitBtn) {
        submitBtn.style.background = 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)';
        submitBtn.style.transform = 'scale(1.02)';
        submitBtn.innerHTML = '<i class="fas fa-filter"></i> Appliquer les changements';
        
        setTimeout(() => {
            submitBtn.style.background = '';
            submitBtn.style.transform = '';
            submitBtn.innerHTML = '<i class="fas fa-search"></i> Filtrer';
        }, 3000);
    }
}

// ✅ AJOUTER CETTE FONCTION
function safeFormatDate(dateString) {
    if (!dateString) return 'Date inconnue';
    
    try {
        const date = new Date(dateString);
        if (isNaN(date.getTime())) return 'Date invalide';
        
        return date.toLocaleString('fr-FR', {
            day: '2-digit',
            month: '2-digit', 
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    } catch (error) {
        return 'Erreur de date';
    }
}

// ✅ MISE À JOUR AFFICHAGE AVEC NOUVEAU TRACKING NUMBER ET STATUT
function updateOrderDisplayAfterEdit(orderId, newStatus, newTrackingNumber) {
    try {
        console.log(`✅ Mise à jour affichage pour commande ${orderId}`, {
            newStatus,
            newTrackingNumber
        });
        
        // Mettre à jour tableau desktop
        const tableRow = document.querySelector(`tr[data-order-id="${orderId}"]`);
        if (tableRow) {
            // ✅ METTRE À JOUR LE STATUT
            const statusCell = tableRow.querySelector('.status');
            if (statusCell) {
                statusCell.className = `status ${getStatusClass(newStatus)}`;
                statusCell.innerHTML = `<i class="fas fa-circle" style="font-size: 0.5rem;"></i> ${translateStatus(newStatus)}`;
            }
            
            // ✅ METTRE À JOUR data-status
            tableRow.dataset.status = newStatus;
            
            // ✅ METTRE À JOUR LE TRACKING NUMBER
            if (newTrackingNumber && newTrackingNumber.trim()) {
                const orderNumberCell = tableRow.querySelector('.order-number').parentElement;
                
                // Supprimer l'ancien tracking
                const oldTracking = orderNumberCell.querySelector('small');
                if (oldTracking) {
                    oldTracking.remove();
                }
                
                // Ajouter le nouveau tracking
                const newTrackingElement = document.createElement('small');
                newTrackingElement.style.color = 'var(--gray-medium)';
                newTrackingElement.innerHTML = `📦 ${newTrackingNumber}`;
                orderNumberCell.appendChild(newTrackingElement);
            }
        }
        
        // Mettre à jour carte mobile
        const mobileCard = document.querySelector(`.order-card[data-order-id="${orderId}"]`);
        if (mobileCard) {
            const statusElement = mobileCard.querySelector('.status');
            if (statusElement) {
                statusElement.className = `status ${getStatusClass(newStatus)}`;
                statusElement.textContent = translateStatus(newStatus);
            }
            mobileCard.dataset.status = newStatus;
        }
        
        console.log(`✅ Affichage mis à jour - Statut: ${newStatus}, Tracking: ${newTrackingNumber}`);
    } catch (error) {
        console.error('❌ Erreur mise à jour affichage:', error);
    }
}
// Fonctions utilitaires et UI
function handleSearch(e) { config.filters.search = e.target.value.toLowerCase(); applyFilters(); }

function applyFilters() {
    console.log('🔍 Application des filtres - VERSION CORRIGÉE');
    // NE PAS UTILISER event.preventDefault() ici
    // Cette fonction ne doit plus être appelée par les événements
}

// Fonction pour synchroniser le statut dans la modale après mise à jour
function syncModalStatus(orderId, newStatus, newTrackingNumber = '') {
    try {
        // Mettre à jour le statut affiché dans la modale
        const statusDisplay = document.querySelector('#orderModal .status-badge');
        const statusSelect = document.getElementById('orderStatus');
        const trackingInput = document.getElementById('trackingNumber');
        
        if (statusDisplay) {
            // Nettoyer les anciennes classes de statut
            statusDisplay.className = statusDisplay.className.replace(/status-\w+/g, '');
            
            // Ajouter la nouvelle classe et le texte
            statusDisplay.classList.add(`status-${newStatus}`);
            statusDisplay.textContent = translateStatus(newStatus);
        }
        
        if (statusSelect) {
            statusSelect.value = newStatus;
        }
        
        if (trackingInput && newTrackingNumber) {
            trackingInput.value = newTrackingNumber;
        }
        
        // Mettre à jour aussi dans le tableau
        const tableRow = document.querySelector(`tr[data-order-id="${orderId}"]`);
        if (tableRow) {
            const tableStatus = tableRow.querySelector('.status');
            if (tableStatus) {
                tableStatus.className = tableStatus.className.replace(/status-\w+/g, '');
                tableStatus.classList.add(`status-${newStatus}`);
                tableStatus.textContent = translateStatus(newStatus);
            }
            
            if (newTrackingNumber) {
                const trackingCell = tableRow.querySelector('.tracking-number');
                if (trackingCell) {
                    trackingCell.textContent = newTrackingNumber;
                }
            }
        }
        
        console.log('✅ Statut synchronisé:', { orderId, newStatus, newTrackingNumber });
        
    } catch (error) {
        console.error('❌ Erreur synchronisation statut:', error);
    }
}

// Fonction helper pour traduire les statuts
function translateStatus(status) {
    const statusMap = {
        'waiting': 'En attente',
        'preparing': 'En préparation',
        'shipped': 'Expédiée', 
        'delivered': 'Livrée',
        'cancelled': 'Annulée'
    };
    return statusMap[status] || status;
}

function resetFilters() {
    console.log('🔄 Réinitialisation des filtres...');
    
    // Vider tous les champs
    const fields = ['searchInput', 'statusFilter', 'promoFilter', 'dateFilter', 'paymentFilter'];
    fields.forEach(fieldId => {
        const element = document.getElementById(fieldId);
        if (element) {
            element.value = '';
        }
    });
    
    showLoading();
    // Rediriger vers la page sans paramètres
    window.location.href = window.location.pathname;
}

function exportData() {
    window.open('/admin/commandes/export', '_blank');
}

function refreshData() { 
    showLoading(); 
    setTimeout(() => window.location.reload(), 1000); 
}

function toggleSidebar() {
    const sidebar = document.querySelector('.sidebar');
    const overlay = document.querySelector('.sidebar-overlay');
    sidebar?.classList.toggle('open');
    overlay?.classList.toggle('show');
}

function closeSidebar() {
    const sidebar = document.querySelector('.sidebar');
    const overlay = document.querySelector('.sidebar-overlay');
    sidebar?.classList.remove('open');
    overlay?.classList.remove('show');
}

function showModal() {
    const modal = document.getElementById('orderModal');
    if (modal) {
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }
}

function closeModal() {
    const modal = document.getElementById('orderModal');
    if (modal) {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
    }
}

function showToast(message, type = 'success') {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toastMessage');
    
    if (!toast || !toastMessage) return;
    
    toastMessage.textContent = message;
    toast.className = `toast ${type}`;
    toast.style.display = 'flex';
    
    setTimeout(() => {
        toast.style.display = 'none';
    }, 3000);
}

function showLoading() {
    const overlay = document.getElementById('loadingOverlay');
    if (overlay) overlay.style.display = 'flex';
}

function hideLoading() {
    const overlay = document.getElementById('loadingOverlay');
    if (overlay) overlay.style.display = 'none';
}

// Fonction utilitaire debounce
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

function formatSafeDate(dateInput) {
    if (!dateInput) return 'Date non disponible';
    
    try {
        const date = new Date(dateInput);
        if (isNaN(date.getTime())) return 'Date invalide';
        
        return date.toLocaleString('fr-FR', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    } catch (error) {
        return 'Erreur de date';
    }
}

// ✅ EXPORT GLOBAL DES FONCTIONS
window.viewOrderDetails = viewOrderDetails;
window.editOrder = editOrder;
window.editOrderDirect = editOrderDirect;
window.showModal = showModal;
window.closeModal = closeModal;
window.showLoading = showLoading;
window.hideLoading = hideLoading;
window.showToast = showToast;
window.exportData = exportData;
window.refreshData = refreshData;
window.resetFilters = resetFilters;
window.toggleSidebar = toggleSidebar;
window.closeSidebar = closeSidebar;

console.log('✅ Script Admin Commandes chargé - Solution directe orderId');
</script>

<script>
    // ✅ JAVASCRIPT CORRIGÉ POUR LES FILTRES - Remplacer dans votre template

// ✅ 1. GESTION DES FILTRES SANS AUTO-SUBMIT
document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 Initialisation des filtres');
    
    const form = document.getElementById('filtersForm');
    if (!form) {
        console.error('❌ Formulaire de filtres non trouvé');
        return;
    }
    
    // ✅ SOUMISSION DU FORMULAIRE
    form.addEventListener('submit', function(e) {
        console.log('📝 Soumission des filtres');
        showLoading();
        // Laisser le formulaire se soumettre normalement
    });
    
    // ✅ HIGHLIGHT BOUTON QUAND CHANGEMENT
    const inputs = form.querySelectorAll('input, select');
    inputs.forEach(input => {
        input.addEventListener('change', function() {
            highlightSubmitButton();
        });
    });
    
    // ✅ RESET FILTRES
    window.resetFilters = function() {
        showLoading();
        window.location.href = window.location.pathname;
    };
    
    // ✅ EXPORT DATA
    window.exportData = function() {
        const formData = new FormData(form);
        const params = new URLSearchParams();
        
        for (const [key, value] of formData) {
            if (value && value.trim() !== '') {
                params.set(key, value.trim());
            }
        }
        
        const exportUrl = '/admin/commandes/export?' + params.toString();
        window.open(exportUrl, '_blank');
    };
    
    // ✅ REFRESH DATA
    window.refreshData = function() {
        showLoading();
        window.location.reload();
    };
});

function highlightSubmitButton() {
    const submitBtn = document.querySelector('#filtersForm button[type="submit"]');
    if (submitBtn) {
        submitBtn.style.background = 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)';
        submitBtn.style.transform = 'scale(1.02)';
        submitBtn.innerHTML = '<i class="fas fa-filter"></i> Appliquer les changements';
        
        setTimeout(() => {
            submitBtn.style.background = '';
            submitBtn.style.transform = '';
            submitBtn.innerHTML = '<i class="fas fa-search"></i> Filtrer';
        }, 3000);
    }
}

function showLoading() {
    const overlay = document.getElementById('loadingOverlay');
    if (overlay) overlay.style.display = 'flex';
}


    // ✅ RECHERCHE AVEC DÉLAI (sans auto-submit systématique)
    const searchInput = form.querySelector('input[name="search"]');
    if (searchInput) {
        let searchTimeout;
        
        searchInput.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            const value = this.value.trim();
            
            // Auto-submit seulement si :
            // 1. Recherche complètement effacée
            // 2. Recherche longue (4+ caractères) après délai
            if (value.length === 0) {
                searchTimeout = setTimeout(() => {
                    console.log('🔍 Auto-submit: recherche effacée');
                    form.submit();
                }, 1000);
            } else if (value.length >= 4) {
                searchTimeout = setTimeout(() => {
                    console.log('🔍 Auto-submit: recherche longue');
                    form.submit();
                }, 2000);
            }
        });
        
        // Submit manuel avec Entrée
        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                console.log('🔍 Submit manuel avec Entrée');
                form.submit();
            }
        });
    }
  
    // ✅ PAS D'AUTO-SUBMIT POUR LES SELECTS
    const selects = form.querySelectorAll('select');
    selects.forEach(select => {
        select.addEventListener('change', function() {
            console.log(`📊 Filtre "${this.name}" changé: ${this.value}`);
            // Pas d'auto-submit, attendre le clic sur "Filtrer"
            highlightFilterButton();
        });
    });

    // ✅ SUBMIT MANUEL AVEC BOUTON

// ✅ 2. FONCTION POUR METTRE EN ÉVIDENCE LE BOUTON FILTRER
function highlightFilterButton() {
    const submitBtn = document.querySelector('#filtersForm button[type="submit"]');
    if (submitBtn) {
        submitBtn.style.background = 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)';
        submitBtn.style.transform = 'scale(1.02)';
        submitBtn.innerHTML = '<i class="fas fa-filter"></i> Appliquer les changements';
        
        setTimeout(() => {
            submitBtn.style.background = '';
            submitBtn.style.transform = '';
            submitBtn.innerHTML = '<i class="fas fa-search"></i> Filtrer';
        }, 3000);
    }
}

// ✅ 3. FONCTIONS UTILITAIRES
function showLoading() {
    const overlay = document.getElementById('loadingOverlay');
    if (overlay) {
        overlay.style.display = 'flex';
    }
}

function hideLoading() {
    const overlay = document.getElementById('loadingOverlay');
    if (overlay) {
        overlay.style.display = 'none';
    }
}

function showToast(message, type = 'success') {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toastMessage');
    
    if (!toast || !toastMessage) return;
    
    toastMessage.textContent = message;
    toast.className = `toast ${type}`;
    toast.style.display = 'flex';
    
    setTimeout(() => {
        toast.style.display = 'none';
    }, 3000);
}

// ✅ 4. FONCTION EXPORT DATA
function exportData() {
    // Construire URL d'export avec les filtres actuels
    const form = document.getElementById('filtersForm');
    if (form) {
        const formData = new FormData(form);
        const params = new URLSearchParams();
        
        for (const [key, value] of formData) {
            if (value && value.trim() !== '') {
                params.set(key, value.trim());
            }
        }
        
        const exportUrl = '/admin/commandes/export?' + params.toString();
        console.log('📊 Export avec filtres:', exportUrl);
        window.open(exportUrl, '_blank');
    } else {
        window.open('/admin/commandes/export', '_blank');
    }
}

// ✅ 5. FONCTION REFRESH DATA
function refreshData() {
    showLoading();
    showToast('🔄 Actualisation en cours...', 'info');
    setTimeout(() => {
        window.location.reload();
    }, 1000);
}

// ✅ 6. GESTION DES URLS AVEC FILTRES
function updateUrlWithFilters() {
    const form = document.getElementById('filtersForm');
    if (!form) return;
    
    const formData = new FormData(form);
    const params = new URLSearchParams();
    
    for (const [key, value] of formData) {
        if (value && value.trim() !== '' && value !== 'all') {
            params.set(key, value.trim());
        }
    }
    
    const newUrl = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
    return newUrl;
}

// ✅ 7. INDICATEUR DE FILTRES ACTIFS
function updateActiveFiltersIndicator() {
    const form = document.getElementById('filtersForm');
    if (!form) return;
    
    const formData = new FormData(form);
    let activeCount = 0;
    
    for (const [key, value] of formData) {
        if (value && value.trim() !== '' && value !== 'all') {
            activeCount++;
        }
    }
    
    // Mettre à jour l'indicateur visuel
    const indicator = document.querySelector('.active-filters-count');
    if (indicator) {
        if (activeCount > 0) {
            indicator.textContent = activeCount;
            indicator.style.display = 'inline-block';
        } else {
            indicator.style.display = 'none';
        }
    }
}

// ✅ 8. GESTION DE L'HISTORIQUE DU NAVIGATEUR
window.addEventListener('popstate', function(e) {
    console.log('🔙 Navigation historique détectée');
    window.location.reload();
});

// ✅ 9. SAUVEGARDE DES FILTRES DANS LE LOCAL STORAGE (optionnel)
function saveFiltersToStorage() {
    const form = document.getElementById('filtersForm');
    if (!form) return;
    
    const formData = new FormData(form);
    const filters = {};
    
    for (const [key, value] of formData) {
        if (value && value.trim() !== '') {
            filters[key] = value.trim();
        }
    }
    
    try {
        localStorage.setItem('commandes_filters', JSON.stringify(filters));
        console.log('💾 Filtres sauvegardés:', filters);
    } catch (error) {
        console.warn('⚠️ Impossible de sauvegarder les filtres:', error);
    }
}

function loadFiltersFromStorage() {
    try {
        const saved = localStorage.getItem('commandes_filters');
        if (saved) {
            const filters = JSON.parse(saved);
            console.log('📂 Filtres chargés:', filters);
            return filters;
        }
    } catch (error) {
        console.warn('⚠️ Impossible de charger les filtres:', error);
    }
    return {};
}

// ✅ 10. INITIALISATION COMPLÈTE
document.addEventListener('DOMContentLoaded', function() {
    // Mettre à jour l'indicateur de filtres actifs
    updateActiveFiltersIndicator();
    
    // Sauvegarder les filtres quand le formulaire change
    const form = document.getElementById('filtersForm');
    if (form) {
        form.addEventListener('change', function() {
            updateActiveFiltersIndicator();
            saveFiltersToStorage();
        });
    }
    
    console.log('✅ Filtres initialisés avec succès');
});

// ✅ EXPORT DES FONCTIONS GLOBALES
window.exportData = exportData;
window.refreshData = refreshData;
window.showLoading = showLoading;
window.hideLoading = hideLoading;
window.showToast = showToast;

console.log('✅ JavaScript des filtres chargé sans auto-submit');
    </script>
</body>
</html>
