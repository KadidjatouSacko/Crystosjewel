<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Suivi Clients - Bijouterie</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chart.js/3.9.1/chart.min.js"></script>
    <link rel="stylesheet" href="/css/follow-customer.css">
</head>
<body>

    <%- include('partials/navbarre.ejs') %>
       
    <header>
        <h1><i class="fas fa-gem"></i> Bijouterie Admin</h1>
        <div class="search-bar">
            <input type="text" id="search-client" placeholder="Rechercher un client...">
            <button><i class="fas fa-search"></i></button>
        </div>
    </header>

    <div class="container">
        <aside>
            <div class="menu-item active">
                <a href="/admin/suivi-client">
                    <i class="fas fa-user-friends"></i>
                    <span>Clients</span>
                </a>
            </div>
            <div class="menu-item">
                <a href="/admin/bijoux">
                    <i class="fas fa-gem"></i>
                    <span>Bijoux</span>
                </a>
            </div>
            <div class="menu-item">
                <a href="/admin/commandes">
                    <i class="fas fa-shopping-cart"></i>
                    <span>Commandes</span>
                </a>
            </div>
            <div class="menu-item">
                <a href="/admin/emails">
                    <i class="fas fa-envelope"></i>
                    <span>Emails</span>
                </a>
            </div>
            <div class="menu-item">
                <a href="/admin/mon-suivi">
                    <i class="fas fa-chart-line"></i>
                    <span>Statistiques</span>
                </a>
            </div>
            <div class="menu-item">
                <a href="/admin/parametres">
                    <i class="fas fa-cog"></i>
                    <span>Paramètres</span>
                </a>
            </div>
        </aside>

        <main>
            <div class="dashboard-header">
                <h2>Suivi Clients</h2>
                <div class="actions">
                    <button id="exportBtn">
                        <i class="fas fa-file-export"></i> 
                        <span>Exporter</span>
                    </button>
                    <button id="addClientBtn">
                        <i class="fas fa-plus"></i> 
                        <span>Ajouter un client</span>
                    </button>
                </div>
            </div>

            <!-- Statistiques globales -->
            <div class="stats-container">
                <div class="stat-card">
                    <div class="stat-header">
                        <div class="stat-icon">
                            <i class="fas fa-users"></i>
                        </div>
                    </div>
                    <div class="stat-value"><%= statsGlobales.totalClients %></div>
                    <div class="stat-label">Clients totaux</div>
                </div>
                <div class="stat-card">
                    <div class="stat-header">
                        <div class="stat-icon">
                            <i class="fas fa-shopping-bag"></i>
                        </div>
                    </div>
                    <div class="stat-value"><%= statsGlobales.activeClients %></div>
                    <div class="stat-label">Clients actifs</div>
                </div>
                <div class="stat-card">
                    <div class="stat-header">
                        <div class="stat-icon">
                            <i class="fas fa-euro-sign"></i>
                        </div>
                    </div>
                    <div class="stat-value"><%= statsGlobales.panierMoyen %>€</div>
                    <div class="stat-label">Panier moyen</div>
                </div>
                <div class="stat-card">
                    <div class="stat-header">
                        <div class="stat-icon">
                            <i class="fas fa-chart-pie"></i>
                        </div>
                    </div>
                    <div class="stat-value"><%= statsGlobales.conversionRate %>%</div>
                    <div class="stat-label">Taux de conversion</div>
                </div>
            </div>

            <!-- Liste des clients -->
            <div class="client-list">
                <% if (clientsStats && clientsStats.length > 0) { %>
                    <table>
                        <thead>
                            <tr>
                                <th onclick="sortTable('name')">
                                    Prénom <i class="fas fa-sort"></i>
                                </th>
                                <th onclick="sortTable('name')">
                                    Nom <i class="fas fa-sort"></i>
                                </th>
                                <th onclick="sortTable('email')">
                                    Email <i class="fas fa-sort"></i>
                                </th>
                                <th>Téléphone</th>
                                <th onclick="sortTable('orders')">
                                    Commandes <i class="fas fa-sort"></i>
                                </th>
                                <th onclick="sortTable('total')">
                                    Valeur totale <i class="fas fa-sort"></i>
                                </th>
                                <th onclick="sortTable('lastOrder')">
                                    Dernière activité <i class="fas fa-sort"></i>
                                </th>
                                <th>Statut</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% clientsStats.forEach(({ customer, stats }) => { %>
                                <tr data-client-id="<%= customer.id %>">
                                    <td><%= customer.first_name %></td>
                                    <td><%= customer.last_name %></td>
                                    <td><%= customer.email %></td>
                                    <td><%= customer.phone %></td>
                                    <td class="text-center"><%= stats.totalOrders %></td>
                                    <td class="text-right"><%= stats.totalSpent.toFixed(2) %>€</td>
                                    <td>
                                        <% if (stats.lastOrderDate) { %>
                                            <%= new Date(stats.lastOrderDate).toLocaleDateString('fr-FR') %>
                                        <% } else { %>
                                            <span class="text-muted">Jamais</span>
                                        <% } %>
                                    </td>
                                    <td>
                                        <span class="status-badge <%= stats.status.toLowerCase() %>">
                                            <%= stats.status %>
                                        </span>
                                    </td>
                                    <td>
                                        <div class="actions">
                                            <button class="action-btn view" title="Voir détails">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button class="action-btn edit" title="Modifier">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="action-btn delete" title="Supprimer">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                <% } else { %>
                    <div class="empty-state">
                        <div class="empty-state-icon">
                            <i class="fas fa-users"></i>
                        </div>
                        <h3>Aucun client trouvé</h3>
                        <p>Il n'y a actuellement aucun client dans votre base de données.</p>
                        <button id="addFirstClientBtn" class="btn-primary">
                            <i class="fas fa-plus"></i>
                            Ajouter votre premier client
                        </button>
                    </div>
                <% } %>
            </div>

            <!-- Filtres -->
            <div class="filters-section" style="margin-top: 20px;">
                <div class="filter-group">
                    <label for="statusFilter">Filtrer par statut :</label>
                    <select id="statusFilter" onchange="filterByStatus(this.value)">
                        <option value="all">Tous les statuts</option>
                        <option value="prospect">Prospects</option>
                        <option value="actif">Actifs</option>
                        <option value="fidele">Fidèles</option>
                        <option value="vip">VIP</option>
                        <option value="inactif">Inactifs</option>
                    </select>
                </div>
            </div>
        </main>
    </div>

    <!-- Scripts JavaScript -->
    <script>
        // ========================================
        // INITIALISATION
        // ========================================
        
        document.addEventListener('DOMContentLoaded', function() {
            console.log('📊 Interface suivi clients chargée');
            console.log('📊 Nombre de clients:', <%= clientsStats ? clientsStats.length : 0 %>);

            // ========================================
            // 🔍 RECHERCHE EN TEMPS RÉEL
            // ========================================
            
            const searchInput = document.getElementById('search-client');
            const clientRows = document.querySelectorAll('.client-list tbody tr');

            if (searchInput) {
                searchInput.addEventListener('input', function() {
                    const searchTerm = this.value.toLowerCase().trim();
                    
                    clientRows.forEach(row => {
                        const firstName = row.querySelector('td:nth-child(1)')?.textContent.toLowerCase() || '';
                        const lastName = row.querySelector('td:nth-child(2)')?.textContent.toLowerCase() || '';
                        const email = row.querySelector('td:nth-child(3)')?.textContent.toLowerCase() || '';
                        
                        const matches = firstName.includes(searchTerm) || 
                                       lastName.includes(searchTerm) || 
                                       email.includes(searchTerm);
                        
                        row.style.display = matches ? '' : 'none';
                    });
                });
            }

            // ========================================
            // ➕ AJOUTER UN CLIENT
            // ========================================
            
            const addClientBtn = document.getElementById('addClientBtn');
            const addFirstClientBtn = document.getElementById('addFirstClientBtn');
            
            if (addClientBtn) {
                addClientBtn.addEventListener('click', showAddClientModal);
            }
            
            if (addFirstClientBtn) {
                addFirstClientBtn.addEventListener('click', showAddClientModal);
            }

            // ========================================
            // 👁️ VOIR DÉTAILS CLIENT
            // ========================================
            
            document.querySelectorAll('.action-btn.view').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const clientId = this.closest('tr').dataset.clientId;
                    if (clientId) {
                        viewClientDetails(clientId);
                    }
                });
            });

            // ========================================
            // ✏️ MODIFIER CLIENT
            // ========================================
            
            document.querySelectorAll('.action-btn.edit').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const clientId = this.closest('tr').dataset.clientId;
                    if (clientId) {
                        editClient(clientId);
                    }
                });
            });

            // ========================================
            // 🗑️ SUPPRIMER CLIENT
            // ========================================
            
            document.querySelectorAll('.action-btn.delete').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const clientId = this.closest('tr').dataset.clientId;
                    const clientName = this.closest('tr').querySelector('td:nth-child(1)').textContent + ' ' + 
                                      this.closest('tr').querySelector('td:nth-child(2)').textContent;
                    if (clientId) {
                        deleteClient(clientId, clientName);
                    }
                });
            });

            // ========================================
            // 📈 EXPORT
            // ========================================
            
            const exportBtn = document.getElementById('exportBtn');
            if (exportBtn) {
                exportBtn.addEventListener('click', function() {
                    showExportModal();
                });
            }
        });

        // ========================================
        // FONCTIONS MODALES ET ACTIONS
        // ========================================

        function showAddClientModal() {
            const modalHTML = `
                <div class="modal-overlay" id="addClientModal">
                    <div class="modal">
                        <div class="modal-header">
                            <h3>Ajouter un nouveau client</h3>
                            <button class="modal-close" onclick="closeModal('addClientModal')">&times;</button>
                        </div>
                        <div class="modal-body">
                            <form id="addClientForm">
                                <div class="form-group">
                                    <label for="firstName">Prénom *</label>
                                    <input type="text" id="firstName" name="firstName" required>
                                </div>
                                <div class="form-group">
                                    <label for="lastName">Nom *</label>
                                    <input type="text" id="lastName" name="lastName" required>
                                </div>
                                <div class="form-group">
                                    <label for="email">Email *</label>
                                    <input type="email" id="email" name="email" required>
                                </div>
                                <div class="form-group">
                                    <label for="phone">Téléphone</label>
                                    <input type="tel" id="phone" name="phone">
                                </div>
                                <div class="form-group">
                                    <label for="address">Adresse</label>
                                    <textarea id="address" name="address" rows="3"></textarea>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="cancel" onclick="closeModal('addClientModal')">Annuler</button>
                            <button type="button" class="save" onclick="submitAddClient()">Ajouter</button>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', modalHTML);
        }

        function submitAddClient() {
            const form = document.getElementById('addClientForm');
            const formData = new FormData(form);
            
            // Validation côté client
            if (!formData.get('firstName') || !formData.get('lastName') || !formData.get('email')) {
                showNotification('Veuillez remplir tous les champs obligatoires', 'error');
                return;
            }

            // Envoyer la requête
            fetch('/admin/clients/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    firstName: formData.get('firstName'),
                    lastName: formData.get('lastName'),
                    email: formData.get('email'),
                    phone: formData.get('phone'),
                    address: formData.get('address')
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification('Client ajouté avec succès', 'success');
                    closeModal('addClientModal');
                    // Recharger la page pour voir le nouveau client
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showNotification(data.message || 'Erreur lors de l\'ajout', 'error');
                }
            })
            .catch(error => {
                console.error('Erreur:', error);
                showNotification('Erreur lors de l\'ajout du client', 'error');
            });
        }

        function viewClientDetails(clientId) {
            fetch(`/admin/clients/${clientId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showClientDetailsModal(data.client);
                } else {
                    showNotification('Erreur lors de la récupération des détails', 'error');
                }
            })
            .catch(error => {
                console.error('Erreur:', error);
                showNotification('Erreur lors de la récupération des détails', 'error');
            });
        }

        function showClientDetailsModal(client) {
            const ordersHTML = client.recentOrders && client.recentOrders.length > 0 
                ? client.recentOrders.map(order => `
                    <tr>
                        <td>${order.numero}</td>
                        <td>${order.total}€</td>
                        <td><span class="status ${order.status}">${order.status}</span></td>
                        <td>${new Date(order.date).toLocaleDateString('fr-FR')}</td>
                    </tr>
                `).join('')
                : '<tr><td colspan="4">Aucune commande</td></tr>';

            const modalHTML = `
                <div class="modal-overlay" id="clientDetailsModal">
                    <div class="modal large">
                        <div class="modal-header">
                            <h3>Détails de ${client.first_name} ${client.last_name}</h3>
                            <button class="modal-close" onclick="closeModal('clientDetailsModal')">&times;</button>
                        </div>
                        <div class="modal-body">
                            <div class="client-details-grid">
                                <div class="client-info">
                                    <h4>Informations personnelles</h4>
                                    <p><strong>Email:</strong> ${client.email}</p>
                                    <p><strong>Téléphone:</strong> ${client.phone || 'Non renseigné'}</p>
                                    <p><strong>Adresse:</strong> ${client.address || 'Non renseignée'}</p>
                                    <p><strong>Inscription:</strong> ${new Date(client.created_at).toLocaleDateString('fr-FR')}</p>
                                </div>
                                <div class="client-stats">
                                    <h4>Statistiques</h4>
                                    <p><strong>Commandes totales:</strong> ${client.total_orders}</p>
                                    <p><strong>Montant total:</strong> ${parseFloat(client.total_spent || 0).toFixed(2)}€</p>
                                    <p><strong>Panier moyen:</strong> ${parseFloat(client.average_basket || 0).toFixed(2)}€</p>
                                    <p><strong>Dernière commande:</strong> ${client.last_order_date ? new Date(client.last_order_date).toLocaleDateString('fr-FR') : 'Jamais'}</p>
                                </div>
                            </div>
                            
                            <div class="recent-orders">
                                <h4>Commandes récentes</h4>
                                <table>
                                    <thead>
                                        <tr>
                                            <th>Numéro</th>
                                            <th>Montant</th>
                                            <th>Statut</th>
                                            <th>Date</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${ordersHTML}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="cancel" onclick="closeModal('clientDetailsModal')">Fermer</button>
                            <button type="button" class="save" onclick="editClient(${client.id})">Modifier</button>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', modalHTML);
        }

        function editClient(clientId) {
            // D'abord récupérer les données actuelles du client
            fetch(`/admin/clients/${clientId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showEditClientModal(data.client);
                } else {
                    showNotification('Erreur lors de la récupération des données', 'error');
                }
            })
            .catch(error => {
                console.error('Erreur:', error);
                showNotification('Erreur lors de la récupération des données', 'error');
            });
        }

        function showEditClientModal(client) {
            // Fermer toute modal ouverte
            document.querySelectorAll('.modal-overlay').forEach(modal => modal.remove());
            
            const modalHTML = `
                <div class="modal-overlay" id="editClientModal">
                    <div class="modal">
                        <div class="modal-header">
                            <h3>Modifier ${client.first_name} ${client.last_name}</h3>
                            <button class="modal-close" onclick="closeModal('editClientModal')">&times;</button>
                        </div>
                        <div class="modal-body">
                            <form id="editClientForm">
                                <input type="hidden" id="editClientId" value="${client.id}">
                                <div class="form-group">
                                    <label for="editFirstName">Prénom *</label>
                                    <input type="text" id="editFirstName" name="editFirstName" value="${client.first_name}" required>
                                </div>
                                <div class="form-group">
                                    <label for="editLastName">Nom *</label>
                                    <input type="text" id="editLastName" name="editLastName" value="${client.last_name}" required>
                                </div>
                                <div class="form-group">
                                    <label for="editEmail">Email *</label>
                                    <input type="email" id="editEmail" name="editEmail" value="${client.email}" required>
                                </div>
                                <div class="form-group">
                                    <label for="editPhone">Téléphone</label>
                                    <input type="tel" id="editPhone" name="editPhone" value="${client.phone || ''}">
                                </div>
                                <div class="form-group">
                                    <label for="editAddress">Adresse</label>
                                    <textarea id="editAddress" name="editAddress" rows="3">${client.address || ''}</textarea>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="cancel" onclick="closeModal('editClientModal')">Annuler</button>
                            <button type="button" class="save" onclick="submitEditClient()">Sauvegarder</button>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', modalHTML);
        }

        function submitEditClient() {
            const form = document.getElementById('editClientForm');
            const formData = new FormData(form);
            const clientId = document.getElementById('editClientId').value;
            
            // Validation côté client
            if (!formData.get('editFirstName') || !formData.get('editLastName') || !formData.get('editEmail')) {
                showNotification('Veuillez remplir tous les champs obligatoires', 'error');
                return;
            }

            // Envoyer la requête
            fetch(`/admin/clients/${clientId}/update`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    editFirstName: formData.get('editFirstName'),
                    editLastName: formData.get('editLastName'),
                    editEmail: formData.get('editEmail'),
                    editPhone: formData.get('editPhone'),
                    editAddress: formData.get('editAddress')
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification('Client mis à jour avec succès', 'success');
                    closeModal('editClientModal');
                    // Recharger la page pour voir les modifications
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showNotification(data.message || 'Erreur lors de la mise à jour', 'error');
                }
            })
            .catch(error => {
                console.error('Erreur:', error);
                showNotification('Erreur lors de la mise à jour du client', 'error');
            });
        }

        function deleteClient(clientId, clientName) {
            if (!confirm(`Êtes-vous sûr de vouloir supprimer le client "${clientName}" ?\n\nCette action est irréversible.`)) {
                return;
            }

            fetch(`/admin/clients/${clientId}/delete`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification('Client supprimé avec succès', 'success');
                    // Supprimer la ligne du tableau
                    const row = document.querySelector(`tr[data-client-id="${clientId}"]`);
                    if (row) {
                        row.remove();
                    }
                } else {
                    showNotification(data.message || 'Erreur lors de la suppression', 'error');
                }
            })
            .catch(error => {
                console.error('Erreur:', error);
                showNotification('Erreur lors de la suppression du client', 'error');
            });
        }

        function showExportModal() {
            const modalHTML = `
                <div class="modal-overlay" id="exportModal">
                    <div class="modal">
                        <div class="modal-header">
                            <h3>Exporter les données clients</h3>
                            <button class="modal-close" onclick="closeModal('exportModal')">&times;</button>
                        </div>
                        <div class="modal-body">
                            <p>Choisissez le format d'export :</p>
                            <div class="export-options">
                                <button class="export-btn" onclick="exportClients('csv')">
                                    <i class="fas fa-file-csv"></i>
                                    Exporter en CSV
                                </button>
                                <button class="export-btn" onclick="exportClients('json')">
                                    <i class="fas fa-file-code"></i>
                                    Exporter en JSON
                                </button>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="cancel" onclick="closeModal('exportModal')">Annuler</button>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', modalHTML);
        }

        function exportClients(format) {
            showNotification('Préparation de l\'export...', 'info');
            
            // Créer un lien de téléchargement
            const link = document.createElement('a');
            link.href = `/admin/clients/export?format=${format}`;
            link.download = `clients_export.${format}`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            closeModal('exportModal');
            
            setTimeout(() => {
                showNotification(`Export ${format.toUpperCase()} téléchargé`, 'success');
            }, 1000);
        }

        function filterByStatus(status) {
            const rows = document.querySelectorAll('.client-list tbody tr');
            
            rows.forEach(row => {
                const statusCell = row.querySelector('.status-badge');
                if (status === 'all' || !statusCell) {
                    row.style.display = '';
                } else {
                    const rowStatus = statusCell.textContent.toLowerCase().trim();
                    row.style.display = rowStatus === status.toLowerCase() ? '' : 'none';
                }
            });
        }

        function sortTable(column, direction = 'asc') {
            const tbody = document.querySelector('.client-list tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));
            
            const columnIndex = {
                'name': 1,
                'email': 3,
                'orders': 5,
                'total': 6,
                'lastOrder': 7
            }[column];
            
            if (!columnIndex) return;
            
            rows.sort((a, b) => {
                let aVal = a.cells[columnIndex].textContent.trim();
                let bVal = b.cells[columnIndex].textContent.trim();
                
                // Conversion pour les nombres
                if (column === 'orders' || column === 'total') {
                    aVal = parseFloat(aVal.replace(/[^\d.-]/g, '')) || 0;
                    bVal = parseFloat(bVal.replace(/[^\d.-]/g, '')) || 0;
                }
                
                // Conversion pour les dates
                if (column === 'lastOrder') {
                    aVal = new Date(aVal).getTime() || 0;
                    bVal = new Date(bVal).getTime() || 0;
                }
                
                if (direction === 'asc') {
                    return aVal > bVal ? 1 : -1;
                } else {
                    return aVal < bVal ? 1 : -1;
                }
            });
            
            // Réorganiser les lignes
            rows.forEach(row => tbody.appendChild(row));
        }

        // Fonctions utilitaires
        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.remove();
            }
        }

        function showNotification(message, type = 'info') {
            // Supprimer les notifications existantes
            document.querySelectorAll('.notification').forEach(n => n.remove());
            
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.innerHTML = `
                <div class="notification-content">
                    <span class="notification-message">${message}</span>
                    <button class="notification-close" onclick="this.parentElement.parentElement.remove()">&times;</button>
                </div>
            `;
            
            document.body.appendChild(notification);
            
            // Auto-suppression après 5 secondes
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 5000);
        }

    </script>

    <!-- CSS supplémentaire pour l'état vide et les styles manquants -->
    <style>
        /* Variables CSS */
        :root {
            --rose-gold: #b76e79;
            --rose-gold-dark: #a55a65;
            --rose-gold-light: #f8f0f2;
            --text-dark: #2d3748;
            --text-light: #718096;
            --grey-light: #f7fafc;
            --grey-medium: #e2e8f0;
            --transition: all 0.2s ease;
            --border-radius: 8px;
            --radius-sm: 4px;
        }

        /* États vides */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .empty-state-icon {
            font-size: 4rem;
            color: var(--grey-medium);
            margin-bottom: 20px;
        }

        .empty-state h3 {
            color: var(--text-dark);
            margin-bottom: 10px;
        }

        .empty-state p {
            color: var(--text-light);
            margin-bottom: 30px;
        }

        .btn-primary {
            background-color: var(--rose-gold);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.2s;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary:hover {
            background-color: var(--rose-gold-dark);
        }

        /* Section filtres */
        .filters-section {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .filter-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .filter-group label {
            font-weight: 500;
            color: var(--text-dark);
        }

        .filter-group select {
            padding: 8px 12px;
            border: 1px solid var(--grey-medium);
            border-radius: 4px;
            background: white;
            cursor: pointer;
            transition: border-color 0.2s;
        }

        .filter-group select:focus {
            outline: none;
            border-color: var(--rose-gold);
        }

        /* Layout principal */
        .container {
            display: flex;
            min-height: 100vh;
            background-color: #f8fafc;
        }

        aside {
            width: 250px;
            background: white;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
            padding: 20px 0;
        }

        .menu-item {
            padding: 12px 25px;
            cursor: pointer;
            transition: all 0.2s;
            border-left: 3px solid transparent;
        }

        .menu-item:hover {
            background-color: var(--rose-gold-light);
            border-left-color: var(--rose-gold);
        }

        .menu-item.active {
            background-color: var(--rose-gold-light);
            border-left-color: var(--rose-gold);
        }

        .menu-item a {
            text-decoration: none;
            color: var(--text-dark);
            display: flex;
            align-items: center;
            gap: 12px;
            font-weight: 500;
        }

        .menu-item.active a {
            color: var(--rose-gold-dark);
        }

        main {
            flex: 1;
            padding: 25px;
            overflow-y: auto;
        }

        /* Header principal */
        header {
            background: linear-gradient(135deg, var(--rose-gold) 0%, var(--rose-gold-dark) 100%);
            color: white;
            padding: 20px 25px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        header h1 {
            margin: 0;
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 1.5rem;
        }

        .search-bar {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .search-bar input {
            padding: 10px 15px;
            border: none;
            border-radius: 25px;
            min-width: 300px;
            font-size: 0.9rem;
        }

        .search-bar button {
            background: rgba(255,255,255,0.2);
            border: none;
            padding: 10px 15px;
            border-radius: 25px;
            color: white;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .search-bar button:hover {
            background: rgba(255,255,255,0.3);
        }

        /* Dashboard header */
        .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }

        .dashboard-header h2 {
            margin: 0;
            color: var(--text-dark);
            font-size: 1.8rem;
        }

        .actions {
            display: flex;
            gap: 10px;
        }

        .actions button {
            background: var(--rose-gold);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .actions button:hover {
            background: var(--rose-gold-dark);
            transform: translateY(-1px);
        }

        /* Statistiques */
        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            padding: 25px;
            border-radius: var(--border-radius);
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            transition: transform 0.2s;
        }

        .stat-card:hover {
            transform: translateY(-2px);
        }

        .stat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .stat-icon {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, var(--rose-gold) 0%, var(--rose-gold-dark) 100%);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.2rem;
        }

        .stat-value {
            font-size: 2.2rem;
            font-weight: 700;
            color: var(--text-dark);
            margin-bottom: 5px;
        }

        .stat-label {
            color: var(--text-light);
            font-size: 0.9rem;
            font-weight: 500;
        }

        /* Liste des clients */
        .client-list {
            background: white;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 25px;
        }

        .client-list table {
            width: 100%;
            border-collapse: collapse;
        }

        .client-list th {
            background-color: var(--grey-light);
            padding: 15px 12px;
            text-align: left;
            font-weight: 600;
            color: var(--text-dark);
            border-bottom: 2px solid var(--grey-medium);
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .client-list th:hover {
            background-color: #e9ecef;
        }

        .client-list td {
            padding: 12px;
            border-bottom: 1px solid var(--grey-light);
            vertical-align: middle;
        }

        .client-list tbody tr {
            transition: background-color 0.2s;
        }

        .client-list tbody tr:hover {
            background-color: #f8f9fa;
        }

        /* Badges de statut */
        .status-badge {
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 500;
            text-transform: capitalize;
        }

        .status-badge.prospect { background-color: #e3f2fd; color: #1565c0; }
        .status-badge.actif { background-color: #e8f5e8; color: #2e7d32; }
        .status-badge.fidele { background-color: #fff3e0; color: #ef6c00; }
        .status-badge.vip { background-color: #f3e5f5; color: #7b1fa2; }
        .status-badge.inactif { background-color: #fafafa; color: #616161; }

        /* Boutons d'action */
        .actions {
            display: flex;
            gap: 5px;
            justify-content: center;
        }

        .action-btn {
            background: none;
            border: none;
            padding: 8px;
            border-radius: 4px;
            cursor: pointer;
            transition: var(--transition);
            font-size: 0.9rem;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .action-btn.view {
            color: #007bff;
        }

        .action-btn.view:hover {
            background-color: rgba(0, 123, 255, 0.1);
        }

        .action-btn.edit {
            color: #ffc107;
        }

        .action-btn.edit:hover {
            background-color: rgba(255, 193, 7, 0.1);
        }

        .action-btn.delete {
            color: #dc3545;
        }

        .action-btn.delete:hover {
            background-color: rgba(220, 53, 69, 0.1);
        }

        /* Classes utilitaires */
        .text-center { text-align: center; }
        .text-right { text-align: right; }
        .text-muted { color: var(--text-light); }

        /* Responsive */
        @media (max-width: 768px) {
            .container {
                flex-direction: column;
            }
            
            aside {
                width: 100%;
                order: 2;
            }
            
            main {
                order: 1;
            }
            
            .stats-container {
                grid-template-columns: repeat(2, 1fr);
                gap: 15px;
            }
            
            .dashboard-header {
                flex-direction: column;
                gap: 15px;
                align-items: stretch;
            }
            
            .search-bar input {
                min-width: 200px;
            }
            
            .client-list {
                overflow-x: auto;
            }
            
            .client-list table {
                min-width: 800px;
            }
        }

        @media (max-width: 480px) {
            .stats-container {
                grid-template-columns: 1fr;
            }
            
            .search-bar {
                flex-direction: column;
                gap: 10px;
                align-items: stretch;
            }
            
            .search-bar input {
                min-width: auto;
            }
        }

        /* Notifications */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            z-index: 1001;
            max-width: 400px;
            font-weight: 500;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.success {
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }

        .notification.error {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }

        .notification.info {
            background-color: #d1ecf1;
            border: 1px solid #bee5eb;
            color: #0c5460;
        }

        .notification-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 10px;
        }

        .notification-close {
            background: none;
            border: none;
            font-size: 1.2rem;
            cursor: pointer;
            opacity: 0.7;
            transition: opacity 0.2s;
        }

        .notification-close:hover {
            opacity: 1;
        }

        /* Modales - styles de base déjà inclus dans follow-client-css-fixes */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            max-width: 500px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal.large {
            max-width: 800px;
        }

        .modal-header {
            padding: 20px;
            border-bottom: 1px solid var(--grey-medium);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-header h3 {
            margin: 0;
            color: var(--text-dark);
            font-size: 1.2rem;
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--text-light);
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: var(--transition);
        }

        .modal-close:hover {
            background-color: var(--grey-light);
            color: var(--text-dark);
        }

        .modal-body {
            padding: 20px;
        }

        .modal-footer {
            padding: 15px 20px;
            border-top: 1px solid var(--grey-medium);
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        .modal-footer button {
            padding: 10px 20px;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
        }

        .modal-footer .cancel {
            background-color: var(--grey-light);
            border: 1px solid var(--grey-medium);
            color: var(--text-dark);
        }

        .modal-footer .save {
            background-color: var(--rose-gold);
            color: white;
            border: none;
        }

        .modal-footer .save:hover {
            background-color: var(--rose-gold-dark);
        }

        /* Formulaires */
        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
            color: var(--text-dark);
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid var(--grey-medium);
            border-radius: var(--radius-sm);
            font-size: 14px;
            font-family: inherit;
            transition: var(--transition);
            box-sizing: border-box;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            border-color: var(--rose-gold);
            outline: none;
            box-shadow: 0 0 0 2px rgba(183, 110, 121, 0.1);
        }

        .form-group textarea {
            min-height: 80px;
            resize: vertical;
        }

        /* Grille détails client */
        .client-details-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        @media (max-width: 768px) {
            .client-details-grid {
                grid-template-columns: 1fr;
            }
        }

        .client-info h4,
        .client-stats h4 {
            margin-top: 0;
            margin-bottom: 15px;
            color: var(--rose-gold-dark);
            font-size: 1.1rem;
        }

        .client-info p,
        .client-stats p {
            margin: 8px 0;
            font-size: 0.95rem;
        }

        .recent-orders {
            margin-top: 20px;
        }

        .recent-orders h4 {
            margin-bottom: 15px;
            color: var(--rose-gold-dark);
        }

        .recent-orders table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.9rem;
        }

        .recent-orders table th {
            background-color: var(--grey-light);
            padding: 10px;
            text-align: left;
            font-weight: 600;
            border-bottom: 2px solid var(--grey-medium);
        }

        .recent-orders table td {
            padding: 8px 10px;
            border-bottom: 1px solid var(--grey-light);
        }

        /* Options d'export */
        .export-options {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin: 20px 0;
        }

        .export-btn {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
            padding: 20px;
            border: 2px solid var(--grey-medium);
            border-radius: var(--border-radius);
            background: white;
            cursor: pointer;
            transition: var(--transition);
            min-width: 120px;
        }

        .export-btn:hover {
            border-color: var(--rose-gold);
            background-color: var(--rose-gold-light);
        }

        .export-btn i {
            font-size: 2rem;
            color: var(--rose-gold);
        }
    </style>


<script>

    // À ajouter dans public/js/follow-client.js
// ou directement dans follow-customer.ejs dans une balise <script>

document.addEventListener('DOMContentLoaded', function() {
    console.log('📊 Interface suivi clients chargée');

    // ========================================
    // 🔍 RECHERCHE EN TEMPS RÉEL
    // ========================================
    
    const searchInput = document.getElementById('search-client');
    const clientRows = document.querySelectorAll('.client-list tbody tr');

    if (searchInput) {
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase().trim();
            
            clientRows.forEach(row => {
                const firstName = row.querySelector('td:nth-child(1)')?.textContent.toLowerCase() || '';
                const lastName = row.querySelector('td:nth-child(2)')?.textContent.toLowerCase() || '';
                const email = row.querySelector('td:nth-child(3)')?.textContent.toLowerCase() || '';
                
                const matches = firstName.includes(searchTerm) || 
                               lastName.includes(searchTerm) || 
                               email.includes(searchTerm);
                
                row.style.display = matches ? '' : 'none';
            });
        });
    }

    // ========================================
    // ➕ AJOUTER UN CLIENT
    // ========================================
    
    const addClientBtn = document.getElementById('addClientBtn');
    if (addClientBtn) {
        addClientBtn.addEventListener('click', function() {
            showAddClientModal();
        });
    }

    // ========================================
    // 👁️ VOIR DÉTAILS CLIENT
    // ========================================
    
    document.querySelectorAll('.action-btn.view').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            const clientId = this.closest('tr').dataset.clientId;
            if (clientId) {
                viewClientDetails(clientId);
            }
        });
    });

    // ========================================
    // ✏️ MODIFIER CLIENT
    // ========================================
    
    document.querySelectorAll('.action-btn.edit').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            const clientId = this.closest('tr').dataset.clientId;
            if (clientId) {
                editClient(clientId);
            }
        });
    });

    // ========================================
    // 🗑️ SUPPRIMER CLIENT
    // ========================================
    
    document.querySelectorAll('.action-btn.delete').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            const clientId = this.closest('tr').dataset.clientId;
            const clientName = this.closest('tr').querySelector('td:nth-child(1)').textContent + ' ' + 
                              this.closest('tr').querySelector('td:nth-child(2)').textContent;
            if (clientId) {
                deleteClient(clientId, clientName);
            }
        });
    });

    // ========================================
    // 📈 EXPORT
    // ========================================
    
    const exportBtn = document.getElementById('exportBtn');
    if (exportBtn) {
        exportBtn.addEventListener('click', function() {
            showExportModal();
        });
    }
});

// ========================================
// FONCTIONS MODALES ET ACTIONS
// ========================================

function showAddClientModal() {
    const modalHTML = `
        <div class="modal-overlay" id="addClientModal">
            <div class="modal">
                <div class="modal-header">
                    <h3>Ajouter un nouveau client</h3>
                    <button class="modal-close" onclick="closeModal('addClientModal')">&times;</button>
                </div>
                <div class="modal-body">
                    <form id="addClientForm">
                        <div class="form-group">
                            <label for="firstName">Prénom *</label>
                            <input type="text" id="firstName" name="firstName" required>
                        </div>
                        <div class="form-group">
                            <label for="lastName">Nom *</label>
                            <input type="text" id="lastName" name="lastName" required>
                        </div>
                        <div class="form-group">
                            <label for="email">Email *</label>
                            <input type="email" id="email" name="email" required>
                        </div>
                        <div class="form-group">
                            <label for="phone">Téléphone</label>
                            <input type="tel" id="phone" name="phone">
                        </div>
                        <div class="form-group">
                            <label for="address">Adresse</label>
                            <textarea id="address" name="address" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="cancel" onclick="closeModal('addClientModal')">Annuler</button>
                    <button type="button" class="save" onclick="submitAddClient()">Ajouter</button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
}

function submitAddClient() {
    const form = document.getElementById('addClientForm');
    const formData = new FormData(form);
    
    // Validation côté client
    if (!formData.get('firstName') || !formData.get('lastName') || !formData.get('email')) {
        showNotification('Veuillez remplir tous les champs obligatoires', 'error');
        return;
    }

    // Envoyer la requête
    fetch('/admin/clients/add', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            firstName: formData.get('firstName'),
            lastName: formData.get('lastName'),
            email: formData.get('email'),
            phone: formData.get('phone'),
            address: formData.get('address')
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification('Client ajouté avec succès', 'success');
            closeModal('addClientModal');
            // Recharger la page pour voir le nouveau client
            setTimeout(() => location.reload(), 1000);
        } else {
            showNotification(data.message || 'Erreur lors de l\'ajout', 'error');
        }
    })
    .catch(error => {
        console.error('Erreur:', error);
        showNotification('Erreur lors de l\'ajout du client', 'error');
    });
}

function viewClientDetails(clientId) {
    fetch(`/admin/clients/${clientId}`)
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showClientDetailsModal(data.client);
        } else {
            showNotification('Erreur lors de la récupération des détails', 'error');
        }
    })
    .catch(error => {
        console.error('Erreur:', error);
        showNotification('Erreur lors de la récupération des détails', 'error');
    });
}

function showClientDetailsModal(client) {
    const ordersHTML = client.recentOrders && client.recentOrders.length > 0 
        ? client.recentOrders.map(order => `
            <tr>
                <td>${order.numero}</td>
                <td>${order.total}€</td>
                <td><span class="status ${order.status}">${order.status}</span></td>
                <td>${new Date(order.date).toLocaleDateString('fr-FR')}</td>
            </tr>
        `).join('')
        : '<tr><td colspan="4">Aucune commande</td></tr>';

    const modalHTML = `
        <div class="modal-overlay" id="clientDetailsModal">
            <div class="modal large">
                <div class="modal-header">
                    <h3>Détails de ${client.first_name} ${client.last_name}</h3>
                    <button class="modal-close" onclick="closeModal('clientDetailsModal')">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="client-details-grid">
                        <div class="client-info">
                            <h4>Informations personnelles</h4>
                            <p><strong>Email:</strong> ${client.email}</p>
                            <p><strong>Téléphone:</strong> ${client.phone || 'Non renseigné'}</p>
                            <p><strong>Adresse:</strong> ${client.address || 'Non renseignée'}</p>
                            <p><strong>Inscription:</strong> ${new Date(client.created_at).toLocaleDateString('fr-FR')}</p>
                        </div>
                        <div class="client-stats">
                            <h4>Statistiques</h4>
                            <p><strong>Commandes totales:</strong> ${client.total_orders}</p>
                            <p><strong>Montant total:</strong> ${parseFloat(client.total_spent || 0).toFixed(2)}€</p>
                            <p><strong>Panier moyen:</strong> ${parseFloat(client.average_basket || 0).toFixed(2)}€</p>
                            <p><strong>Dernière commande:</strong> ${client.last_order_date ? new Date(client.last_order_date).toLocaleDateString('fr-FR') : 'Jamais'}</p>
                        </div>
                    </div>
                    
                    <div class="recent-orders">
                        <h4>Commandes récentes</h4>
                        <table>
                            <thead>
                                <tr>
                                    <th>Numéro</th>
                                    <th>Montant</th>
                                    <th>Statut</th>
                                    <th>Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${ordersHTML}
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="cancel" onclick="closeModal('clientDetailsModal')">Fermer</button>
                    <button type="button" class="save" onclick="editClient(${client.id})">Modifier</button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
}

function editClient(clientId) {
    // D'abord récupérer les données actuelles du client
    fetch(`/admin/clients/${clientId}`)
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showEditClientModal(data.client);
        } else {
            showNotification('Erreur lors de la récupération des données', 'error');
        }
    })
    .catch(error => {
        console.error('Erreur:', error);
        showNotification('Erreur lors de la récupération des données', 'error');
    });
}

function showEditClientModal(client) {
    // Fermer toute modal ouverte
    document.querySelectorAll('.modal-overlay').forEach(modal => modal.remove());
    
    const modalHTML = `
        <div class="modal-overlay" id="editClientModal">
            <div class="modal">
                <div class="modal-header">
                    <h3>Modifier ${client.first_name} ${client.last_name}</h3>
                    <button class="modal-close" onclick="closeModal('editClientModal')">&times;</button>
                </div>
                <div class="modal-body">
                    <form id="editClientForm">
                        <input type="hidden" id="editClientId" value="${client.id}">
                        <div class="form-group">
                            <label for="editFirstName">Prénom *</label>
                            <input type="text" id="editFirstName" name="editFirstName" value="${client.first_name}" required>
                        </div>
                        <div class="form-group">
                            <label for="editLastName">Nom *</label>
                            <input type="text" id="editLastName" name="editLastName" value="${client.last_name}" required>
                        </div>
                        <div class="form-group">
                            <label for="editEmail">Email *</label>
                            <input type="email" id="editEmail" name="editEmail" value="${client.email}" required>
                        </div>
                        <div class="form-group">
                            <label for="editPhone">Téléphone</label>
                            <input type="tel" id="editPhone" name="editPhone" value="${client.phone || ''}">
                        </div>
                        <div class="form-group">
                            <label for="editAddress">Adresse</label>
                            <textarea id="editAddress" name="editAddress" rows="3">${client.address || ''}</textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="cancel" onclick="closeModal('editClientModal')">Annuler</button>
                    <button type="button" class="save" onclick="submitEditClient()">Sauvegarder</button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
}

function submitEditClient() {
    const form = document.getElementById('editClientForm');
    const formData = new FormData(form);
    const clientId = document.getElementById('editClientId').value;
    
    // Validation côté client
    if (!formData.get('editFirstName') || !formData.get('editLastName') || !formData.get('editEmail')) {
        showNotification('Veuillez remplir tous les champs obligatoires', 'error');
        return;
    }

    // Envoyer la requête
    fetch(`/admin/clients/${clientId}/update`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            editFirstName: formData.get('editFirstName'),
            editLastName: formData.get('editLastName'),
            editEmail: formData.get('editEmail'),
            editPhone: formData.get('editPhone'),
            editAddress: formData.get('editAddress')
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification('Client mis à jour avec succès', 'success');
            closeModal('editClientModal');
            // Recharger la page pour voir les modifications
            setTimeout(() => location.reload(), 1000);
        } else {
            showNotification(data.message || 'Erreur lors de la mise à jour', 'error');
        }
    })
    .catch(error => {
        console.error('Erreur:', error);
        showNotification('Erreur lors de la mise à jour du client', 'error');
    });
}

function deleteClient(clientId, clientName) {
    if (!confirm(`Êtes-vous sûr de vouloir supprimer le client "${clientName}" ?\n\nCette action est irréversible.`)) {
        return;
    }

    fetch(`/admin/clients/${clientId}/delete`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification('Client supprimé avec succès', 'success');
            // Supprimer la ligne du tableau
            const row = document.querySelector(`tr[data-client-id="${clientId}"]`);
            if (row) {
                row.remove();
            }
        } else {
            showNotification(data.message || 'Erreur lors de la suppression', 'error');
        }
    })
    .catch(error => {
        console.error('Erreur:', error);
        showNotification('Erreur lors de la suppression du client', 'error');
    });
}

function showExportModal() {
    const modalHTML = `
        <div class="modal-overlay" id="exportModal">
            <div class="modal">
                <div class="modal-header">
                    <h3>Exporter les données clients</h3>
                    <button class="modal-close" onclick="closeModal('exportModal')">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Choisissez le format d'export :</p>
                    <div class="export-options">
                        <button class="export-btn" onclick="exportClients('csv')">
                            <i class="fas fa-file-csv"></i>
                            Exporter en CSV
                        </button>
                        <button class="export-btn" onclick="exportClients('json')">
                            <i class="fas fa-file-code"></i>
                            Exporter en JSON
                        </button>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="cancel" onclick="closeModal('exportModal')">Annuler</button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
}

function exportClients(format) {
    showNotification('Préparation de l\'export...', 'info');
    
    // Créer un lien de téléchargement
    const link = document.createElement('a');
    link.href = `/admin/clients/export?format=${format}`;
    link.download = `clients_export.${format}`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    closeModal('exportModal');
    
    setTimeout(() => {
        showNotification(`Export ${format.toUpperCase()} téléchargé`, 'success');
    }, 1000);
}

// ========================================
// FONCTIONS UTILITAIRES
// ========================================

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.remove();
    }
}

function showNotification(message, type = 'info') {
    // Supprimer les notifications existantes
    document.querySelectorAll('.notification').forEach(n => n.remove());
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-message">${message}</span>
            <button class="notification-close" onclick="this.parentElement.parentElement.remove()">&times;</button>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // Auto-suppression après 5 secondes
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 5000);
}

// ========================================
// FILTRES ET TRI
// ========================================

function filterByStatus(status) {
    const rows = document.querySelectorAll('.client-list tbody tr');
    
    rows.forEach(row => {
        const statusCell = row.querySelector('.status');
        if (status === 'all' || !statusCell) {
            row.style.display = '';
        } else {
            const rowStatus = statusCell.textContent.toLowerCase();
            row.style.display = rowStatus === status.toLowerCase() ? '' : 'none';
        }
    });
}

function sortTable(column, direction = 'asc') {
    const tbody = document.querySelector('.client-list tbody');
    const rows = Array.from(tbody.querySelectorAll('tr'));
    
    const columnIndex = {
        'name': 1,
        'email': 3,
        'orders': 5,
        'total': 6,
        'lastOrder': 7
    }[column];
    
    if (!columnIndex) return;
    
    rows.sort((a, b) => {
        let aVal = a.cells[columnIndex].textContent.trim();
        let bVal = b.cells[columnIndex].textContent.trim();
        
        // Conversion pour les nombres
        if (column === 'orders' || column === 'total') {
            aVal = parseFloat(aVal.replace(/[^\d.-]/g, '')) || 0;
            bVal = parseFloat(bVal.replace(/[^\d.-]/g, '')) || 0;
        }
        
        // Conversion pour les dates
        if (column === 'lastOrder') {
            aVal = new Date(aVal).getTime() || 0;
            bVal = new Date(bVal).getTime() || 0;
        }
        
        if (direction === 'asc') {
            return aVal > bVal ? 1 : -1;
        } else {
            return aVal < bVal ? 1 : -1;
        }
    });
    
    // Réorganiser les lignes
    rows.forEach(row => tbody.appendChild(row));
}
</script>
</body>
</html>