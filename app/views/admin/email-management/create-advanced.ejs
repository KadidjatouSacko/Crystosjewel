
                <!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>✏️ Éditeur d'Emails Avancé - CrystosJewel</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary: #d89ab3;
            --primary-dark: #b794a8;
            --secondary: #8b5cf6;
            --success: #10b981;
            --warning: #f59e0b;
            --danger: #ef4444;
            --info: #3b82f6;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --bg-primary: #f8fafc;
            --bg-secondary: #ffffff;
            --border: #e2e8f0;
            --shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            --radius: 8px;
        }

        * { margin: 0; padding: 0; box-sizing: border-box; }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: var(--bg-primary);
            color: var(--text-primary);
            margin: 0;
            padding: 0;
        }

        .editor-container {
            display: grid;
            grid-template-columns: 300px 1fr 350px;
            min-height: 100vh;
        }

        .sidebar-left, .sidebar-right {
            background: var(--bg-secondary);
            border-right: 1px solid var(--border);
            padding: 20px;
            overflow-y: auto;
            max-height: 100vh;
            position: sticky;
            top: 0;
        }

        .sidebar-right {
            border-left: 1px solid var(--border);
            border-right: none;
        }

        .editor-main {
            display: flex;
            flex-direction: column;
            background: #f1f5f9;
        }

        .editor-header {
            background: var(--bg-secondary);
            border-bottom: 1px solid var(--border);
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 15px;
        }

        .editor-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--text-primary);
            flex: 1;
        }

        .editor-actions {
            display: flex;
            gap: 10px;
        }

        .preview-area {
            flex: 1;
            padding: 20px;
            display: flex;
            justify-content: center;
            overflow-y: auto;
            position: relative;
            min-height: calc(100vh - 80px);
        }

        .email-preview {
            background: white;
            width: 600px;
            min-height: 800px;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            border: 1px solid var(--border);
            position: relative;
        }

        /* ===== ZONES DE DROP AMÉLIORÉES ===== */
        .drop-zone {
            min-height: 50px;
            border: 2px dashed transparent;
            transition: all 0.3s ease;
            position: relative;
            margin: 5px 0;
            border-radius: 4px;
        }

        .drop-zone.drag-over {
            border-color: var(--primary);
            background: rgba(216, 154, 179, 0.1);
        }

        .drop-zone:empty::before {
            content: "Glissez un élément ici";
            display: block;
            text-align: center;
            color: var(--text-secondary);
            font-size: 12px;
            padding: 20px;
            opacity: 0.5;
        }

        /* ===== ÉLÉMENTS ÉDITABLES AMÉLIORÉS ===== */
        .editable-element {
            position: relative;
            border: 2px solid transparent;
            transition: all 0.2s ease;
            cursor: pointer;
            margin: 10px 0;
        }

        .editable-element:hover {
            border-color: rgba(216, 154, 179, 0.5);
            box-shadow: 0 0 0 4px rgba(216, 154, 179, 0.1);
        }

        .editable-element.selected {
            border-color: var(--primary);
            box-shadow: 0 0 0 4px rgba(216, 154, 179, 0.2);
        }

        .element-controls {
            position: absolute;
            top: -30px;
            right: 0;
            display: none;
            background: var(--primary);
            border-radius: 4px;
            overflow: hidden;
        }

        .editable-element.selected .element-controls {
            display: flex;
        }

        .control-btn {
            padding: 5px 8px;
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.2s ease;
        }

        .control-btn:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        /* ===== REDIMENSIONNEMENT D'IMAGES ===== */
        .resizable-image {
            position: relative;
            display: inline-block;
        }

        .resize-handle {
            position: absolute;
            width: 8px;
            height: 8px;
            background: var(--primary);
            border: 2px solid white;
            border-radius: 50%;
            cursor: se-resize;
            bottom: -4px;
            right: -4px;
            display: none;
        }

        .resizable-image.selected .resize-handle {
            display: block;
        }

        /* ===== FORMULAIRES ET CONTRÔLES ===== */
        .form-group {
            margin-bottom: 15px;
        }

        .form-label {
            display: block;
            font-weight: 600;
            margin-bottom: 5px;
            color: var(--text-primary);
            font-size: 14px;
        }

        .form-input, .form-select, .form-textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--border);
            border-radius: var(--radius);
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        .form-input:focus, .form-select:focus, .form-textarea:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(216, 154, 179, 0.1);
        }

        /* ===== BLOCS DE CONTENU ===== */
        .content-blocks {
            margin-bottom: 25px;
        }

        .block-item {
            background: var(--bg-primary);
            border: 2px solid var(--border);
            border-radius: var(--radius);
            padding: 15px;
            margin-bottom: 10px;
            cursor: grab;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 12px;
            position: relative;
        }

        .block-item:hover {
            border-color: var(--primary);
            background: rgba(216, 154, 179, 0.1);
            transform: translateX(5px);
        }

        .block-item:active {
            cursor: grabbing;
        }

        .block-item.dragging {
            opacity: 0.5;
            transform: rotate(5deg);
        }

        .block-icon {
            font-size: 18px;
            color: var(--primary);
            width: 24px;
            text-align: center;
        }

        .block-info {
            flex: 1;
        }

        .block-title {
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 2px;
        }

        .block-desc {
            font-size: 12px;
            color: var(--text-secondary);
        }

        /* ===== BOUTONS ===== */
        .btn {
            padding: 10px 16px;
            border: none;
            border-radius: var(--radius);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
            text-decoration: none;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
        }

        .btn-secondary {
            background: var(--text-secondary);
            color: white;
        }

        .btn-success {
            background: var(--success);
            color: white;
        }

        .btn-info {
            background: var(--info);
            color: white;
        }

        .btn-warning {
            background: var(--warning);
            color: white;
        }

        .btn-danger {
            background: var(--danger);
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
        }

        /* ===== SECTIONS SIDEBAR ===== */
        .sidebar-section {
            margin-bottom: 25px;
            padding-bottom: 20px;
            border-bottom: 1px solid var(--border);
        }

        .sidebar-section:last-child {
            border-bottom: none;
        }

        .sidebar-section h3 {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 15px;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        /* ===== EMAIL HEADER/FOOTER ===== */
        .email-header {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            padding: 20px;
            border-radius: var(--radius) var(--radius) 0 0;
        }

        .email-subject {
            font-size: 1.4rem;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .email-preheader {
            font-size: 14px;
            opacity: 0.9;
        }

        .email-content {
            padding: 20px;
            line-height: 1.6;
            min-height: 400px;
        }

        .email-footer {
            background: var(--bg-primary);
            padding: 15px 20px;
            font-size: 12px;
            color: var(--text-secondary);
            border-radius: 0 0 var(--radius) var(--radius);
            border-top: 1px solid var(--border);
        }

        /* ===== PANNEAU D'ÉDITION AVANCÉ ===== */
        .edit-panel {
            position: fixed;
            top: 50%;
            right: 20px;
            transform: translateY(-50%);
            background: white;
            border: 2px solid var(--primary);
            border-radius: 12px;
            padding: 20px;
            width: 320px;
            max-height: 80vh;
            overflow-y: auto;
            z-index: 9999;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
        }

        /* ===== VARIABLES ET AUTRES ===== */
        .variables-list {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
        }

        .variable-tag {
            background: var(--secondary);
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 11px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .variable-tag:hover {
            background: #7c3aed;
            transform: scale(1.05);
        }

        /* ===== NOTIFICATIONS ===== */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            z-index: 99999;
            max-width: 350px;
            animation: slideIn 0.3s ease;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }

        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        /* ===== RESPONSIVE ===== */
        @media (max-width: 1200px) {
            .editor-container {
                grid-template-columns: 250px 1fr 300px;
            }
        }

        @media (max-width: 768px) {
            .editor-container {
                grid-template-columns: 1fr;
                grid-template-rows: auto 1fr auto;
            }
            
            .sidebar-left, .sidebar-right {
                max-height: 200px;
            }
        }

        /* ===== LOADING ET SPINNERS ===== */
        .loading {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
            color: var(--text-secondary);
            font-size: 13px;
        }

        .spinner {
            width: 16px;
            height: 16px;
            border: 2px solid var(--border);
            border-top: 2px solid var(--primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 8px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* ===== GRILLE DE PRODUITS ===== */
        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            padding: 20px;
            border: 2px dashed var(--primary);
            border-radius: 8px;
            margin: 10px 0;
        }

        .product-card {
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            transition: transform 0.2s ease;
        }

        .product-card:hover {
            transform: translateY(-2px);
        }

        .product-image {
            width: 100%;
            height: 120px;
            object-fit: cover;
        }

        .product-info {
            padding: 10px;
        }

        .product-name {
            font-size: 12px;
            font-weight: 600;
            margin-bottom: 5px;
            color: var(--text-primary);
        }

        .product-price {
            font-size: 14px;
            font-weight: 700;
            color: var(--primary);
        }
    </style>
</head>
<body>
    <div class="editor-container">
        <!-- Sidebar gauche -->
        <div class="sidebar-left">
            <div class="sidebar-section">
                <h3>
                    <i class="fas fa-cog"></i>
                    Configuration
                </h3>
                
                <form class="config-form" id="campaignForm">
                    <div class="form-group">
                        <label class="form-label">Nom de la campagne</label>
                        <input type="text" class="form-input" id="campaignName" placeholder="Ma super campagne">
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Sujet de l'email</label>
                        <input type="text" class="form-input" id="emailSubject" placeholder="🎉 Découvrez nos nouveautés !">
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Pré-header (optionnel)</label>
                        <input type="text" class="form-input" id="emailPreheader" placeholder="Texte de prévisualisation">
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Nom de l'expéditeur</label>
                        <input type="text" class="form-input" id="senderName" value="CrystosJewel">
                    </div>
                </form>
            </div>

            <div class="sidebar-section">
                <h3>
                    <i class="fas fa-cube"></i>
                    Blocs de contenu
                </h3>
                
                <div class="content-blocks">
                    <div class="block-item" draggable="true" data-block="title">
                        <div class="block-icon"><i class="fas fa-heading"></i></div>
                        <div class="block-info">
                            <div class="block-title">Titre</div>
                            <div class="block-desc">Titre principal ou secondaire</div>
                        </div>
                    </div>
                    
                    <div class="block-item" draggable="true" data-block="text">
                        <div class="block-icon"><i class="fas fa-paragraph"></i></div>
                        <div class="block-info">
                            <div class="block-title">Texte</div>
                            <div class="block-desc">Paragraphe de texte</div>
                        </div>
                    </div>
                    
                    <div class="block-item" draggable="true" data-block="image">
                        <div class="block-icon"><i class="fas fa-image"></i></div>
                        <div class="block-info">
                            <div class="block-title">Image</div>
                            <div class="block-desc">Image redimensionnable</div>
                        </div>
                    </div>
                    
                    <div class="block-item" draggable="true" data-block="button">
                        <div class="block-icon"><i class="fas fa-mouse-pointer"></i></div>
                        <div class="block-info">
                            <div class="block-title">Bouton</div>
                            <div class="block-desc">Bouton d'action</div>
                        </div>
                    </div>
                    
                    <div class="block-item" draggable="true" data-block="divider">
                        <div class="block-icon"><i class="fas fa-grip-lines"></i></div>
                        <div class="block-info">
                            <div class="block-title">Séparateur</div>
                            <div class="block-desc">Ligne de séparation</div>
                        </div>
                    </div>
                    
                    <div class="block-item" draggable="true" data-block="products">
                        <div class="block-icon"><i class="fas fa-gem"></i></div>
                        <div class="block-info">
                            <div class="block-title">Produits</div>
                            <div class="block-desc">Grille de produits</div>
                        </div>
                    </div>
                    
                    <div class="block-item" draggable="true" data-block="columns">
                        <div class="block-icon"><i class="fas fa-columns"></i></div>
                        <div class="block-info">
                            <div class="block-title">Colonnes</div>
                            <div class="block-desc">Layout en colonnes</div>
                        </div>
                    </div>
                    
                    <div class="block-item" draggable="true" data-block="spacer">
                        <div class="block-icon"><i class="fas fa-arrows-alt-v"></i></div>
                        <div class="block-info">
                            <div class="block-title">Espacement</div>
                            <div class="block-desc">Zone d'espacement</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="sidebar-section">
                <h3>
                    <i class="fas fa-code"></i>
                    Variables
                </h3>
                
                <div class="variables-list">
                    <span class="variable-tag" onclick="insertVariable('{{firstName}}')">{{firstName}}</span>
                    <span class="variable-tag" onclick="insertVariable('{{lastName}}')">{{lastName}}</span>
                    <span class="variable-tag" onclick="insertVariable('{{email}}')">{{email}}</span>
                    <span class="variable-tag" onclick="insertVariable('{{orderNumber}}')">{{orderNumber}}</span>
                    <span class="variable-tag" onclick="insertVariable('{{total}}')">{{total}}</span>
                    <span class="variable-tag" onclick="insertVariable('{{trackingNumber}}')">{{trackingNumber}}</span>
                </div>
            </div>
        </div>

        <!-- Zone centrale -->
        <div class="editor-main">
            <div class="editor-header">
                <div class="editor-title">
                    <i class="fas fa-edit"></i>
                    Éditeur d'Email CrystosJewel
                </div>
                <div class="editor-actions">
                    <a href="/admin/email-management/campaigns" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i>
                        Retour
                    </a>
                    <button class="btn btn-secondary" onclick="saveAsDraft()">
                        <i class="fas fa-save"></i>
                        Brouillon
                    </button>
                    <button class="btn btn-warning" onclick="sendTest()">
                        <i class="fas fa-flask"></i>
                        Test
                    </button>
                    <button class="btn btn-info" onclick="previewEmail()">
                        <i class="fas fa-eye"></i>
                        Aperçu
                    </button>
                    <button class="btn btn-success" onclick="sendCampaign()">
                        <i class="fas fa-paper-plane"></i>
                        Envoyer
                    </button>
                </div>
            </div>

            <div class="preview-area">
                <div class="email-preview" id="emailPreview">
                    <div class="email-header">
                        <div class="email-subject" id="previewSubject">🎉 Découvrez nos nouveautés !</div>
                        <div class="email-preheader" id="previewPreheader">Texte de prévisualisation</div>
                    </div>
                    
                    <div class="email-content" id="emailContent">
                        <div class="drop-zone" data-zone="1"></div>
                        
                        <div class="editable-element" data-type="title" id="element-1">
                            <div class="element-controls">
                                <button class="control-btn" onclick="editElement('element-1')"><i class="fas fa-edit"></i></button>
                                <button class="control-btn" onclick="duplicateElement('element-1')"><i class="fas fa-copy"></i></button>
                                <button class="control-btn" onclick="deleteElement('element-1')"><i class="fas fa-trash"></i></button>
                            </div>
                            <h2 style="color: #d89ab3; margin-bottom: 20px; text-align: center;">Bonjour {{firstName}} !</h2>
                        </div>
                        
                        <div class="drop-zone" data-zone="2"></div>
                        
                        <div class="editable-element" data-type="text" id="element-2">
                            <div class="element-controls">
                                <button class="control-btn" onclick="editElement('element-2')"><i class="fas fa-edit"></i></button>
                                <button class="control-btn" onclick="duplicateElement('element-2')"><i class="fas fa-copy"></i></button>
                                <button class="control-btn" onclick="deleteElement('element-2')"><i class="fas fa-trash"></i></button>
                            </div>
                            <p style="margin-bottom: 15px; line-height: 1.6;">Nous sommes ravis de vous présenter notre nouvelle collection de bijoux exclusifs.</p>
                        </div>
                        
                        <div class="drop-zone" data-zone="3"></div>
                        
                        <div class="editable-element" data-type="button" id="element-3">
                            <div class="element-controls">
                                <button class="control-btn" onclick="editElement('element-3')"><i class="fas fa-edit"></i></button>
                                <button class="control-btn" onclick="duplicateElement('element-3')"><i class="fas fa-copy"></i></button>
                                <button class="control-btn" onclick="deleteElement('element-3')"><i class="fas fa-trash"></i></button>
                            </div>
                            <div style="text-align: center; margin: 30px 0;">
                                <a href="#" style="display: inline-block; background: linear-gradient(135deg, #d89ab3, #b794a8); color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: 600;">
                                    🛍️ Découvrir la collection
                                </a>
                            </div>
                        </div>
                        
                        <div class="drop-zone" data-zone="4"></div>
                    </div>
                    
                    <div class="email-footer">
                        <p>© 2025 CrystosJewel - Tous droits réservés</p>
                        <p style="margin-top: 5px;">
                            <a href="#" style="color: #64748b;">Se désabonner</a> | 
                            <a href="#" style="color: #64748b;">Mettre à jour mes préférences</a>
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sidebar droite -->
        <div class="sidebar-right">
            <div class="sidebar-section">
                <h3>
                    <i class="fas fa-users"></i>
                    Destinataires
                </h3>
                
                <div class="form-group">
                    <label class="form-label">Type de destinataires</label>
                    <select class="form-select" id="recipientType">
                        <option value="all">Tous les clients</option>
                        <option value="newsletter">Abonnés newsletter</option>
                        <option value="vip">Clients VIP</option>
                        <option value="recent">Clients récents</option>
                        <option value="custom">Sélection personnalisée</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Nombre estimé</label>
                    <div style="background: var(--success); color: white; padding: 10px; border-radius: 6px; text-align: center; font-weight: 600;">
                        <i class="fas fa-envelope"></i> <span id="recipientCount">1,247</span> destinataires
                    </div>
                </div>
            </div>

            <div class="sidebar-section">
                <h3>
                    <i class="fas fa-cogs"></i>
                    Paramètres avancés
                </h3>
                
                <div class="form-group">
                    <label class="form-label">Email de réponse</label>
                    <input type="email" class="form-input" id="replyTo" placeholder="reply@crystosjewel.com">
                </div>
                
                <div class="form-group">
                    <label class="form-label">Planification</label>
                    <select class="form-select" id="scheduleType">
                        <option value="now">Envoyer maintenant</option>
                        <option value="schedule">Programmer l'envoi</option>
                    </select>
                </div>
                
                <div class="form-group" id="scheduleDateTime" style="display: none;">
                    <label class="form-label">Date et heure</label>
                    <input type="datetime-local" class="form-input" id="scheduledAt">
                </div>
                
                <div class="form-group">
                    <label class="form-label">Priorité</label>
                    <select class="form-select" id="priority">
                        <option value="normal">Normale</option>
                        <option value="high">Haute</option>
                        <option value="low">Basse</option>
                    </select>
                </div>
            </div>

            <div class="sidebar-section">
                <h3>
                    <i class="fas fa-chart-bar"></i>
                    Statistiques
                </h3>
                
                <div style="background: var(--bg-primary); padding: 15px; border-radius: 6px;">
                    <div style="margin-bottom: 10px;">
                        <strong>Taux d'ouverture moyen:</strong> 24.5%
                    </div>
                    <div style="margin-bottom: 10px;">
                        <strong>Taux de clic moyen:</strong> 3.8%
                    </div>
                    <div>
                        <strong>Dernière campagne:</strong> 15 jan 2025
                    </div>
                </div>
            </div>

            <div class="sidebar-section">
                <h3>
                    <i class="fas fa-info-circle"></i>
                    Actions rapides
                </h3>
                
                <div style="display: flex; flex-direction: column; gap: 10px;">
                    <button class="btn btn-info" onclick="importTemplate()">
                        <i class="fas fa-download"></i>
                        Importer template
                    </button>
                    <button class="btn btn-warning" onclick="exportHTML()">
                        <i class="fas fa-code"></i>
                        Exporter HTML
                    </button>
                    <button class="btn btn-secondary" onclick="resetEditor()">
                        <i class="fas fa-undo"></i>
                        Recommencer
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // ========================================
        // VARIABLES GLOBALES
        // ========================================
        let draggedElement = null;
        let selectedElement = null;
        let editPanel = null;
        let elementCounter = 4; // Start après les éléments existants
        let isDragging = false;

        // Données simulées (remplacez par vos vraies données)
        const mockCustomers = [
            { id: 1, name: "Marie Dupont", email: "marie@example.com", type: "vip", newsletter: true },
            { id: 2, name: "Jean Martin", email: "jean@example.com", type: "regular", newsletter: true },
            { id: 3, name: "Sophie Bernard", email: "sophie@example.com", type: "vip", newsletter: false }
        ];

        // ========================================
        // INITIALISATION
        // ========================================
        document.addEventListener('DOMContentLoaded', function() {
            console.log('✏️ Éditeur d\'emails CrystosJewel initialisé');
            setupEventListeners();
            setupDragAndDrop();
            updatePreview();
            makeElementsEditable();
            updateRecipientCount();
        });

        function setupEventListeners() {
            // Mise à jour du preview en temps réel
            document.getElementById('emailSubject').addEventListener('input', updatePreview);
            document.getElementById('emailPreheader').addEventListener('input', updatePreview);
            
            // Gestion de la planification
            document.getElementById('scheduleType').addEventListener('change', function() {
                const scheduleDateTime = document.getElementById('scheduleDateTime');
                if (this.value === 'schedule') {
                    scheduleDateTime.style.display = 'block';
                    document.getElementById('scheduledAt').required = true;
                } else {
                    scheduleDateTime.style.display = 'none';
                    document.getElementById('scheduledAt').required = false;
                }
            });

            // Gestion du type de destinataires
            document.getElementById('recipientType').addEventListener('change', updateRecipientCount);

            // Raccourcis clavier
            document.addEventListener('keydown', function(e) {
                if (e.ctrlKey || e.metaKey) {
                    switch(e.key) {
                        case 's':
                            e.preventDefault();
                            saveAsDraft();
                            break;
                        case 'Enter':
                            e.preventDefault();
                            sendCampaign();
                            break;
                        case 't':
                            e.preventDefault();
                            sendTest();
                            break;
                        case 'p':
                            e.preventDefault();
                            previewEmail();
                            break;
                    }
                }
                
                if (e.key === 'Escape') {
                    closeEditPanel();
                    deselectAllElements();
                }

                if (e.key === 'Delete' && selectedElement) {
                    deleteElement(selectedElement.id);
                }
            });

            // Clic en dehors pour déselectionner
            document.addEventListener('click', function(e) {
                if (!e.target.closest('.editable-element') && !e.target.closest('.edit-panel')) {
                    deselectAllElements();
                    closeEditPanel();
                }
            });
        }

        // ========================================
        // DRAG & DROP SYSTEM
        // ========================================
        function setupDragAndDrop() {
            // Configuration des éléments draggables
            document.querySelectorAll('.block-item').forEach(item => {
                item.addEventListener('dragstart', handleDragStart);
                item.addEventListener('dragend', handleDragEnd);
            });

            // Configuration des zones de drop
            document.querySelectorAll('.drop-zone').forEach(zone => {
                zone.addEventListener('dragover', handleDragOver);
                zone.addEventListener('dragenter', handleDragEnter);
                zone.addEventListener('dragleave', handleDragLeave);
                zone.addEventListener('drop', handleDrop);
            });

            // Zone de drop principal (email content)
            const emailContent = document.getElementById('emailContent');
            emailContent.addEventListener('dragover', handleDragOver);
            emailContent.addEventListener('drop', handleDropInContent);
        }

        function handleDragStart(e) {
            draggedElement = this;
            isDragging = true;
            this.classList.add('dragging');
            e.dataTransfer.setData('text/plain', this.dataset.block);
            e.dataTransfer.effectAllowed = 'copy';
            
            // Ajouter une image de drag personnalisée
            const dragImage = this.cloneNode(true);
            dragImage.style.transform = 'rotate(-5deg)';
            dragImage.style.opacity = '0.8';
            document.body.appendChild(dragImage);
            e.dataTransfer.setDragImage(dragImage, 0, 0);
            
            setTimeout(() => document.body.removeChild(dragImage), 0);
        }

        function handleDragEnd(e) {
            isDragging = false;
            this.classList.remove('dragging');
            
            // Nettoyer les zones de drop
            document.querySelectorAll('.drop-zone').forEach(zone => {
                zone.classList.remove('drag-over');
            });
        }

        function handleDragOver(e) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'copy';
        }

        function handleDragEnter(e) {
            e.preventDefault();
            this.classList.add('drag-over');
        }

        function handleDragLeave(e) {
            if (!this.contains(e.relatedTarget)) {
                this.classList.remove('drag-over');
            }
        }

        function handleDrop(e) {
            e.preventDefault();
            this.classList.remove('drag-over');
            
            const blockType = e.dataTransfer.getData('text/plain');
            insertElementAfterZone(this, blockType);
        }

        function handleDropInContent(e) {
            if (!isDragging) return;
            
            e.preventDefault();
            const blockType = e.dataTransfer.getData('text/plain');
            
            // Trouver la zone de drop la plus proche
            const zones = Array.from(document.querySelectorAll('.drop-zone'));
            const rect = e.target.getBoundingClientRect();
            const y = e.clientY;
            
            let closestZone = zones[zones.length - 1]; // Par défaut, la dernière zone
            let closestDistance = Infinity;
            
            zones.forEach(zone => {
                const zoneRect = zone.getBoundingClientRect();
                const distance = Math.abs(zoneRect.top - y);
                if (distance < closestDistance) {
                    closestDistance = distance;
                    closestZone = zone;
                }
            });
            
            insertElementAfterZone(closestZone, blockType);
        }

        // ========================================
        // CRÉATION D'ÉLÉMENTS
        // ========================================
        function insertElementAfterZone(zone, blockType) {
            const newElement = createElementFromBlock(blockType);
            const newZone = createDropZone();
            
            // Insérer après la zone
            zone.parentNode.insertBefore(newElement, zone.nextSibling);
            zone.parentNode.insertBefore(newZone, newElement.nextSibling);
            
            // Sélectionner le nouvel élément
            setTimeout(() => {
                selectElement(newElement);
                showNotification(`✅ ${getBlockDisplayName(blockType)} ajouté`, 'success');
            }, 100);
        }

        function createElementFromBlock(blockType) {
            const elementId = `element-${++elementCounter}`;
            const element = document.createElement('div');
            element.className = 'editable-element';
            element.setAttribute('data-type', blockType);
            element.id = elementId;
            
            // Contrôles de l'élément
            element.innerHTML = `
                <div class="element-controls">
                    <button class="control-btn" onclick="editElement('${elementId}')"><i class="fas fa-edit"></i></button>
                    <button class="control-btn" onclick="duplicateElement('${elementId}')"><i class="fas fa-copy"></i></button>
                    <button class="control-btn" onclick="deleteElement('${elementId}')"><i class="fas fa-trash"></i></button>
                </div>
                ${getElementContent(blockType)}
            `;
            
            // Ajouter les event listeners
            element.addEventListener('click', function(e) {
                e.stopPropagation();
                selectElement(this);
            });
            
            return element;
        }

        function getElementContent(blockType) {
            const templates = {
                title: '<h2 style="color: #d89ab3; margin: 20px 0; text-align: center;" contenteditable="true">Votre titre ici</h2>',
                text: '<p style="margin: 15px 0; line-height: 1.6;" contenteditable="true">Votre texte ici. Vous pouvez écrire plusieurs lignes et utiliser des variables comme {{firstName}}.</p>',
                image: `<div style="text-align: center; margin: 20px 0;">
                    <div class="resizable-image">
                        <img src="https://via.placeholder.com/400x200/d89ab3/ffffff?text=Votre+Image" 
                             alt="Image" style="max-width: 100%; height: auto; border-radius: 8px;" 
                             onclick="changeImage(this)">
                        <div class="resize-handle" onmousedown="startResize(event, this.previousElementSibling)"></div>
                    </div>
                </div>`,
                button: `<div style="text-align: center; margin: 30px 0;">
                    <a href="#" style="display: inline-block; background: linear-gradient(135deg, #d89ab3, #b794a8); color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: 600;" 
                       contenteditable="true" onclick="editLink(this)">
                        Votre bouton
                    </a>
                </div>`,
                divider: '<hr style="margin: 30px 0; border: none; border-top: 2px solid #e2e8f0; border-radius: 1px;">',
                products: `<div class="products-grid">
                    <div class="product-card">
                        <img src="https://via.placeholder.com/150x120/d89ab3/ffffff?text=Produit+1" alt="Produit 1" class="product-image">
                        <div class="product-info">
                            <div class="product-name">Bague Élégance</div>
                            <div class="product-price">89€</div>
                        </div>
                    </div>
                    <div class="product-card">
                        <img src="https://via.placeholder.com/150x120/d89ab3/ffffff?text=Produit+2" alt="Produit 2" class="product-image">
                        <div class="product-info">
                            <div class="product-name">Collier Prestige</div>
                            <div class="product-price">129€</div>
                        </div>
                    </div>
                </div>`,
                columns: `<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;">
                    <div style="padding: 20px; background: #f8fafc; border-radius: 8px;" contenteditable="true">
                        Colonne gauche - Votre contenu ici
                    </div>
                    <div style="padding: 20px; background: #f8fafc; border-radius: 8px;" contenteditable="true">
                        Colonne droite - Votre contenu ici
                    </div>
                </div>`,
                spacer: '<div style="height: 40px; margin: 20px 0; background: linear-gradient(90deg, transparent, #e2e8f0, transparent);"></div>'
            };
            
            return templates[blockType] || templates.text;
        }

        function getBlockDisplayName(blockType) {
            const names = {
                title: 'Titre',
                text: 'Texte', 
                image: 'Image',
                button: 'Bouton',
                divider: 'Séparateur',
                products: 'Grille de produits',
                columns: 'Colonnes',
                spacer: 'Espacement'
            };
            return names[blockType] || 'Élément';
        }

        function createDropZone() {
            const zone = document.createElement('div');
            zone.className = 'drop-zone';
            zone.setAttribute('data-zone', elementCounter);
            
            // Ajouter les event listeners
            zone.addEventListener('dragover', handleDragOver);
            zone.addEventListener('dragenter', handleDragEnter);
            zone.addEventListener('dragleave', handleDragLeave);
            zone.addEventListener('drop', handleDrop);
            
            return zone;
        }

        // ========================================
        // GESTION DES ÉLÉMENTS
        // ========================================
        function selectElement(element) {
            deselectAllElements();
            selectedElement = element;
            element.classList.add('selected');
            showEditPanel(element);
        }

        function deselectAllElements() {
            document.querySelectorAll('.editable-element').forEach(el => {
                el.classList.remove('selected');
            });
            selectedElement = null;
        }

        function makeElementsEditable() {
            document.querySelectorAll('.editable-element').forEach(element => {
                element.addEventListener('click', function(e) {
                    e.stopPropagation();
                    selectElement(this);
                });
            });
        }

        function editElement(elementId) {
            const element = document.getElementById(elementId);
            if (element) {
                selectElement(element);
            }
        }

        function duplicateElement(elementId) {
            const element = document.getElementById(elementId);
            if (!element) return;
            
            const clone = element.cloneNode(true);
            clone.id = `element-${++elementCounter}`;
            
            // Mettre à jour les onclick dans les contrôles
            const controls = clone.querySelectorAll('.control-btn');
            controls[0].setAttribute('onclick', `editElement('${clone.id}')`);
            controls[1].setAttribute('onclick', `duplicateElement('${clone.id}')`);
            controls[2].setAttribute('onclick', `deleteElement('${clone.id}')`);
            
            // Créer une nouvelle zone de drop
            const newZone = createDropZone();
            
            // Insérer après l'élément original
            const nextZone = element.nextElementSibling;
            if (nextZone && nextZone.classList.contains('drop-zone')) {
                nextZone.parentNode.insertBefore(clone, nextZone.nextSibling);
                nextZone.parentNode.insertBefore(newZone, clone.nextSibling);
            }
            
            // Ajouter les event listeners
            clone.addEventListener('click', function(e) {
                e.stopPropagation();
                selectElement(this);
            });
            
            selectElement(clone);
            showNotification('✅ Élément dupliqué', 'success');
        }

        function deleteElement(elementId) {
            const element = document.getElementById(elementId);
            if (!element) return;
            
            if (confirm('Êtes-vous sûr de vouloir supprimer cet élément ?')) {
                // Supprimer aussi la zone de drop suivante si elle existe
                const nextElement = element.nextElementSibling;
                if (nextElement && nextElement.classList.contains('drop-zone')) {
                    nextElement.remove();
                }
                
                element.remove();
                closeEditPanel();
                showNotification('✅ Élément supprimé', 'success');
            }
        }

        // ========================================
        // PANNEAU D'ÉDITION
        // ========================================
        function showEditPanel(element) {
            closeEditPanel();
            
            editPanel = document.createElement('div');
            editPanel.className = 'edit-panel';
            
            const elementType = element.getAttribute('data-type');
            let panelContent = `
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; border-bottom: 2px solid #f1f5f9; padding-bottom: 15px;">
                    <h3 style="margin: 0; color: #d89ab3; font-size: 18px;">
                        <i class="fas fa-edit"></i> Éditer ${getBlockDisplayName(elementType)}
                    </h3>
                    <button onclick="closeEditPanel()" style="background: none; border: none; font-size: 20px; cursor: pointer; color: #64748b;">×</button>
                </div>
            `;
            
            panelContent += createAdvancedEditor(element, elementType);
            
            editPanel.innerHTML = panelContent;
            document.body.appendChild(editPanel);
        }

        function createAdvancedEditor(element, type) {
            let editor = `
                <div class="form-group">
                    <label class="form-label">Contenu</label>
                    <textarea id="elementContent" style="width: 100%; height: 80px; padding: 10px; border: 1px solid #e2e8f0; border-radius: 6px; resize: vertical;" 
                              onchange="updateElementContent(this.value)">${getElementText(element)}</textarea>
                </div>
            `;
            
            // Éditeur spécifique selon le type
            switch(type) {
                case 'title':
                    editor += `
                        <div class="form-group">
                            <label class="form-label">Taille du titre</label>
                            <select id="titleSize" onchange="updateTitleSize(this.value)" style="width: 100%; padding: 8px; border: 1px solid #e2e8f0; border-radius: 4px;">
                                <option value="h1">Très grand (H1)</option>
                                <option value="h2" selected>Grand (H2)</option>
                                <option value="h3">Moyen (H3)</option>
                                <option value="h4">Petit (H4)</option>
                            </select>
                        </div>
                    `;
                    break;
                    
                case 'button':
                    editor += `
                        <div class="form-group">
                            <label class="form-label">Lien du bouton</label>
                            <input type="url" id="buttonLink" placeholder="https://..." 
                                   style="width: 100%; padding: 8px; border: 1px solid #e2e8f0; border-radius: 4px;"
                                   onchange="updateButtonLink(this.value)">
                        </div>
                    `;
                    break;
                    
                case 'image':
                    editor += `
                        <div class="form-group">
                            <label class="form-label">URL de l'image</label>
                            <input type="url" id="imageUrl" placeholder="https://..." 
                                   style="width: 100%; padding: 8px; border: 1px solid #e2e8f0; border-radius: 4px;"
                                   onchange="updateImageUrl(this.value)">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Largeur (%)</label>
                            <input type="range" id="imageWidth" min="20" max="100" value="100" 
                                   style="width: 100%;" onchange="updateImageWidth(this.value)">
                            <span id="widthValue">100%</span>
                        </div>
                    `;
                    break;
            }
            
            // Contrôles de style communs
            editor += `
                <div class="form-group">
                    <label class="form-label">Couleur du texte</label>
                    <input type="color" id="textColor" value="#1e293b" 
                           style="width: 100%; height: 40px; border: 1px solid #e2e8f0; border-radius: 6px;"
                           onchange="updateElementStyle('color', this.value)">
                </div>
                
                <div class="form-group">
                    <label class="form-label">Alignement</label>
                    <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 5px;">
                        <button onclick="updateElementStyle('textAlign', 'left')" style="padding: 8px; border: 1px solid #e2e8f0; border-radius: 4px; background: white;">
                            <i class="fas fa-align-left"></i>
                        </button>
                        <button onclick="updateElementStyle('textAlign', 'center')" style="padding: 8px; border: 1px solid #e2e8f0; border-radius: 4px; background: white;">
                            <i class="fas fa-align-center"></i>
                        </button>
                        <button onclick="updateElementStyle('textAlign', 'right')" style="padding: 8px; border: 1px solid #e2e8f0; border-radius: 4px; background: white;">
                            <i class="fas fa-align-right"></i>
                        </button>
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Espacement</label>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                        <div>
                            <label style="font-size: 12px;">Haut/Bas</label>
                            <input type="range" id="marginVertical" min="0" max="50" value="20" 
                                   onchange="updateMargins(this.value, null)" style="width: 100%;">
                        </div>
                        <div>
                            <label style="font-size: 12px;">Gauche/Droite</label>
                            <input type="range" id="marginHorizontal" min="0" max="50" value="0" 
                                   onchange="updateMargins(null, this.value)" style="width: 100%;">
                        </div>
                    </div>
                </div>
                
                <div style="margin-top: 20px; padding-top: 15px; border-top: 1px solid #e2e8f0;">
                    <button onclick="deleteElement('${selectedElement.id}')" 
                            style="background: #ef4444; color: white; border: none; padding: 10px 20px; border-radius: 6px; cursor: pointer; width: 100%;">
                        <i class="fas fa-trash"></i> Supprimer l'élément
                    </button>
                </div>
            `;
            
            return editor;
        }

        function getElementText(element) {
            const textElement = element.querySelector('[contenteditable="true"]');
            return textElement ? textElement.textContent : element.textContent;
        }

        function updateElementContent(value) {
            if (!selectedElement) return;
            
            const textElement = selectedElement.querySelector('[contenteditable="true"]');
            if (textElement) {
                textElement.textContent = value;
            }
        }

        function updateElementStyle(property, value) {
            if (!selectedElement) return;
            
            const targetElement = selectedElement.querySelector('[contenteditable="true"]') || selectedElement.firstElementChild;
            if (targetElement && targetElement.style) {
                targetElement.style[property] = value;
            }
        }

        function updateTitleSize(size) {
            if (!selectedElement) return;
            
            const titleElement = selectedElement.querySelector('h1, h2, h3, h4, h5, h6');
            if (titleElement) {
                const newTitle = document.createElement(size);
                newTitle.innerHTML = titleElement.innerHTML;
                newTitle.style.cssText = titleElement.style.cssText;
                newTitle.setAttribute('contenteditable', 'true');
                titleElement.parentNode.replaceChild(newTitle, titleElement);
            }
        }

        function updateButtonLink(url) {
            if (!selectedElement) return;
            
            const linkElement = selectedElement.querySelector('a');
            if (linkElement) {
                linkElement.href = url;
            }
        }

        function updateImageUrl(url) {
            if (!selectedElement) return;
            
            const imgElement = selectedElement.querySelector('img');
            if (imgElement) {
                imgElement.src = url;
            }
        }

        function updateImageWidth(width) {
            if (!selectedElement) return;
            
            const imgElement = selectedElement.querySelector('img');
            if (imgElement) {
                imgElement.style.width = width + '%';
            }
            
            document.getElementById('widthValue').textContent = width + '%';
        }

        function updateMargins(vertical, horizontal) {
            if (!selectedElement) return;
            
            if (vertical !== null) {
                selectedElement.style.marginTop = vertical + 'px';
                selectedElement.style.marginBottom = vertical + 'px';
            }
            
            if (horizontal !== null) {
                selectedElement.style.marginLeft = horizontal + 'px';
                selectedElement.style.marginRight = horizontal + 'px';
            }
        }

        function closeEditPanel() {
            if (editPanel) {
                editPanel.remove();
                editPanel = null;
            }
        }

        // ========================================
        // FONCTIONS PRINCIPALES
        // ========================================
        function updatePreview() {
            const subject = document.getElementById('emailSubject').value || '🎉 Découvrez nos nouveautés !';
            const preheader = document.getElementById('emailPreheader').value || 'Texte de prévisualisation';
            
            document.getElementById('previewSubject').textContent = subject;
            document.getElementById('previewPreheader').textContent = preheader;
        }

        function updateRecipientCount() {
            const type = document.getElementById('recipientType').value;
            const counts = {
                all: 1247,
                newsletter: 892,
                vip: 156,
                recent: 234,
                custom: 0
            };
            
            document.getElementById('recipientCount').textContent = counts[type] || 0;
        }

        function insertVariable(variable) {
            // Insérer une variable dans l'élément sélectionné
            if (selectedElement) {
                const textElement = selectedElement.querySelector('[contenteditable="true"]');
                if (textElement) {
                    const selection = window.getSelection();
                    if (selection.rangeCount > 0) {
                        const range = selection.getRangeAt(0);
                        range.deleteContents();
                        range.insertNode(document.createTextNode(variable));
                        range.collapse(false);
                    } else {
                        textElement.textContent += variable;
                    }
                }
            } else {
                // Si aucun élément sélectionné, insérer dans le sujet
                const subjectInput = document.getElementById('emailSubject');
                const cursorPos = subjectInput.selectionStart;
                const textBefore = subjectInput.value.substring(0, cursorPos);
                const textAfter = subjectInput.value.substring(cursorPos);
                subjectInput.value = textBefore + variable + textAfter;
                subjectInput.focus();
                subjectInput.setSelectionRange(cursorPos + variable.length, cursorPos + variable.length);
            }
        }

        // ========================================
        // FONCTIONS D'ENVOI D'EMAIL
        // ========================================
        async function saveAsDraft() {
            const campaignData = getCampaignData();
            campaignData.status = 'draft';
            
            try {
                showNotification('💾 Sauvegarde en cours...', 'info');
                
                const response = await fetch('/admin/email-management/campaigns/save-draft', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(campaignData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showNotification('✅ Brouillon sauvegardé avec succès', 'success');
                } else {
                    showNotification(`❌ Erreur: ${data.message}`, 'error');
                }
            } catch (error) {
                console.error('Erreur sauvegarde:', error);
                showNotification('❌ Erreur lors de la sauvegarde', 'error');
            }
        }

        async function sendTest() {
            const email = prompt('Adresse email pour le test :');
            if (!email || !validateEmail(email)) {
                showNotification('❌ Adresse email invalide', 'error');
                return;
            }
            
            const campaignData = getCampaignData();
            campaignData.testEmail = email;
            
            try {
                showNotification('📤 Envoi du test en cours...', 'info');
                
                const response = await fetch('/admin/email-management/campaigns/send-test', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(campaignData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showNotification(`✅ Test envoyé à ${email}`, 'success');
                } else {
                    showNotification(`❌ Erreur: ${data.message}`, 'error');
                }
            } catch (error) {
                console.error('Erreur test:', error);
                showNotification('❌ Erreur lors de l\'envoi du test', 'error');
            }
        }

        function previewEmail() {
            const campaignData = getCampaignData();
            
            const modal = document.createElement('div');
            modal.id = 'previewModal';
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                background: rgba(0,0,0,0.8); z-index: 10000; padding: 20px;
                display: flex; align-items: center; justify-content: center;
                overflow-y: auto;
            `;
            
            modal.innerHTML = `
                <div style="background: white; border-radius: 12px; max-width: 900px; margin: 0 auto; max-height: 90vh; overflow-y: auto; width: 100%;">
                    <div style="padding: 25px; border-bottom: 1px solid #e2e8f0; display: flex; justify-content: space-between; align-items: center; background: linear-gradient(135deg, #d89ab3, #b794a8); color: white; border-radius: 12px 12px 0 0;">
                        <h3 style="margin: 0; font-size: 1.5rem;">
                            <i class="fas fa-eye"></i> Aperçu de l'email
                        </h3>
                        <button onclick="closePreview()" style="background: rgba(255,255,255,0.2); border: none; color: white; font-size: 24px; cursor: pointer; border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center;">×</button>
                    </div>
                    <div style="padding: 20px; background: #f8fafc;">
                        <div style="background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
                            <div style="background: #f1f5f9; padding: 15px; border-bottom: 1px solid #e2e8f0; font-size: 14px; color: #64748b;">
                                <div style="margin-bottom: 8px;"><strong>De:</strong> ${campaignData.senderName} &lt;${campaignData.senderEmail || 'contact@crystosjewel.com'}&gt;</div>
                                <div style="margin-bottom: 8px;"><strong>Objet:</strong> ${campaignData.subject}</div>
                                <div><strong>Aperçu:</strong> ${campaignData.preheader}</div>
                            </div>
                            <div style="padding: 0;">
                                ${document.getElementById('emailPreview').outerHTML}
                            </div>
                        </div>
                        <div style="margin-top: 20px; text-align: center; color: #64748b; font-size: 14px;">
                            <p><strong>Note:</strong> Les variables comme {{firstName}} seront remplacées par les vraies données lors de l'envoi</p>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            // Fermer avec Escape
            const handleEscape = (e) => {
                if (e.key === 'Escape') {
                    closePreview();
                    document.removeEventListener('keydown', handleEscape);
                }
            };
            document.addEventListener('keydown', handleEscape);
        }

        function closePreview() {
            const modal = document.getElementById('previewModal');
            if (modal) {
                modal.remove();
            }
        }

        async function sendCampaign() {
            const campaignData = getCampaignData();
            
            // Validation
            if (!campaignData.subject.trim()) {
                showNotification('❌ Le sujet de l\'email est requis', 'error');
                return;
            }
            
            if (!campaignData.content.trim()) {
                showNotification('❌ Le contenu de l\'email ne peut pas être vide', 'error');
                return;
            }
            
            // Confirmation
            const recipientCount = document.getElementById('recipientCount').textContent;
            if (!confirm(`🚀 Voulez-vous vraiment envoyer cette campagne à ${recipientCount} destinataires ?`)) {
                return;
            }
            
            try {
                showNotification('🚀 Envoi de la campagne en cours...', 'info');
                
                const response = await fetch('/admin/email-management/campaigns/send', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(campaignData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showNotification(`✅ Campagne envoyée avec succès ! (${data.sentCount || recipientCount} emails)`, 'success');
                    
                    // Redirection après quelques secondes
                    setTimeout(() => {
                        window.location.href = '/admin/email-management/campaigns';
                    }, 3000);
                } else {
                    showNotification(`❌ Erreur: ${data.message}`, 'error');
                }
            } catch (error) {
                console.error('Erreur envoi campagne:', error);
                showNotification('❌ Erreur lors de l\'envoi de la campagne', 'error');
            }
        }

        function getCampaignData() {
            return {
                name: document.getElementById('campaignName').value || 'Campagne sans nom',
                subject: document.getElementById('emailSubject').value,
                preheader: document.getElementById('emailPreheader').value,
                content: document.getElementById('emailContent').innerHTML,
                senderName: document.getElementById('senderName').value,
                senderEmail: document.getElementById('replyTo').value,
                recipientType: document.getElementById('recipientType').value,
                scheduleType: document.getElementById('scheduleType').value,
                scheduledAt: document.getElementById('scheduledAt').value,
                priority: document.getElementById('priority').value
            };
        }

        // ========================================
        // FONCTIONS UTILITAIRES
        // ========================================
        function validateEmail(email) {
            const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(email);
        }

        function showNotification(message, type = 'info') {
            // Supprimer les notifications existantes
            const existing = document.querySelectorAll('.notification');
            existing.forEach(notif => notif.remove());

            const notification = document.createElement('div');
            notification.className = 'notification';
            
            const bgColors = {
                success: '#10b981',
                error: '#ef4444',
                warning: '#f59e0b',
                info: '#3b82f6'
            };
            
            notification.style.background = bgColors[type] || bgColors.info;
            notification.innerHTML = `
                <div style="display: flex; align-items: center; justify-content: space-between; gap: 15px;">
                    <span style="flex: 1;">${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" 
                            style="background: none; border: none; color: white; cursor: pointer; font-size: 18px; padding: 0; width: 20px; height: 20px; display: flex; align-items: center; justify-content: center;">×</button>
                </div>
            `;

            document.body.appendChild(notification);

            // Auto-suppression après 5 secondes
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.style.animation = 'slideOut 0.3s ease forwards';
                    setTimeout(() => {
                        if (notification.parentNode) {
                            notification.remove();
                        }
                    }, 300);
                }
            }, 5000);
        }

        // ========================================
        // FONCTIONS AVANCÉES
        // ========================================
        function importTemplate() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.html,.htm';
            input.onchange = function(e) {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const content = e.target.result;
                        // Extraire le contenu du body
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(content, 'text/html');
                        const bodyContent = doc.body.innerHTML;
                        
                        if (confirm('Voulez-vous remplacer le contenu actuel par ce template ?')) {
                            document.getElementById('emailContent').innerHTML = bodyContent;
                            makeElementsEditable();
                            showNotification('✅ Template importé avec succès', 'success');
                        }
                    };
                    reader.readAsText(file);
                }
            };
            input.click();
        }

        function exportHTML() {
            const campaignData = getCampaignData();
            const fullHTML = `<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${campaignData.subject}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .email-container { max-width: 600px; margin: 0 auto; background: white; border-radius: 8px; overflow: hidden; }
    </style>
</head>
<body>
    <div class="email-container">
        ${document.getElementById('emailPreview').innerHTML}
    </div>
</body>
</html>`;

            const blob = new Blob([fullHTML], { type: 'text/html' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `${campaignData.name || 'email-template'}.html`;
            a.click();
            
            URL.revokeObjectURL(url);
            showNotification('✅ HTML exporté avec succès', 'success');
        }

        function resetEditor() {
            if (confirm('Voulez-vous vraiment recommencer ? Tout le contenu sera perdu.')) {
                // Reset du formulaire
                document.getElementById('campaignForm').reset();
                document.getElementById('senderName').value = 'CrystosJewel';
                
                // Reset du contenu
                document.getElementById('emailContent').innerHTML = `
                    <div class="drop-zone" data-zone="1"></div>
                    <div class="editable-element" data-type="title" id="element-1">
                        <div class="element-controls">
                            <button class="control-btn" onclick="editElement('element-1')"><i class="fas fa-edit"></i></button>
                            <button class="control-btn" onclick="duplicateElement('element-1')"><i class="fas fa-copy"></i></button>
                            <button class="control-btn" onclick="deleteElement('element-1')"><i class="fas fa-trash"></i></button>
                        </div>
                        <h2 style="color: #d89ab3; margin-bottom: 20px; text-align: center;" contenteditable="true">Bonjour {{firstName}} !</h2>
                    </div>
                    <div class="drop-zone" data-zone="2"></div>
                `;
                
                // Reset des variables
                elementCounter = 1;
                selectedElement = null;
                closeEditPanel();
                
                // Réinitialiser les événements
                makeElementsEditable();
                updatePreview();
                
                showNotification('✅ Éditeur réinitialisé', 'success');
            }
        }

        // ========================================
        // GESTION DES IMAGES
        // ========================================
        function changeImage(imgElement) {
            const url = prompt('Nouvelle URL de l\'image:', imgElement.src);
            if (url && url.trim()) {
                imgElement.src = url.trim();
                showNotification('✅ Image mise à jour', 'success');
            }
        }

        function editLink(linkElement) {
            const newUrl = prompt('URL du lien:', linkElement.href);
            const newText = prompt('Texte du bouton:', linkElement.textContent);
            
            if (newUrl && newUrl.trim()) {
                linkElement.href = newUrl.trim();
            }
            
            if (newText && newText.trim()) {
                linkElement.textContent = newText.trim();
            }
            
            showNotification('✅ Bouton mis à jour', 'success');
        }

        // Redimensionnement d'images
        let isResizing = false;
        let currentImg = null;

        function startResize(e, imgElement) {
            e.preventDefault();
            isResizing = true;
            currentImg = imgElement;
            
            document.addEventListener('mousemove', handleResize);
            document.addEventListener('mouseup', stopResize);
            
            document.body.style.cursor = 'se-resize';
        }

        function handleResize(e) {
            if (!isResizing || !currentImg) return;
            
            const rect = currentImg.getBoundingClientRect();
            const newWidth = e.clientX - rect.left;
            
            if (newWidth > 50 && newWidth < 600) {
                currentImg.style.width = newWidth + 'px';
                currentImg.style.height = 'auto';
            }
        }

        function stopResize() {
            isResizing = false;
            currentImg = null;
            document.removeEventListener('mousemove', handleResize);
            document.removeEventListener('mouseup', stopResize);
            document.body.style.cursor = 'default';
        }

        // ========================================
        // FINALISATION
        // ========================================
        console.log('✅ Éditeur d\'emails CrystosJewel entièrement initialisé');
        console.log('🎯 Fonctionnalités disponibles:');
        console.log('   • Drag & Drop des blocs de contenu');
        console.log('   • Édition en temps réel avec panneau latéral');
        console.log('   • Redimensionnement d\'images par glisser');
        console.log('   • Système complet d\'envoi d\'emails');
        console.log('   • Import/Export de templates HTML');
        console.log('   • Aperçu responsive avec preview modal');
        console.log('🎯 Raccourcis clavier:');
        console.log('   Ctrl+S : Sauvegarder brouillon');
        console.log('   Ctrl+Enter : Envoyer campagne');
        console.log('   Ctrl+T : Envoyer test');
        console.log('   Ctrl+P : Prévisualiser');
        console.log('   Échap : Fermer panneau d\'édition');
        console.log('   Suppr : Supprimer élément sélectionné');
    </script>
</body>
</html>