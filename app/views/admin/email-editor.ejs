<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‚úèÔ∏è <%= title %> - CrystosJewel</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/style.css">
    
    <style>
        :root {
            --primary: #d89ab3;
            --primary-dark: #b794a8;
            --secondary: #8b5cf6;
            --success: #10b981;
            --warning: #f59e0b;
            --danger: #ef4444;
            --info: #3b82f6;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --bg-primary: #f8fafc;
            --bg-secondary: #ffffff;
            --border: #e2e8f0;
            --shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            --radius: 8px;
        }

        * { 
            margin: 0; 
            padding: 0; 
            box-sizing: border-box; 
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: var(--bg-primary);
            color: var(--text-primary);
            height: 100vh;
            overflow: hidden;
        }

        .editor-container {
            display: grid;
            grid-template-columns: 300px 1fr 300px;
            height: 100vh;
        }

        .sidebar-left, .sidebar-right {
            background: var(--bg-secondary);
            border-right: 1px solid var(--border);
            padding: 20px;
            overflow-y: auto;
        }

        .sidebar-right {
            border-left: 1px solid var(--border);
            border-right: none;
        }

        .editor-main {
            display: flex;
            flex-direction: column;
            background: #f1f5f9;
        }

        .editor-header {
            background: var(--bg-secondary);
            border-bottom: 1px solid var(--border);
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 15px;
            position: relative;
        }

        .editor-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--text-primary);
            flex: 1;
        }

        .editor-actions {
            display: flex;
            gap: 10px;
        }

        .toolbar {
            background: var(--bg-secondary);
            border-bottom: 1px solid var(--border);
            padding: 10px 20px;
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
            min-height: 60px;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .toolbar-group {
            display: flex;
            gap: 5px;
            align-items: center;
            padding: 5px 10px;
            border-radius: var(--radius);
            background: var(--bg-primary);
            border: 1px solid var(--border);
        }

        .toolbar-btn {
            padding: 6px 8px;
            border: none;
            border-radius: 4px;
            background: transparent;
            cursor: pointer;
            transition: all 0.2s ease;
            color: var(--text-primary);
            font-size: 14px;
            min-width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .toolbar-btn:hover {
            background: var(--primary);
            color: white;
        }

        .toolbar-btn.active {
            background: var(--primary);
            color: white;
        }

        .toolbar-select {
            padding: 4px 8px;
            border: 1px solid var(--border);
            border-radius: 4px;
            background: white;
            font-size: 12px;
            min-width: 80px;
        }

        .color-picker {
            width: 32px;
            height: 32px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            background: transparent;
        }

        .preview-area {
            flex: 1;
            display: flex;
            overflow: hidden;
        }

        .editor-wrapper {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: white;
            margin: 20px;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            border: 1px solid var(--border);
            overflow: hidden;
        }

        .preview-controls {
            background: var(--bg-primary);
            padding: 10px 15px;
            border-bottom: 1px solid var(--border);
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .preview-mode {
            display: flex;
            gap: 5px;
        }

        .preview-btn {
            padding: 6px 12px;
            border: 1px solid var(--border);
            border-radius: 4px;
            background: white;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.2s ease;
        }

        .preview-btn.active {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .email-preview {
            flex: 1;
            background: white;
            overflow-y: auto;
            transition: all 0.3s ease;
            max-width: 600px;
            margin: 0 auto;
            width: 100%;
        }

        .email-preview.mobile {
            max-width: 390px; /* iPhone 14 width */
            border-left: 1px solid var(--border);
            border-right: 1px solid var(--border);
        }

        .content-editable {
            padding: 20px !important;
            min-height: 500px;
            max-height: calc(100vh - 400px);
            overflow-y: auto;
            line-height: 1.6;
            outline: none;
            border: none;
            font-family: inherit;
            font-size: 14px;
        }

        .content-editable:focus {
            outline: 2px solid var(--primary);
            outline-offset: -2px;
        }

        /* ===== IMAGES REDIMENSIONNABLES ===== */
        .resizable-image {
            position: relative;
            display: inline-block;
            max-width: 300px;
            margin: 10px 5px;
            width: auto;
        }

        .resizable-image img {
            display: block;
            width: 100%;
            height: auto;
            border-radius: 8px;
            max-width: 300px;
        }

        .resizable-image:hover .resize-handles {
            opacity: 1;
        }

        .resize-handles {
            position: absolute;
            inset: 0;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.2s ease;
        }

        .resize-handle {
            position: absolute;
            width: 12px;
            height: 12px;
            background: var(--primary);
            border: 2px solid white;
            border-radius: 50%;
            pointer-events: all;
            cursor: pointer;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        }

        .resize-handle.nw { top: -6px; left: -6px; cursor: nw-resize; }
        .resize-handle.ne { top: -6px; right: -6px; cursor: ne-resize; }
        .resize-handle.sw { bottom: -6px; left: -6px; cursor: sw-resize; }
        .resize-handle.se { bottom: -6px; right: -6px; cursor: se-resize; }

        /* ===== DRAG & DROP ===== */
        .drop-zone {
            border: 2px dashed var(--border);
            border-radius: 8px;
            padding: 40px 20px;
            text-align: center;
            background: #fafafa;
            transition: all 0.3s;
            margin: 20px 0;
            cursor: pointer;
        }

        .drop-zone:hover, .drop-zone.dragover {
            border-color: var(--primary);
            background: rgba(216, 154, 179, 0.1);
            transform: translateY(-2px);
        }

        /* ===== COLONNES FORC√âES ===== */
        .two-columns {
            display: grid !important;
            grid-template-columns: 1fr 1fr !important;
            gap: 20px !important;
            margin: 20px 0 !important;
            padding: 20px !important;
            border: 2px dashed var(--border) !important;
            border-radius: var(--radius) !important;
        }

        .column {
            padding: 15px !important;
            background: var(--bg-primary) !important;
            border-radius: 6px !important;
            min-height: 100px !important;
        }

        /* Force les colonnes m√™me sur mobile */
        @media (max-width: 480px) {
            .two-columns {
                grid-template-columns: 1fr 1fr !important;
                gap: 10px !important;
                padding: 10px !important;
            }
            
            .column {
                padding: 10px !important;
                font-size: 12px !important;
            }
        }

        /* ===== BOUTONS √âDITABLES ===== */
        .editable-button {
            position: relative;
            display: inline-block;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 600;
            text-decoration: none;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .editable-button:hover::after {
            content: "üîó";
            position: absolute;
            top: -8px;
            right: -8px;
            background: var(--info);
            color: white;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            z-index: 10;
        }

        /* ===== COULEURS PERSONNALISABLES ===== */
        .editable-color {
            position: relative;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .editable-color:hover {
            transform: scale(1.02);
        }

        .editable-color:hover::after {
            content: "üé®";
            position: absolute;
            top: -5px;
            right: -20px;
            background: var(--primary);
            color: white;
            padding: 2px 5px;
            border-radius: 3px;
            font-size: 10px;
            z-index: 10;
        }

        .editable-background {
            position: relative;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .editable-background:hover::before {
            content: "üé® Background";
            position: absolute;
            top: -25px;
            left: 0;
            background: rgba(0,0,0,0.8);
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 11px;
            white-space: nowrap;
            z-index: 10;
        }

        /* ===== TOOLBAR CONTEXTUELLE ===== */
        .contextual-toolbar {
            position: fixed;
            background: white;
            border: 1px solid var(--border);
            border-radius: 8px;
            padding: 8px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            z-index: 1000;
            display: none;
            gap: 5px;
            backdrop-filter: blur(10px);
        }

        .contextual-toolbar.show {
            display: flex;
        }

        .contextual-btn {
            padding: 8px 12px;
            border: 1px solid var(--border);
            border-radius: 6px;
            background: white;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .contextual-btn:hover {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .btn {
            padding: 10px 16px;
            border: none;
            border-radius: var(--radius);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
            text-decoration: none;
            user-select: none;
            justify-content: center;
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            border: 1px solid var(--primary-dark);
        }

        .btn-secondary {
            background: var(--text-secondary);
            color: white;
            border: 1px solid var(--text-secondary);
        }

        .btn-success {
            background: var(--success);
            color: white;
            border: 1px solid var(--success);
        }

        .btn-info {
            background: var(--info);
            color: white;
            border: 1px solid var(--info);
        }

        .btn-warning {
            background: var(--warning);
            color: white;
            border: 1px solid var(--warning);
        }

        .btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
        }

        .sidebar-section {
            margin-bottom: 25px;
            padding-bottom: 20px;
            border-bottom: 1px solid var(--border);
        }

        .sidebar-section:last-child {
            border-bottom: none;
        }

        .sidebar-section h3 {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 15px;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-label {
            display: block;
            font-weight: 600;
            margin-bottom: 5px;
            color: var(--text-primary);
            font-size: 14px;
        }

        .form-input, .form-select, .form-textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--border);
            border-radius: var(--radius);
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        .form-input:focus, .form-select:focus, .form-textarea:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(216, 154, 179, 0.1);
        }

        .template-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-bottom: 20px;
        }

        .template-card {
            border: 2px solid var(--border);
            border-radius: var(--radius);
            padding: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            font-size: 12px;
            background: white;
        }

        .template-card:hover {
            border-color: var(--primary);
            background: var(--bg-primary);
            transform: translateY(-2px);
        }

        .template-card.active {
            border-color: var(--primary);
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
        }

        .content-blocks {
            margin-bottom: 25px;
        }

        .block-item {
            background: var(--bg-primary);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            padding: 12px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 10px;
            user-select: none;
        }

        .block-item:hover {
            background: var(--primary);
            color: white;
            transform: translateX(5px);
            box-shadow: var(--shadow);
        }

        .variables-list {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
        }

        .variable-tag {
            background: var(--secondary);
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 11px;
            cursor: pointer;
            transition: all 0.3s ease;
            user-select: none;
        }

        .variable-tag:hover {
            background: #7c3aed;
            transform: scale(1.05);
        }

        .recipients-counter {
            background: var(--success);
            color: white;
            padding: 8px 12px;
            border-radius: var(--radius);
            font-size: 13px;
            font-weight: 600;
            text-align: center;
            margin-bottom: 15px;
        }

        .filter-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 8px;
            margin-bottom: 15px;
        }

        .filter-btn {
            padding: 8px;
            border: 1px solid var(--border);
            border-radius: var(--radius);
            background: white;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s ease;
        }

        .filter-btn.active {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .client-item {
            background: white;
            border: 1px solid var(--border);
            border-radius: var(--radius);
            padding: 10px;
            margin-bottom: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .client-item:hover {
            background: var(--bg-primary);
            border-color: var(--primary);
            transform: translateX(5px);
        }

        .client-item.selected {
            background: var(--primary);
            color: white;
            border-color: var(--primary-dark);
        }

        .client-name {
            font-weight: 600;
            font-size: 14px;
            margin-bottom: 2px;
        }

        .client-email {
            font-size: 12px;
            opacity: 0.8;
        }

        .client-type {
            font-size: 10px;
            background: rgba(255,255,255,0.2);
            padding: 2px 6px;
            border-radius: 10px;
            margin-top: 5px;
            display: inline-block;
        }

        /* ===== MODALS ===== */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 10000;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(5px);
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: white;
            border-radius: 12px;
            padding: 30px;
            max-width: 800px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            animation: modalSlideIn 0.3s ease;
        }

        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-30px) scale(0.95);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--border);
        }

        .modal-title {
            font-size: 20px;
            font-weight: 600;
            color: var(--text-primary);
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: var(--text-secondary);
            transition: color 0.2s;
        }

        .modal-close:hover {
            color: var(--danger);
        }

        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }

        .product-card {
            border: 1px solid var(--border);
            border-radius: var(--radius);
            padding: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            background: white;
        }

        .product-card:hover {
            border-color: var(--primary);
            box-shadow: var(--shadow);
            transform: translateY(-2px);
        }

        .product-card.selected {
            border-color: var(--primary);
            background: var(--bg-primary);
            box-shadow: 0 0 0 2px rgba(216, 154, 179, 0.2);
        }

        .product-image {
            width: 100%;
            height: 120px;
            object-fit: cover;
            border-radius: 6px;
            margin-bottom: 10px;
            background: #f8fafc;
        }

        .product-name {
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 6px;
            color: var(--text-primary);
        }

        .product-price {
            color: var(--primary);
            font-weight: 600;
            font-size: 16px;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            z-index: 99999;
            max-width: 350px;
            animation: slideIn 0.3s ease;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }

        .notification.success { background: var(--success); }
        .notification.error { background: var(--danger); }
        .notification.warning { background: var(--warning); }
        .notification.info { background: var(--info); }

        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        @keyframes slideOut {
            from { transform: translateX(0); opacity: 1; }
            to { transform: translateX(100%); opacity: 0; }
        }

        @keyframes fadeOut {
            from { opacity: 1; transform: scale(1); }
            to { opacity: 0; transform: scale(0.8); }
        }

        .auto-save {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: var(--success);
            color: white;
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 12px;
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: 1000;
        }

        .auto-save.visible {
            opacity: 1;
        }

        .email-header {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            padding: 20px;
        }

        .email-subject {
            font-size: 1.4rem;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .email-preheader {
            font-size: 14px;
            opacity: 0.9;
        }

        .email-footer {
            background: var(--bg-primary);
            padding: 15px 20px;
            font-size: 12px;
            color: var(--text-secondary);
            border-top: 1px solid var(--border);
        }

        /* ===== RESPONSIVE ===== */
        @media (max-width: 1200px) {
            .editor-container {
                grid-template-columns: 250px 1fr 250px;
            }
        }

        @media (max-width: 768px) {
            .editor-container {
                grid-template-columns: 1fr;
                grid-template-rows: auto auto 1fr auto;
            }
            
            .sidebar-left, .sidebar-right {
                max-height: 200px;
                padding: 15px;
            }

            .toolbar {
                padding: 8px 15px;
                gap: 8px;
            }

            .filter-buttons {
                grid-template-columns: 1fr;
            }
        }

        /* Surlignage rose pour les clients s√©lectionn√©s */
.client-item.selected {
    background: linear-gradient(135deg, #FFB6C1, #FF91A4) !important;
    color: white !important;
    border-color: #FF69B4 !important;
    transform: translateX(5px);
    box-shadow: 0 4px 15px rgba(255, 182, 193, 0.4);
}

.client-item.selected .client-name,
.client-item.selected .client-email,
.client-item.selected .client-type {
    color: white !important;
}

.client-item {
    transition: all 0.3s ease;
    cursor: pointer;
}

.client-item:hover:not(.selected) {
    background: var(--bg-primary);
    border-color: var(--primary);
    transform: translateX(2px);
}

/* Animation pour la s√©lection */
.client-item.selecting {
    animation: selectPulse 0.3s ease;
}

@keyframes selectPulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.02); }
    100% { transform: scale(1); }
}

/* Style pour la case "tout s√©lectionner" */
#selectAllToggle:checked + span {
    color: var(--primary);
    font-weight: 700;
}

/* Style am√©lior√© pour les filtres actifs */
.filter-btn.active.auto-selected {
    background: linear-gradient(135deg, #FF69B4, #FF1493) !important;
    color: white !important;
    border-color: #FF1493 !important;
    box-shadow: 0 2px 8px rgba(255, 20, 147, 0.3);
    transform: translateY(-1px);
}

    </style>
</head>
<body>
    <div class="editor-container">
        <!-- ===== SIDEBAR GAUCHE ===== -->
        <div class="sidebar-left">
            <!-- Configuration -->
            <div class="sidebar-section">
                <h3>
                    <i class="fas fa-cog"></i>
                    Configuration
                </h3>
                
                <form class="config-form" id="campaignForm">
                    <div class="form-group">
                        <label class="form-label">Nom de la campagne</label>
                        <input type="text" class="form-input" id="campaignName" placeholder="Ma super campagne" required>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Sujet de l'email</label>
                        <input type="text" class="form-input" id="emailSubject" placeholder="üéâ D√©couvrez nos nouveaut√©s !" required>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Pr√©-header (optionnel)</label>
                        <input type="text" class="form-input" id="emailPreheader" placeholder="Texte de pr√©visualisation">
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Nom de l'exp√©diteur</label>
                        <input type="text" class="form-input" id="senderName" value="CrystosJewel">
                    </div>
                </form>
            </div>

            <!-- Templates -->
            <div class="sidebar-section">
                <h3>
                    <i class="fas fa-palette"></i>
                    Templates
                </h3>
                
                <div class="template-grid" id="templateGrid">
                    <div class="template-card active" data-template="elegant">
                        <i class="fas fa-gem" style="font-size: 20px; margin-bottom: 5px;"></i>
                        <div>√âl√©gant</div>
                    </div>
                    <div class="template-card" data-template="modern">
                        <i class="fas fa-rocket" style="font-size: 20px; margin-bottom: 5px;"></i>
                        <div>Moderne</div>
                    </div>
                    <div class="template-card" data-template="classic">
                        <i class="fas fa-newspaper" style="font-size: 20px; margin-bottom: 5px;"></i>
                        <div>Classique</div>
                    </div>
                    <div class="template-card" data-template="minimal">
                        <i class="fas fa-minus" style="font-size: 20px; margin-bottom: 5px;"></i>
                        <div>Minimal</div>
                    </div>
                </div>
            </div>

            <!-- Blocs de contenu -->
            <div class="sidebar-section">
                <h3>
                    <i class="fas fa-cube"></i>
                    Blocs de contenu
                </h3>
                
                <div class="content-blocks">
                    <div class="block-item" data-block="title">
                        <i class="fas fa-heading"></i>
                        <span>Titre (H1-H6)</span>
                    </div>
                    <div class="block-item" data-block="text">
                        <i class="fas fa-paragraph"></i>
                        <span>Texte / Paragraphe</span>
                    </div>
                    <div class="block-item" data-block="image">
                        <i class="fas fa-image"></i>
                        <span>Image</span>
                    </div>
                    <div class="block-item" data-block="button">
                        <i class="fas fa-mouse-pointer"></i>
                        <span>Bouton CTA</span>
                    </div>
                    <div class="block-item" data-block="divider">
                        <i class="fas fa-grip-lines"></i>
                        <span>S√©parateur</span>
                    </div>
                    <div class="block-item" data-block="columns">
                        <i class="fas fa-columns"></i>
                        <span>2 Colonnes</span>
                    </div>
                    <div class="block-item" data-block="products">
                        <i class="fas fa-gem"></i>
                        <span>Produits</span>
                    </div>
                    <div class="block-item" data-block="promotion">
                        <i class="fas fa-percent"></i>
                        <span>Promotion</span>
                    </div>
                    <div class="block-item" data-block="unsubscribe">
                        <i class="fas fa-times-circle"></i>
                        <span>D√©sabonnement</span>
                    </div>
                </div>
            </div>

            <!-- Variables -->
            <div class="sidebar-section">
                <h3>
                    <i class="fas fa-code"></i>
                    Variables
                </h3>
                
                <div class="variables-list">
                    <span class="variable-tag" data-variable="{{firstName}}">{{firstName}}</span>
                    <span class="variable-tag" data-variable="{{lastName}}">{{lastName}}</span>
                    <span class="variable-tag" data-variable="{{email}}">{{email}}</span>
                    <span class="variable-tag" data-variable="{{orderNumber}}">{{orderNumber}}</span>
                    <span class="variable-tag" data-variable="{{total}}">{{total}}</span>
                    <span class="variable-tag" data-variable="{{trackingNumber}}">{{trackingNumber}}</span>
                </div>
            </div>

            <!-- Images -->
            <div class="sidebar-section">
                <h3>
                    <i class="fas fa-upload"></i>
                    Images
                </h3>
                
                <div class="form-group">
                    <input type="file" id="imageUpload" accept="image/*" style="display: none;" multiple>
                    <button type="button" class="btn btn-info" id="uploadImageBtn">
                        <i class="fas fa-upload"></i>
                        Uploader une image
                    </button>
                </div>
                
                <!-- Drop Zone -->
                <div class="drop-zone" id="dropZone">
                    <i class="fas fa-cloud-upload-alt" style="font-size: 32px; color: #ccc; margin-bottom: 10px;"></i>
                    <p style="margin: 0; color: var(--text-secondary);">Glissez-d√©posez des images ici</p>
                </div>
                
                <div id="uploadedImages" style="margin-top: 15px; max-height: 200px; overflow-y: auto;">
                    <!-- Images upload√©es appara√Ætront ici -->
                </div>
            </div>
        </div>

        <!-- ===== ZONE CENTRALE ===== -->
        <div class="editor-main">
            <!-- Header -->
            <div class="editor-header">
                <div class="editor-title">
                    <i class="fas fa-edit"></i>
                    <%= title %>
                </div>
                <div class="editor-actions">
                    <button type="button" class="btn btn-secondary" id="saveAsDraftBtn">
                        <i class="fas fa-save"></i>
                        Brouillon
                    </button>
                    <button type="button" class="btn btn-warning" id="sendTestBtn">
                        <i class="fas fa-flask"></i>
                        Test
                    </button>
                    <button type="button" class="btn btn-info" id="previewEmailBtn">
                        <i class="fas fa-eye"></i>
                        Aper√ßu
                    </button>
                    <button type="button" class="btn btn-primary" id="dashboardBtn">
                        <i class="fas fa-chart-bar"></i>
                        Dashboard
                    </button>
                    <button type="button" class="btn btn-success" id="sendCampaignBtn">
                        <i class="fas fa-paper-plane"></i>
                        Envoyer
                    </button>
                </div>
            </div>

            <!-- Barre d'outils de formatage -->
            <div class="toolbar">
                <!-- Police et taille -->
                <div class="toolbar-group">
                    <select class="toolbar-select" id="fontFamily">
                        <option value="Arial, sans-serif">Arial</option>
                        <option value="Georgia, serif">Georgia</option>
                        <option value="'Times New Roman', serif">Times</option>
                        <option value="Verdana, sans-serif">Verdana</option>
                        <option value="Helvetica, sans-serif">Helvetica</option>
                        <option value="'Courier New', monospace">Courier</option>
                    </select>
                    <select class="toolbar-select" id="fontSize">
                        <option value="12px">12px</option>
                        <option value="14px">14px</option>
                        <option value="16px" selected>16px</option>
                        <option value="18px">18px</option>
                        <option value="20px">20px</option>
                        <option value="24px">24px</option>
                        <option value="28px">28px</option>
                        <option value="32px">32px</option>
                        <option value="36px">36px</option>
                        <option value="48px">48px</option>
                    </select>
                </div>

                <!-- Style de texte -->
                <div class="toolbar-group">
                    <button class="toolbar-btn" data-command="bold" title="Gras">
                        <i class="fas fa-bold"></i>
                    </button>
                    <button class="toolbar-btn" data-command="italic" title="Italique">
                        <i class="fas fa-italic"></i>
                    </button>
                    <button class="toolbar-btn" data-command="underline" title="Soulign√©">
                        <i class="fas fa-underline"></i>
                    </button>
                    <input type="color" class="color-picker" id="textColor" title="Couleur du texte" value="#1e293b">
                </div>

                <!-- Alignement -->
                <div class="toolbar-group">
                    <button class="toolbar-btn" data-command="justifyLeft" title="Aligner √† gauche">
                        <i class="fas fa-align-left"></i>
                    </button>
                    <button class="toolbar-btn" data-command="justifyCenter" title="Centrer">
                        <i class="fas fa-align-center"></i>
                    </button>
                    <button class="toolbar-btn" data-command="justifyRight" title="Aligner √† droite">
                        <i class="fas fa-align-right"></i>
                    </button>
                    <button class="toolbar-btn" data-command="justifyFull" title="Justifier">
                        <i class="fas fa-align-justify"></i>
                    </button>
                </div>

                <!-- Titres -->
                <div class="toolbar-group">
                    <select class="toolbar-select" id="heading">
                        <option value="">Paragraphe</option>
                        <option value="h1">Titre H1</option>
                        <option value="h2">Titre H2</option>
                        <option value="h3">Titre H3</option>
                        <option value="h4">Titre H4</option>
                        <option value="h5">Titre H5</option>
                        <option value="h6">Titre H6</option>
                    </select>
                </div>

                <!-- Actions -->
                <div class="toolbar-group">
                    <button class="toolbar-btn" id="insertLink" title="Ins√©rer un lien">
                        <i class="fas fa-link"></i>
                    </button>
                    <button class="toolbar-btn" id="insertImage" title="Ins√©rer une image">
                        <i class="fas fa-image"></i>
                    </button>
                    <button class="toolbar-btn" data-command="removeFormat" title="Supprimer le formatage">
                        <i class="fas fa-remove-format"></i>
                    </button>
                </div>
            </div>

            <!-- Zone de pr√©visualisation -->
            <div class="preview-area">
                <div class="editor-wrapper">
                    <div class="preview-controls">
                        <div class="preview-mode">
                            <button class="preview-btn active" data-mode="desktop">
                                <i class="fas fa-desktop"></i> Desktop
                            </button>
                            <button class="preview-btn" data-mode="mobile">
                                <i class="fas fa-mobile-alt"></i> Mobile
                            </button>
                        </div>
                        <div style="margin-left: auto; font-size: 12px; color: var(--text-secondary);">
                            <span id="autosaveStatus">Sauvegarde automatique activ√©e</span>
                        </div>
                    </div>
                    
                    <div class="email-preview" id="emailPreview">
                        <div class="email-header editable-background">
                            <div class="email-subject editable-color" id="previewSubject">üéâ D√©couvrez nos nouveaut√©s !</div>
                            <div class="email-preheader editable-color" id="previewPreheader">Texte de pr√©visualisation</div>
                        </div>
                        
                        <div class="content-editable" id="emailContent" contenteditable="true">
                            <h2 style="color: #d89ab3; margin-bottom: 20px; text-align: center;" class="editable-color">Bonjour {{firstName}} !</h2>
                            
                            <p style="margin-bottom: 15px;">Nous sommes ravis de vous pr√©senter notre nouvelle collection de bijoux exclusifs.</p>
                            
                            <p style="margin-bottom: 20px;">D√©couvrez des pi√®ces uniques cr√©√©es avec passion par nos artisans.</p>
                            
                            <div style="text-align: center; margin: 30px 0;">
                                <a href="/bijoux" class="editable-button editable-color editable-background" style="display: inline-block; background: linear-gradient(135deg, #d89ab3, #b794a8); color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: 600; box-shadow: 0 4px 15px rgba(216, 154, 179, 0.3); transition: transform 0.2s ease;">
                                    üõçÔ∏è D√©couvrir la collection
                                </a>
                            </div>
                            
                            <p style="margin-bottom: 15px;">Profitez d'une <strong>r√©duction de 15%</strong> avec le code <code style="background: #f1f5f9; padding: 4px 8px; border-radius: 4px; font-family: monospace;" class="editable-background">NOUVEAU15</code></p>
                            
                            <hr style="margin: 30px 0; border: none; border-top: 1px solid #e2e8f0;">
                            
                            <p style="color: #64748b; font-size: 14px; margin-bottom: 15px;" class="editable-color">
                                √Ä bient√¥t,<br>
                                L'√©quipe CrystosJewel
                            </p>
                        </div>
                        
                        <div class="email-footer editable-background">
                            <p class="editable-color">¬© 2025 CrystosJewel - Tous droits r√©serv√©s</p>
                            <p style="margin-top: 5px;" class="editable-color">
                                <a href="#" style="color: #64748b;" class="editable-color">Se d√©sabonner</a> | 
                                <a href="#" style="color: #64748b;" class="editable-color">Mettre √† jour mes pr√©f√©rences</a>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- ===== SIDEBAR DROITE ===== -->
      <!-- ===== SIDEBAR DROITE ===== -->
<div class="sidebar-right">
    <!-- Destinataires -->
    <div class="sidebar-section">
        <h3>
            <i class="fas fa-users"></i>
            Destinataires
        </h3>
        
        <!-- Case tout s√©lectionner/d√©selectionner -->
        <div style="margin-bottom: 15px; padding: 10px; background: var(--bg-primary); border-radius: var(--radius); border: 1px solid var(--border);">
            <label style="display: flex; align-items: center; gap: 8px; cursor: pointer; font-weight: 600;">
                <input type="checkbox" id="selectAllToggle" onchange="toggleSelectAll()" style="transform: scale(1.2);">
                <span id="selectAllLabel">Tout s√©lectionner</span>
            </label>
            <small style="color: var(--text-secondary); font-size: 12px; margin-top: 5px; display: block;">
                Cochez pour s√©lectionner tous les clients visibles, d√©cochez pour tout d√©s√©lectionner
            </small>
        </div>
        
        <div class="recipients-counter" id="recipientsCounter" style="background: linear-gradient(135deg, #FFB6C1, #FF69B4); color: white;">
            <i class="fas fa-envelope"></i>
            <span id="recipientCount">0</span> destinataires s√©lectionn√©s
        </div>
        
        <div class="filter-buttons">
            <button class="filter-btn active" data-filter="newsletter" onclick="selectCategoryAndClients('newsletter')">
                üìß Newsletter (<%= customerStats ? customerStats.newsletter : 0 %>)
            </button>
            <button class="filter-btn" data-filter="all" onclick="selectCategoryAndClients('all')">
                üë• Tous (<%= customerStats ? customerStats.all : 0 %>)
            </button>
            <button class="filter-btn" data-filter="vip" onclick="selectCategoryAndClients('vip')">
                üíé VIP (<%= customerStats ? customerStats.vip : 0 %>)
            </button>
            <button class="filter-btn" data-filter="with-orders" onclick="selectCategoryAndClients('with-orders')">
                üõçÔ∏è Clients (<%= customerStats ? customerStats.withOrders : 0 %>)
            </button>
        </div>
        
        <div class="form-group">
            <label class="form-label">Rechercher un client</label>
            <input type="text" class="form-input" id="clientSearch" placeholder="Nom ou email" oninput="searchClients(this.value)">
        </div>
        
        <div id="clientsList" style="max-height: 300px; overflow-y: auto; margin-top: 10px;">
            <% if (customers && customers.length > 0) { %>
                <% customers.forEach(function(customer) { %>
                    <div class="client-item" data-client-id="<%= customer.id %>" onclick="toggleClientSelection(<%= customer.id %>)">
                        <div class="client-name"><%= customer.name || customer.email %></div>
                        <div class="client-email"><%= customer.email %></div>
                        <% if (customer.total_orders > 0) { %>
                            <div class="client-type">üí∞ <%= customer.total_orders %> commandes</div>
                        <% } %>
                        <% if (customer.customer_type === 'vip') { %>
                            <div class="client-type">üíé VIP</div>
                        <% } %>
                    </div>
                <% }); %>
            <% } else { %>
                <div style="color: var(--text-secondary); text-align: center; padding: 20px;">
                    Aucun client trouv√©
                </div>
            <% } %>
        </div>
    </div>

    <!-- Statistiques -->
    <div class="sidebar-section">
        <h3>
            <i class="fas fa-chart-bar"></i>
            Statistiques
        </h3>
        
        <div style="background: var(--bg-primary); padding: 15px; border-radius: var(--radius); font-size: 13px;">
            <p style="margin-bottom: 8px;">
                <strong>üìä Total campagnes:</strong> <%= campaignStats ? campaignStats.total_campaigns : 0 %>
            </p>
            <p style="margin-bottom: 8px;">
                <strong>üìß Emails envoy√©s:</strong> <%= campaignStats ? campaignStats.total_emails_sent : 0 %>
            </p>
            <p style="margin-bottom: 8px;">
                <strong>üìà Taux d'ouverture:</strong> <%= campaignStats ? campaignStats.global_open_rate : 0 %>%
            </p>
            <p style="margin-bottom: 8px;">
                <strong>üñ±Ô∏è Taux de clic:</strong> <%= campaignStats ? campaignStats.global_click_rate : 0 %>%
            </p>
            <p>
                <strong>üë• Abonn√©s:</strong> <%= campaignStats ? campaignStats.total_subscribers : 0 %>
            </p>
        </div>
    </div>

    <!-- Conseils -->
    <div class="sidebar-section">
        <h3>
            <i class="fas fa-info-circle"></i>
            Conseils
        </h3>
        
        <div style="background: var(--bg-primary); padding: 15px; border-radius: var(--radius); font-size: 13px; line-height: 1.5;">
            <p style="margin-bottom: 10px;"><strong>üìù Bonnes pratiques :</strong></p>
            <ul style="margin-left: 15px;">
                <li>Sujet accrocheur (max 50 caract√®res)</li>
                <li>Personnalisez avec des variables</li>
                <li>Testez avant d'envoyer</li>
                <li>Optimisez pour mobile</li>
                <li>Analysez les statistiques</li>
            </ul>
        </div>
    </div>
</div>

    </div>

    <!-- ===== INDICATEURS ===== -->
    <div class="auto-save" id="autoSaveIndicator">
        <i class="fas fa-check"></i> Sauvegard√© automatiquement
    </div>

    <!-- ===== TOOLBAR CONTEXTUELLE ===== -->
    <div class="contextual-toolbar" id="contextualToolbar">
        <button class="contextual-btn" onclick="editElement()">
            <i class="fas fa-edit"></i> √âditer
        </button>
        <button class="contextual-btn" onclick="duplicateElement()">
            <i class="fas fa-copy"></i> Dupliquer
        </button>
        <button class="contextual-btn" onclick="deleteElement()">
            <i class="fas fa-trash"></i> Supprimer
        </button>
    </div>

    <!-- ===== MODALS ===== -->

    <!-- Modal pour s√©lectionner les produits -->
    <div class="modal" id="productsModal">
    <div class="modal-content" style="max-width: 900px;">
        <div class="modal-header">
            <h3 class="modal-title">S√©lectionner des produits</h3>
            <button class="modal-close" onclick="closeModal('productsModal')">&times;</button>
        </div>

        <div class="form-group">
            <input type="text" class="form-input" id="productSearch" placeholder="Rechercher un produit..." onkeyup="filterProducts()">
        </div>

        <div class="products-grid" id="productsGrid">
            <% if (jewels && jewels.length > 0) { %>
                <% jewels.forEach(function(jewel) { %>
                    <div class="product-card" 
                         data-product-id="<%= jewel.id %>" 
                         data-product-slug="<%= jewel.slug %>" 
                         onclick="toggleProductSelection(this)">
                        <img src="<%= jewel.imageUrl %>" 
                             alt="<%= jewel.name %>" 
                             class="product-image"
                             onerror="this.src='/images/no-image.jpg'">
                        <div class="product-name"><%= jewel.name %></div>
                        <div class="product-price"><%= jewel.formattedPrice %></div>
                    </div>
                <% }); %>
            <% } else { %>
                <!-- Produits fictifs si la liste est vide -->
                <div class="product-card" data-product-id="1" data-product-slug="bracelet-or-elegance" onclick="toggleProductSelection(this)">
                   <p> Aucun bijoux disponible </p></div>
                </div>
                <div class="product-card" data-product-id="2" data-product-slug="collier-diamant-prestige" onclick="toggleProductSelection(this)">
                    <img src="/images/no-image.jpg" alt="Collier Diamant Prestige" class="product-image">
                    <div class="product-name">Collier Diamant Prestige</div>
                    <div class="product-price">599‚Ç¨</div>
                </div>
                <div class="product-card" data-product-id="3" data-product-slug="bague-solitaire-royal" onclick="toggleProductSelection(this)">
                    <img src="/images/no-image.jpg" alt="Bague Solitaire Royal" class="product-image">
                    <div class="product-name">Bague Solitaire Royal</div>
                    <div class="product-price">899‚Ç¨</div>
                </div>
            <% } %>
        </div>

        <div style="display: flex; gap: 10px; justify-content: flex-end; margin-top: 20px;">
            <button class="btn btn-secondary" onclick="closeModal('productsModal')">Annuler</button>
            <button class="btn btn-primary" onclick="insertSelectedProducts()">Ins√©rer les produits</button>
        </div>
    </div>
</div>

    <!-- Modal pour ins√©rer un lien -->
    <div class="modal" id="linkModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Ins√©rer un lien</h3>
                <button class="modal-close" onclick="closeModal('linkModal')">&times;</button>
            </div>
            <div class="form-group">
                <label class="form-label">Texte du lien</label>
                <input type="text" class="form-input" id="linkText" placeholder="Cliquez ici">
            </div>
            <div class="form-group">
                <label class="form-label">URL</label>
                <input type="url" class="form-input" id="linkUrl" placeholder="https://example.com">
            </div>
            <div class="form-group">
                <label>
                    <input type="checkbox" id="linkNewTab"> Ouvrir dans un nouvel onglet
                </label>
            </div>
            <div style="display: flex; gap: 10px; justify-content: flex-end;">
                <button class="btn btn-secondary" onclick="closeModal('linkModal')">Annuler</button>
                <button class="btn btn-primary" onclick="insertLink()">Ins√©rer</button>
            </div>
        </div>
    </div>

    <!-- Modal pour √©diter les boutons -->
    <div class="modal" id="buttonModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">√âditer le bouton</h3>
                <button class="modal-close" onclick="closeModal('buttonModal')">&times;</button>
            </div>
            <div class="form-group">
                <label class="form-label">Texte du bouton</label>
                <input type="text" class="form-input" id="buttonText" placeholder="Texte du bouton">
            </div>
            <div class="form-group">
                <label class="form-label">URL de destination</label>
                <input type="url" class="form-input" id="buttonUrl" placeholder="https://example.com">
            </div>
            <div class="form-group">
                <label class="form-label">Couleur de fond</label>
                <input type="color" class="form-input" id="buttonBgColor" value="#d89ab3">
            </div>
            <div class="form-group">
                <label class="form-label">Couleur du texte</label>
                <input type="color" class="form-input" id="buttonTextColor" value="#ffffff">
            </div>
            <div class="form-group">
                <label>
                    <input type="checkbox" id="buttonNewTab"> Ouvrir dans un nouvel onglet
                </label>
            </div>
            <div style="display: flex; gap: 10px; justify-content: flex-end;">
                <button class="btn btn-secondary" onclick="closeModal('buttonModal')">Annuler</button>
                <button class="btn btn-primary" onclick="saveButtonChanges()">Sauvegarder</button>
            </div>
        </div>
    </div>

    <!-- Modal pour envoyer un test -->
    <div class="modal" id="testModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Envoyer un email de test</h3>
                <button class="modal-close" onclick="closeModal('testModal')">&times;</button>
            </div>
            <div class="form-group">
                <label class="form-label">Email de test</label>
                <input type="email" class="form-input" id="testEmail" placeholder="test@example.com" value="<%= user ? user.email : '' %>">
            </div>
            <div class="form-group">
                <p style="font-size: 12px; color: var(--text-secondary);">
                    L'email sera envoy√© avec les variables remplac√©es par des valeurs de test.
                </p>
            </div>
            <div style="display: flex; gap: 10px; justify-content: flex-end;">
                <button class="btn btn-secondary" onclick="closeModal('testModal')">Annuler</button>
                <button class="btn btn-warning" onclick="sendTestEmail()">
                    <i class="fas fa-flask"></i> Envoyer le test
                </button>
            </div>
        </div>
    </div>

    <!-- Modal de confirmation d'envoi -->
    <div class="modal" id="sendModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Confirmer l'envoi de la campagne</h3>
                <button class="modal-close" onclick="closeModal('sendModal')">&times;</button>
            </div>
            <div id="sendSummary">
                <!-- Contenu g√©n√©r√© dynamiquement -->
            </div>
            <div class="form-group">
                <label>
                    <input type="checkbox" id="confirmSend" required> 
                    Je confirme vouloir envoyer cette campagne
                </label>
            </div>
            <div style="display: flex; gap: 10px; justify-content: flex-end;">
                <button class="btn btn-secondary" onclick="closeModal('sendModal')">Annuler</button>
                <button class="btn btn-success" onclick="confirmSendCampaign()" id="finalSendBtn" disabled>
                    <i class="fas fa-paper-plane"></i> Envoyer maintenant
                </button>
            </div>
        </div>
    </div>

    <!-- ===== JAVASCRIPT ===== -->
    <script>
// Variables globales depuis le serveur EJS
let allCustomers = <%- JSON.stringify(customers || []) %>;
let allJewels = <%- JSON.stringify(jewels || []) %>;
let customerStats = <%- JSON.stringify(customerStats || {}) %>;
let campaignStats = <%- JSON.stringify(campaignStats || {}) %>;

// Variables d'√©tat
let selectedClients = [];
let currentFilter = 'newsletter';
let currentTemplate = 'elegant';
let selectedProducts = [];
let autoSaveTimer = null;
let lastSaveTime = Date.now();
let isInitialized = false;
let selectedElement = null;
let resizeData = null;
let currentButton = null;

console.log('üìß √âditeur d\'emails CrystosJewel fusionn√© initialis√©');
console.log('üë• Clients charg√©s:', allCustomers.length);
console.log('üíé Bijoux charg√©s:', allJewels.length);

// ===== PR√âVENIR LE RECHARGEMENT =====
let preventReload = false;

window.addEventListener('beforeunload', function(e) {
    if (preventReload) {
        e.preventDefault();
        e.returnValue = '';
        return '';
    }
});

// ===== INITIALISATION PRINCIPALE =====
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìã DOM charg√©, initialisation...');
    
    // √âviter les rechargements constants
    preventReload = true;
    
    try {
        initializeEventListeners();
        initializeDragDrop();
        loadClients();
        updatePreview();
        startAutoSave();
        
        isInitialized = true;
        console.log('‚úÖ √âditeur fusionn√© initialis√© avec succ√®s !');
        showNotification('‚úÖ √âditeur d\'emails pr√™t !', 'success');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'initialisation:', error);
        showNotification('‚ùå Erreur lors de l\'initialisation', 'error');
    }
    
     // Ajouter la restauration
    loadFromLocalStorage();
    
    // Sauvegarder √† chaque modification
    setInterval(saveToLocalStorage, 5000); // Toutes les 5 secondes

});

// ===== EVENT LISTENERS =====
function initializeEventListeners() {
    console.log('üîó Initialisation des event listeners...');

    // Boutons principaux
    const saveBtn = document.getElementById('saveAsDraftBtn');
    if (saveBtn) saveBtn.addEventListener('click', saveAsDraft);
    
    const testBtn = document.getElementById('sendTestBtn');
    if (testBtn) testBtn.addEventListener('click', () => openModal('testModal'));
    
    const previewBtn = document.getElementById('previewEmailBtn');
    if (previewBtn) previewBtn.addEventListener('click', previewEmail);
    
    const dashboardBtn = document.getElementById('dashboardBtn');
    if (dashboardBtn) dashboardBtn.addEventListener('click', () => window.open('/admin/marketing/campaigns', '_blank'));
    
    const sendBtn = document.getElementById('sendCampaignBtn');
    if (sendBtn) sendBtn.addEventListener('click', () => openModal('sendModal'));
    
    const uploadBtn = document.getElementById('uploadImageBtn');
    if (uploadBtn) uploadBtn.addEventListener('click', () => {
        const fileInput = document.getElementById('imageUpload');
        if (fileInput) fileInput.click();
    });

    // Templates
    document.querySelectorAll('.template-card').forEach(card => {
        card.addEventListener('click', () => selectTemplate(card.dataset.template));
    });

    // Blocs de contenu
    document.querySelectorAll('.block-item').forEach(block => {
        block.addEventListener('click', () => addContentBlock(block.dataset.block));
    });

    // Variables
    document.querySelectorAll('.variable-tag').forEach(tag => {
        tag.addEventListener('click', () => insertVariable(tag.dataset.variable));
    });

    // Filtres clients
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', () => filterRecipients(btn.dataset.filter));
    });

    // Recherche clients
    const clientSearch = document.getElementById('clientSearch');
    if (clientSearch) {
        clientSearch.addEventListener('input', function() {
            searchClients(this.value);
        });
    }

    // Contenu email
    const emailSubject = document.getElementById('emailSubject');
    if (emailSubject) emailSubject.addEventListener('input', updatePreview);
    
    const emailPreheader = document.getElementById('emailPreheader');
    if (emailPreheader) emailPreheader.addEventListener('input', updatePreview);
    
    const emailContent = document.getElementById('emailContent');
    if (emailContent) {
        emailContent.addEventListener('input', scheduleAutoSave);
        emailContent.addEventListener('keyup', scheduleAutoSave);
        emailContent.addEventListener('paste', scheduleAutoSave);
        emailContent.addEventListener('click', handleContentClick);
    }

    // Toolbar de formatage
    initializeToolbar();

    // Preview modes
    document.querySelectorAll('.preview-btn').forEach(btn => {
        btn.addEventListener('click', () => switchPreviewMode(btn.dataset.mode));
    });

    // Produits
    document.querySelectorAll('.product-card').forEach(card => {
        card.addEventListener('click', () => toggleProductSelection(card.dataset.productId));
    });

    // Modal de confirmation d'envoi
    const confirmSend = document.getElementById('confirmSend');
    if (confirmSend) {
        confirmSend.addEventListener('change', function() {
            const finalBtn = document.getElementById('finalSendBtn');
            if (finalBtn) finalBtn.disabled = !this.checked;
        });
    }

    // Images
    const imageUpload = document.getElementById('imageUpload');
    if (imageUpload) imageUpload.addEventListener('change', handleImageUpload);

    // Events globaux
    document.addEventListener('keydown', handleKeyboardShortcuts);
    document.addEventListener('click', handleGlobalClicks);

    // Couleurs √©ditables
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('editable-color')) {
            changeElementColor(e.target);
        }
        if (e.target.classList.contains('editable-background')) {
            changeElementBackground(e.target);
        }
        if (e.target.classList.contains('editable-button')) {
            editButton(e.target);
        }
    });

    console.log('‚úÖ Event listeners configur√©s');
}

function handleGlobalClicks(e) {
    // Fermer toolbar contextuelle
    if (!e.target.closest('.contextual-toolbar') && !e.target.closest('#emailContent')) {
        hideContextualToolbar();
    }
    
    // Fermer modals en cliquant √† l'ext√©rieur
    if (e.target.classList.contains('modal')) {
        e.target.classList.remove('active');
    }
}

// ===== TOOLBAR DE FORMATAGE =====
function initializeToolbar() {
    // Boutons de formatage
    document.querySelectorAll('.toolbar-btn[data-command]').forEach(btn => {
        btn.addEventListener('click', function() {
            executeFormatCommand(this.dataset.command);
            updateButtonStates();
        });
    });

    // S√©lecteurs
    const fontFamily = document.getElementById('fontFamily');
    if (fontFamily) {
        fontFamily.addEventListener('change', function() {
            document.execCommand('fontName', false, this.value);
            scheduleAutoSave();
        });
    }

    const fontSize = document.getElementById('fontSize');
    if (fontSize) {
        fontSize.addEventListener('change', function() {
            applyFontSize(this.value);
        });
    }

    const heading = document.getElementById('heading');
    if (heading) {
        heading.addEventListener('change', function() {
            if (this.value) {
                document.execCommand('formatBlock', false, this.value);
            } else {
                document.execCommand('formatBlock', false, 'div');
            }
            scheduleAutoSave();
        });
    }

    const textColor = document.getElementById('textColor');
    if (textColor) {
        textColor.addEventListener('change', function() {
            document.execCommand('foreColor', false, this.value);
            scheduleAutoSave();
        });
    }

    // Boutons sp√©ciaux
    const insertLinkBtn = document.getElementById('insertLink');
    if (insertLinkBtn) insertLinkBtn.addEventListener('click', () => openModal('linkModal'));
    
    const insertImageBtn = document.getElementById('insertImage');
    if (insertImageBtn) insertImageBtn.addEventListener('click', () => {
        const fileInput = document.getElementById('imageUpload');
        if (fileInput) fileInput.click();
    });
}

function executeFormatCommand(command) {
    const emailContent = document.getElementById('emailContent');
    if (!emailContent) return;

    emailContent.focus();
    document.execCommand(command, false, null);
    scheduleAutoSave();
}

function applyFontSize(size) {
    const selection = window.getSelection();
    if (selection.rangeCount > 0) {
        const range = selection.getRangeAt(0);
        if (!range.collapsed) {
            const span = document.createElement('span');
            span.style.fontSize = size;
            try {
                range.surroundContents(span);
            } catch (e) {
                span.textContent = range.toString();
                range.deleteContents();
                range.insertNode(span);
            }
            scheduleAutoSave();
        }
    }
}

function updateButtonStates() {
    document.querySelectorAll('.toolbar-btn[data-command]').forEach(btn => {
        const command = btn.dataset.command;
        try {
            if (document.queryCommandState(command)) {
                btn.classList.add('active');
            } else {
                btn.classList.remove('active');
            }
        } catch (e) {
            // Ignore les erreurs
        }
    });
}

// ===== GESTION DES TEMPLATES =====
function selectTemplate(templateType) {
    console.log(`üìÑ S√©lection du template: ${templateType}`);
    
    try {
        const emailContent = document.getElementById('emailContent');
        if (!emailContent) return;

        const currentContent = emailContent.innerHTML;
        const hasContent = currentContent && currentContent.trim() && !isDefaultTemplate(currentContent);

        if (hasContent) {
            if (confirm('Voulez-vous appliquer le nouveau template en conservant votre contenu actuel ?')) {
                applyTemplateStyles(templateType);
            } else {
                loadTemplateContent(templateType);
            }
        } else {
            loadTemplateContent(templateType);
        }

        // Mettre √† jour l'interface
        document.querySelectorAll('.template-card').forEach(card => card.classList.remove('active'));
        const selectedCard = document.querySelector(`[data-template="${templateType}"]`);
        if (selectedCard) selectedCard.classList.add('active');

        currentTemplate = templateType;
        updatePreview();
        showNotification(`üìÑ Template "${templateType}" appliqu√©`, 'success');
        
    } catch (error) {
        console.error('‚ùå Erreur s√©lection template:', error);
        showNotification('‚ùå Erreur lors de la s√©lection du template', 'error');
    }
}

function isDefaultTemplate(content) {
    return content.includes('Collection √âl√©gante') || 
           content.includes('Tendance Moderne') || 
           content.includes('Style Classique') || 
           content.includes('Minimalisme');
}

function applyTemplateStyles(templateType) {
    const content = document.getElementById('emailContent');
    if (!content) return;

    const styles = {
        elegant: { primaryColor: '#d89ab3', secondaryColor: '#b794a8' },
        modern: { primaryColor: '#3b82f6', secondaryColor: '#1e40af' },
        classic: { primaryColor: '#1e293b', secondaryColor: '#475569' },
        minimal: { primaryColor: '#64748b', secondaryColor: '#94a3b8' }
    };

    const style = styles[templateType];
    if (style) {
        content.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(heading => {
            heading.style.color = style.primaryColor;
        });

        content.querySelectorAll('a[style*="background"]').forEach(button => {
            button.style.background = `linear-gradient(135deg, ${style.primaryColor}, ${style.secondaryColor})`;
        });
    }
}

function loadTemplateContent(templateType) {
    const emailContent = document.getElementById('emailContent');
    if (!emailContent) return;

    const templates = {
        elegant: `
            <h2 style="color: #d89ab3; margin-bottom: 20px; text-align: center;" class="editable-color">‚ú® Collection √âl√©gante ‚ú®</h2>
            <p style="margin-bottom: 15px;">Ch√®re {{firstName}},</p>
            <p style="margin-bottom: 20px;">D√©couvrez notre nouvelle collection de bijoux d'exception, cr√©√©e sp√©cialement pour vous.</p>
        `,
        modern: `
            <h2 style="color: #3b82f6; margin-bottom: 20px; text-align: center;" class="editable-color">üöÄ Tendance Moderne</h2>
            <p style="margin-bottom: 15px;">Bonjour {{firstName}},</p>
            <p style="margin-bottom: 20px;">Explorez nos designs contemporains qui red√©finissent l'√©l√©gance moderne.</p>
        `,
        classic: `
            <h2 style="color: #1e293b; margin-bottom: 20px; text-align: center;" class="editable-color">üì∞ Style Classique</h2>
            <p style="margin-bottom: 15px;">Madame, Monsieur {{lastName}},</p>
            <p style="margin-bottom: 20px;">Red√©couvrez l'intemporel avec notre collection classique de bijoux raffin√©s.</p>
        `,
        minimal: `
            <h2 style="color: #64748b; margin-bottom: 20px; text-align: center;" class="editable-color">‚Äî Minimalisme ‚Äî</h2>
            <p style="margin-bottom: 15px;">{{firstName}},</p>
            <p style="margin-bottom: 20px;">L'essentiel r√©v√©l√© dans notre collection minimaliste.</p>
        `
    };

    if (templates[templateType]) {
        const content = templates[templateType] + `
            <div style="text-align: center; margin: 30px 0;">
                <a href="/bijoux" class="editable-button editable-color editable-background" style="display: inline-block; background: linear-gradient(135deg, #d89ab3, #b794a8); color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: 600; box-shadow: 0 4px 15px rgba(216, 154, 179, 0.3); transition: transform 0.2s ease;">
                    üõçÔ∏è D√©couvrir
                </a>
            </div>
            <hr style="margin: 30px 0; border: none; border-top: 1px solid #e2e8f0;">
            <p style="color: #64748b; font-size: 14px;" class="editable-color">
                Cordialement,<br>
                L'√©quipe CrystosJewel
            </p>
        `;
        
        emailContent.innerHTML = content;
        scheduleAutoSave();
    }
}

// ===== BLOCS DE CONTENU =====
function addContentBlock(blockType) {
    console.log(`‚ûï Ajout du bloc: ${blockType}`);
    
    try {
        const emailContent = document.getElementById('emailContent');
        if (!emailContent) {
            showNotification('‚ùå Zone de contenu introuvable', 'error');
            return;
        }

        let elementToInsert = createContentElement(blockType);
        
        if (elementToInsert) {
            const selection = window.getSelection();
            let range;
            
            if (selection.rangeCount > 0) {
                range = selection.getRangeAt(0);
            } else {
                range = document.createRange();
                range.selectNodeContents(emailContent);
                range.collapse(false);
            }

            range.deleteContents();
            range.insertNode(elementToInsert);
            
            range.setStartAfter(elementToInsert);
            range.collapse(true);
            selection.removeAllRanges();
            selection.addRange(range);
            
            updatePreview();
            showNotification(`‚úÖ Bloc "${blockType}" ajout√©`, 'success');
            scheduleAutoSave();
        }
        
    } catch (error) {
        console.error('‚ùå Erreur ajout bloc:', error);
        showNotification('‚ùå Erreur lors de l\'ajout du bloc', 'error');
    }
}

function createContentElement(blockType) {
    let element;

    switch(blockType) {
        case 'title':
            element = document.createElement('h2');
            element.style.cssText = 'color: #d89ab3; margin: 20px 0; text-align: center;';
            element.textContent = 'Nouveau titre';
            element.className = 'editable-element editable-text';
            element.contentEditable = false;
            element.addEventListener('dblclick', function() {
                this.contentEditable = true;
                this.focus();
            });
            element.addEventListener('blur', function() {
                this.contentEditable = false;
            });
            break;
            
        case 'text':
            element = document.createElement('p');
            element.style.cssText = 'margin: 15px 0; line-height: 1.6;';
            element.textContent = 'Votre texte ici...';
            element.className = 'editable-element editable-text';
            element.contentEditable = false;
            element.addEventListener('dblclick', function() {
                this.contentEditable = true;
                this.focus();
            });
            element.addEventListener('blur', function() {
                this.contentEditable = false;
            });
            break;
            
        case 'image':
            document.getElementById('imageUpload').click();
            return null;
            
        case 'button':
            element = document.createElement('div');
            element.style.cssText = 'text-align: center; margin: 20px 0;';
            element.innerHTML = '<a href="#" class="editable-button" style="display: inline-block; background: linear-gradient(135deg, #d89ab3, #b794a8); color: white; padding: 12px 24px; text-decoration: none; border-radius: 8px; font-weight: 600; transition: transform 0.2s ease;">Cliquez ici</a>';
            element.className = 'editable-element';
            break;
            
        case 'divider':
            element = document.createElement('hr');
            element.style.cssText = 'margin: 30px 0; border: none; border-top: 2px solid #e2e8f0;';
            element.className = 'editable-element';
            break;
            
        case 'columns':
            element = document.createElement('div');
            element.style.cssText = 'display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;';
            element.innerHTML = `
                <div style="padding: 15px; background: #f8fafc; border-radius: 6px; min-height: 100px;" class="editable-text" contenteditable="false" ondblclick="this.contentEditable=true; this.focus();" onblur="this.contentEditable=false;">
                    <h3>Colonne 1</h3>
                    <p>Contenu de la premi√®re colonne...</p>
                </div>
                <div style="padding: 15px; background: #f8fafc; border-radius: 6px; min-height: 100px;" class="editable-text" contenteditable="false" ondblclick="this.contentEditable=true; this.focus();" onblur="this.contentEditable=false;">
                    <h3>Colonne 2</h3>
                    <p>Contenu de la deuxi√®me colonne...</p>
                </div>
            `;
            element.className = 'editable-element';
            break;
            
        case 'products':
            openModal('productsModal');
            return null;
            
        case 'promotion':
            element = document.createElement('div');
            element.style.cssText = 'background: linear-gradient(135deg, #f59e0b, #f97316); color: white; padding: 20px; border-radius: 8px; text-align: center; margin: 20px 0;';
            element.innerHTML = `
                <h3 style="margin: 0 0 10px 0; font-size: 24px; color: white;" class="editable-color" onclick="changeElementColor(this)">üéâ PROMOTION SP√âCIALE</h3>
                <p style="margin: 0 0 15px 0; font-size: 18px; color: white;" class="editable-text" contenteditable="false" ondblclick="this.contentEditable=true; this.focus();" onblur="this.contentEditable=false;">-25% sur toute la collection</p>
                <p style="margin: 0; font-size: 14px; color: white;" class="editable-text" contenteditable="false" ondblclick="this.contentEditable=true; this.focus();" onblur="this.contentEditable=false;">Code: PROMO25 ‚Ä¢ Valable jusqu'au 31/12/2025</p>
            `;
            element.className = 'editable-element';
            break;
            
        case 'unsubscribe':
            element = document.createElement('div');
            element.style.cssText = 'text-align: center; margin: 30px 0; padding: 15px; background: #f8fafc; border-radius: 8px;';
            element.innerHTML = `
                <p style="font-size: 12px; color: #64748b; margin-bottom: 10px;">
                    Vous recevez cet email car vous √™tes abonn√©(e) √† notre newsletter
                </p>
                <p style="font-size: 12px;">
                    <a href="{{unsubscribeUrl}}" style="color: #64748b;">Se d√©sabonner</a> | 
                    <a href="{{preferencesUrl}}" style="color: #64748b;">G√©rer mes pr√©f√©rences</a>
                </p>
            `;
            element.className = 'editable-element';
            break;
            
        default:
            showNotification(`‚ùå Bloc "${blockType}" non reconnu`, 'error');
            return null;
    }

    return element;
}

// ===== √âDITION COULEURS ET BOUTONS =====
function changeElementColor(element) {
    const colorInput = document.createElement('input');
    colorInput.type = 'color';
    
    // D√©tecter la couleur actuelle
    const currentColor = getComputedStyle(element).color;
    colorInput.value = rgbToHex(currentColor) || '#000000';
    
    colorInput.style.position = 'absolute';
    colorInput.style.opacity = '0';
    document.body.appendChild(colorInput);
    
    colorInput.addEventListener('change', function() {
        element.style.color = this.value;
        scheduleAutoSave();
        document.body.removeChild(this);
        showNotification('üé® Couleur du texte modifi√©e', 'success');
    });
    
    colorInput.click();
}

function changeElementBackground(element) {
    const colorInput = document.createElement('input');
    colorInput.type = 'color';
    
    // D√©tecter la couleur de fond actuelle
    const currentBg = getComputedStyle(element).backgroundColor;
    colorInput.value = rgbToHex(currentBg) || '#ffffff';
    
    colorInput.style.position = 'absolute';
    colorInput.style.opacity = '0';
    document.body.appendChild(colorInput);
    
    colorInput.addEventListener('change', function() {
        if (element.classList.contains('editable-button')) {
            // Pour les boutons, utiliser un gradient
            element.style.background = `linear-gradient(135deg, ${this.value}, ${this.value}dd)`;
        } else {
            element.style.backgroundColor = this.value;
        }
        scheduleAutoSave();
        document.body.removeChild(this);
        showNotification('üé® Couleur de fond modifi√©e', 'success');
    });
    
    colorInput.click();
}

function editButton(button) {
    currentButton = button;
    
    // Remplir les champs du modal
    document.getElementById('buttonText').value = button.textContent.trim();
    document.getElementById('buttonUrl').value = button.href || '#';
    document.getElementById('buttonBgColor').value = '#d89ab3';
    document.getElementById('buttonTextColor').value = '#ffffff';
    document.getElementById('buttonNewTab').checked = button.target === '_blank';
    
    openModal('buttonModal');
}

function saveButtonChanges() {
    if (!currentButton) return;
    
    const text = document.getElementById('buttonText').value;
    const url = document.getElementById('buttonUrl').value;
    const bgColor = document.getElementById('buttonBgColor').value;
    const textColor = document.getElementById('buttonTextColor').value;
    const newTab = document.getElementById('buttonNewTab').checked;
    
    currentButton.textContent = text;
    currentButton.href = url;
    currentButton.style.background = `linear-gradient(135deg, ${bgColor}, ${bgColor}dd)`;
    currentButton.style.color = textColor;
    currentButton.target = newTab ? '_blank' : '';
    
    closeModal('buttonModal');
    updatePreview();
    showNotification('‚úÖ Bouton modifi√©', 'success');
    scheduleAutoSave();
    currentButton = null;
}

// ===== UTILITAIRES COULEUR =====
function rgbToHex(rgb) {
    if (!rgb || rgb === 'rgba(0, 0, 0, 0)') return null;
    
    const match = rgb.match(/\d+/g);
    if (!match) return null;
    
    const r = parseInt(match[0]);
    const g = parseInt(match[1]);
    const b = parseInt(match[2]);
    
    return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
}

// ===== DRAG & DROP =====
function initializeDragDrop() {
    const dropZone = document.getElementById('dropZone');
    const emailContent = document.getElementById('emailContent');

    if (dropZone && emailContent) {
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, preventDefaults, false);
            emailContent.addEventListener(eventName, preventDefaults, false);
        });

        ['dragenter', 'dragover'].forEach(eventName => {
            dropZone.addEventListener(eventName, () => dropZone.classList.add('dragover'), false);
            emailContent.addEventListener(eventName, () => emailContent.style.border = '2px dashed #d89ab3', false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, () => dropZone.classList.remove('dragover'), false);
            emailContent.addEventListener(eventName, () => emailContent.style.border = '2px solid var(--primary)', false);
        });

        dropZone.addEventListener('drop', handleDrop);
        emailContent.addEventListener('drop', handleDrop);
        dropZone.addEventListener('click', () => document.getElementById('imageUpload').click());
    }
}

function preventDefaults(e) {
    e.preventDefault();
    e.stopPropagation();
}

function handleDrop(e) {
    const files = e.dataTransfer.files;
    if (files.length > 0) {
        Array.from(files).forEach(file => {
            if (file.type.startsWith('image/')) {
                processImageFile(file);
            }
        });
    }
}

function processImageFile(file) {
    if (file.size > 5 * 1024 * 1024) {
        showNotification('‚ö†Ô∏è Image trop grande (max 5MB)', 'warning');
        return;
    }

    const reader = new FileReader();
    reader.onload = function(e) {
        insertResizableImage(e.target.result);
    };
    reader.readAsDataURL(file);
}

// ===== IMAGES REDIMENSIONNABLES =====
function insertResizableImage(src) {
    const emailContent = document.getElementById('emailContent');
    const selection = window.getSelection();
    
    const container = document.createElement('div');
    container.className = 'resizable-image editable-element';
    container.style.cssText = 'display: inline-block; position: relative; margin: 10px 5px; max-width: 300px; width: auto;';
    
    const img = document.createElement('img');
    img.src = src;
    img.style.cssText = 'display: block; width: 100%; height: auto; border-radius: 8px; max-width: 300px;';
    img.draggable = false;
    
    container.appendChild(img);
    
    const handles = document.createElement('div');
    handles.className = 'resize-handles';
    handles.innerHTML = `
        <div class="resize-handle nw" data-direction="nw"></div>
        <div class="resize-handle ne" data-direction="ne"></div>
        <div class="resize-handle sw" data-direction="sw"></div>
        <div class="resize-handle se" data-direction="se"></div>
    `;
    container.appendChild(handles);

    handles.querySelectorAll('.resize-handle').forEach(handle => {
        handle.addEventListener('mousedown', startResize);
    });

    if (selection.rangeCount > 0) {
        const range = selection.getRangeAt(0);
        range.deleteContents();
        range.insertNode(container);
    } else {
        emailContent.appendChild(container);
    }

    updatePreview();
    showNotification('üì∑ Image redimensionnable ajout√©e', 'success');
}

function startResize(e) {
    e.preventDefault();
    const handle = e.target;
    const container = handle.closest('.resizable-image');
    const img = container.querySelector('img');
    
    resizeData = {
        container: container,
        img: img,
        direction: handle.dataset.direction,
        startX: e.clientX,
        startY: e.clientY,
        startWidth: img.offsetWidth,
        startHeight: img.offsetHeight
    };

    document.addEventListener('mousemove', doResize);
    document.addEventListener('mouseup', stopResize);
    
    container.style.cursor = getComputedStyle(handle).cursor;
}

function doResize(e) {
    if (!resizeData) return;

    const deltaX = e.clientX - resizeData.startX;
    let newWidth = resizeData.startWidth;
    
    if (resizeData.direction.includes('e')) {
        newWidth = resizeData.startWidth + deltaX;
    }
    if (resizeData.direction.includes('w')) {
        newWidth = resizeData.startWidth - deltaX;
    }
    
    // Garder des proportions coh√©rentes
    newWidth = Math.max(100, Math.min(600, newWidth));
    
    resizeData.img.style.width = newWidth + 'px';
    resizeData.container.style.width = newWidth + 'px';
}

function stopResize() {
    if (resizeData) {
        resizeData.container.style.cursor = '';
        resizeData = null;
        updatePreview();
    }
    document.removeEventListener('mousemove', doResize);
    document.removeEventListener('mouseup', stopResize);
}

// ===== VARIABLES =====
function insertVariable(variable) {
    console.log(`üîß Insertion de la variable: ${variable}`);
    
    try {
        const emailContent = document.getElementById('emailContent');
        if (!emailContent) return;

        emailContent.focus();
        const selection = window.getSelection();
        
        if (selection.rangeCount > 0) {
            const range = selection.getRangeAt(0);
            const textNode = document.createTextNode(variable);
            range.deleteContents();
            range.insertNode(textNode);
            
            range.setStartAfter(textNode);
            range.collapse(true);
            selection.removeAllRanges();
            selection.addRange(range);
        } else {
            const textNode = document.createTextNode(` ${variable}`);
            emailContent.appendChild(textNode);
        }
        
        updatePreview();
        showNotification(`‚úÖ Variable "${variable}" ins√©r√©e`, 'success');
        scheduleAutoSave();
        
    } catch (error) {
        console.error('‚ùå Erreur insertion variable:', error);
        showNotification('‚ùå Erreur lors de l\'insertion', 'error');
    }
}

// ===== GESTION DES CLIENTS =====
function loadClients() {
    filterRecipients(currentFilter);
}

function displayClients(clients) {
    const clientsList = document.getElementById('clientsList');
    if (!clientsList) return;

    allVisibleClients = clients; // AJOUT

    if (clients.length === 0) {
        clientsList.innerHTML = '<div style="color: var(--text-secondary); text-align: center; padding: 20px;">Aucun client trouv√©</div>';
        updateSelectAllToggle(); // AJOUT
        return;
    }

    const clientsHtml = clients.map(client => `
        <div class="client-item ${selectedClients.includes(client.id) ? 'selected' : ''}" 
             data-client-id="${client.id}" 
             onclick="toggleClientSelection(${client.id})">
            <div class="client-name">${client.name || client.email}</div>
            <div class="client-email">${client.email}</div>
            ${client.total_orders > 0 ? `<div class="client-type">üí∞ ${client.total_orders} commandes</div>` : ''}
            ${client.customer_type === 'vip' ? `<div class="client-type">üíé VIP</div>` : ''}
        </div>
    `).join('');

    clientsList.innerHTML = clientsHtml;
    updateSelectAllToggle(); // AJOUT
}

function toggleClientSelection(clientId) {
    if (!clientId) return;
    
    const clientItem = document.querySelector(`[data-client-id="${clientId}"]`);
    if (!clientItem) return;

    const isSelected = selectedClients.includes(clientId);
    
    if (isSelected) {
        selectedClients = selectedClients.filter(id => id !== clientId);
        clientItem.classList.remove('selected');
        console.log(`üë§ Client ${clientId} d√©s√©lectionn√© - Reste: ${selectedClients.length} clients`);
    } else {
        selectedClients.push(clientId);
        clientItem.classList.add('selected');
        console.log(`üë§ Client ${clientId} s√©lectionn√© - Total: ${selectedClients.length} clients`);
    }

    // Animation de feedback
    clientItem.classList.add('selecting');
    setTimeout(() => clientItem.classList.remove('selecting'), 200);

    updateRecipientCounter();
    updateSelectAllToggle();
    
    // Debug pour v√©rifier la s√©lection
    console.log('üîç Clients actuellement s√©lectionn√©s:', selectedClients);
}

function filterRecipients(filter) {
    console.log(`üîç Filtrage: ${filter}`);
    
    try {
        document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
        const filterBtn = document.querySelector(`[data-filter="${filter}"]`);
        if (filterBtn) filterBtn.classList.add('active');

        currentFilter = filter;
        
        let filteredClients = [];
        if (filter === 'all') {
            filteredClients = allCustomers;
        } else if (filter === 'newsletter') {
            filteredClients = allCustomers.filter(client => client.newsletter_subscribed);
        } else if (filter === 'with-orders') {
            filteredClients = allCustomers.filter(client => client.total_orders > 0);
        } else if (filter === 'vip') {
            filteredClients = allCustomers.filter(client => client.customer_type === 'vip');
        }
        
        displayClients(filteredClients);
        updateRecipientCounter();
        showNotification(`üîç Filtre "${filter}" appliqu√©`, 'info');
        
    } catch (error) {
        console.error('‚ùå Erreur filtrage:', error);
    }
}

function searchClients(query) {
    if (!query.trim()) {
        filterRecipients(currentFilter);
        return;
    }

    const filteredClients = allCustomers.filter(client => 
        client.name?.toLowerCase().includes(query.toLowerCase()) ||
        client.email?.toLowerCase().includes(query.toLowerCase())
    );
    displayClients(filteredClients);
    console.log(`üîç Recherche "${query}": ${filteredClients.length} r√©sultats`);
}

function updateRecipientCounter() {
    const counter = document.getElementById('recipientCount');
    if (counter) {
        counter.textContent = selectedClients.length;
    }
}

// ===== PREVIEW =====
function updatePreview() {
    const subject = document.getElementById('emailSubject')?.value || 'üéâ D√©couvrez nos nouveaut√©s !';
    const preheader = document.getElementById('emailPreheader')?.value || 'Texte de pr√©visualisation';
    
    const previewSubject = document.getElementById('previewSubject');
    const previewPreheader = document.getElementById('previewPreheader');
    
    if (previewSubject) previewSubject.textContent = subject;
    if (previewPreheader) previewPreheader.textContent = preheader;
    
    scheduleAutoSave();
}

function switchPreviewMode(mode) {
    const previewBtns = document.querySelectorAll('.preview-btn');
    const emailPreview = document.getElementById('emailPreview');
    
    previewBtns.forEach(btn => btn.classList.remove('active'));
    document.querySelector(`[data-mode="${mode}"]`)?.classList.add('active');
    
    if (mode === 'mobile') {
        emailPreview.classList.add('mobile');
        showNotification('üì± Vue iPhone 14 activ√©e', 'info');
    } else {
        emailPreview.classList.remove('mobile');
        showNotification('üñ•Ô∏è Vue desktop activ√©e', 'info');
    }
}

// ===== ACTIONS PRINCIPALES =====
async function saveAsDraft() {
    console.log('üíæ Sauvegarde en brouillon...');
    
    try {
        const campaignData = {
            name: document.getElementById('campaignName')?.value || 'Campagne sans nom',
            subject: document.getElementById('emailSubject')?.value || '',
            preheader: document.getElementById('emailPreheader')?.value || '',
            content: document.getElementById('emailContent')?.innerHTML || '',
            fromName: document.getElementById('senderName')?.value || 'CrystosJewel',
            template: currentTemplate,
            recipientType: currentFilter,
            selectedCustomerIds: selectedClients
        };

        const response = await fetch('/admin/marketing/api/save-draft', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(campaignData)
        });

        const result = await response.json();

        if (result.success) {
            showNotification('üíæ Brouillon sauvegard√© avec succ√®s', 'success');
        } else {
            throw new Error(result.message || 'Erreur de sauvegarde');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur sauvegarde:', error);
        showNotification('‚ùå Erreur lors de la sauvegarde', 'error');
    }
}

async function sendTestEmail() {
    console.log('üß™ Envoi d\'email de test...');
    
    try {
        const email = document.getElementById('testEmail')?.value;
        const subject = document.getElementById('emailSubject')?.value;
        const content = document.getElementById('emailContent')?.innerHTML;

        if (!email || !subject || !content) {
            showNotification('‚ö†Ô∏è Email, sujet et contenu requis', 'warning');
            return;
        }

        const testData = {
            email: email,
            subject: subject,
            content: content,
            template: currentTemplate
        };

        const response = await fetch('/admin/marketing/api/send-test', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(testData)
        });

        const result = await response.json();

        if (result.success) {
            showNotification(`üß™ Email de test envoy√© √† ${email}`, 'success');
            closeModal('testModal');
        } else {
            throw new Error(result.message || 'Erreur d\'envoi');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur envoi test:', error);
        showNotification('‚ùå Erreur lors de l\'envoi du test', 'error');
    }
}

async function confirmSendCampaign() {
    console.log('üìß Envoi de la campagne avec header styl√©...');
    
    try {
        const campaignName = document.getElementById('campaignName')?.value;
        const subject = document.getElementById('emailSubject')?.value;
        
        // MODIFICATION IMPORTANTE: Inclure le header avec styles inline
        const emailHeader = document.querySelector('.email-header');
        const emailContent = document.getElementById('emailContent');
        const emailFooter = document.querySelector('.email-footer');
        
        let fullEmailContent = '';
        
        // Inclure le header avec styles inline complets
        if (emailHeader) {
            const headerSubject = document.getElementById('previewSubject')?.textContent || subject;
            const headerPreheader = document.getElementById('previewPreheader')?.textContent || '';
            
            fullEmailContent += `
                <div style="background: linear-gradient(135deg, #d89ab3, #b794a8); color: white; padding: 20px; font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;">
                    <div style="font-size: 1.4rem; font-weight: 700; margin-bottom: 5px; line-height: 1.2;">${headerSubject}</div>
                    <div style="font-size: 14px; opacity: 0.9; line-height: 1.4;">${headerPreheader}</div>
                </div>
            `;
        }
        
        // Inclure le contenu principal avec styles de base
        if (emailContent) {
            fullEmailContent += `
                <div style="padding: 20px; font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif; font-size: 14px; line-height: 1.6; color: #1e293b;">
                    ${emailContent.innerHTML}
                </div>
            `;
        }
        
        // Inclure le footer avec styles inline
        if (emailFooter) {
            fullEmailContent += `
                <div style="background: #f8fafc; padding: 15px 20px; font-size: 12px; color: #64748b; border-top: 1px solid #e2e8f0; font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;">
                    ${emailFooter.innerHTML}
                </div>
            `;
        }

        if (!campaignName?.trim()) {
            showNotification('‚ö†Ô∏è Nom de campagne requis', 'warning');
            return;
        }

        if (!subject?.trim()) {
            showNotification('‚ö†Ô∏è Sujet de l\'email requis', 'warning');
            return;
        }

        if (!fullEmailContent?.trim()) {
            showNotification('‚ö†Ô∏è Contenu de l\'email requis', 'warning');
            return;
        }

        // CORRECTION IMPORTANTE: V√©rifier que selectedClients n'est pas vide
        if (selectedClients.length === 0) {
            showNotification('‚ö†Ô∏è Aucun destinataire s√©lectionn√©', 'warning');
            return;
        }

        console.log(`üìß Envoi √† ${selectedClients.length} clients s√©lectionn√©s:`, selectedClients);

        const campaignData = {
            name: campaignName,
            subject: subject,
            content: fullEmailContent, // Contenu complet avec styles inline
            preheader: document.getElementById('emailPreheader')?.value || '',
            fromName: document.getElementById('senderName')?.value || 'CrystosJewel',
            template: currentTemplate,
            recipientType: currentFilter,
            selectedCustomerIds: selectedClients, // IMPORTANT: Seulement les clients s√©lectionn√©s
            includeHeader: true
        };

        // D√©sactiver le bouton pendant l'envoi
        const sendBtn = document.getElementById('finalSendBtn');
        if (sendBtn) {
            sendBtn.disabled = true;
            sendBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Envoi en cours...';
        }

        const response = await fetch('/admin/marketing/api/send-campaign', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(campaignData)
        });

        const result = await response.json();

        if (result.success) {
            showNotification(`üìß Campagne "${campaignName}" envoy√©e avec succ√®s √† ${selectedClients.length} destinataires ! üéâ`, 'success');
            closeModal('sendModal');
            
            // Nettoyer le formulaire
            document.getElementById('campaignName').value = '';
            document.getElementById('emailSubject').value = '';
            document.getElementById('emailPreheader').value = '';
            document.getElementById('emailContent').innerHTML = '';
            selectedClients = [];
            updateRecipientCounter();
            updateSelectAllToggle();
            updatePreview();
        } else {
            throw new Error(result.message || 'Erreur d\'envoi');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur envoi campagne:', error);
        showNotification('‚ùå Erreur lors de l\'envoi de la campagne', 'error');
    } finally {
        // R√©activer le bouton
        const sendBtn = document.getElementById('finalSendBtn');
        if (sendBtn) {
            sendBtn.disabled = false;
            sendBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Envoyer maintenant';
        }
    }
}

function previewEmail() {
    console.log('üëÅÔ∏è Aper√ßu de l\'email...');
    
    try {
        const emailPreview = document.getElementById('emailPreview');
        if (emailPreview) {
            const subject = document.getElementById('emailSubject')?.value || 'Email Preview';
            const newWindow = window.open('', '_blank', 'width=800,height=600');
            newWindow.document.write(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>${subject}</title>
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <style>
                        body { 
                            font-family: Arial, sans-serif; 
                            margin: 0; 
                            padding: 20px; 
                            background: #f8fafc;
                        }
                        .email-container {
                            max-width: 600px;
                            margin: 0 auto;
                            background: white;
                            border-radius: 8px;
                            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
                            overflow: hidden;
                        }
                        .two-columns {
                            display: grid !important;
                            grid-template-columns: 1fr 1fr !important;
                            gap: 20px !important;
                        }
                        @media (max-width: 600px) {
                            .email-container { width: 100% !important; }
                            .two-columns { 
                                grid-template-columns: 1fr 1fr !important;
                                gap: 10px !important;
                            }
                        }
                    </style>
                </head>
                <body>
                    <div class="email-container">
                        ${emailPreview.outerHTML}
                    </div>
                </body>
                </html>
            `);
            newWindow.document.close();
            showNotification('üëÅÔ∏è Aper√ßu ouvert dans un nouvel onglet', 'info');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur aper√ßu:', error);
        showNotification('‚ùå Erreur lors de l\'aper√ßu', 'error');
    }
}

// ===== GESTION DES PRODUITS =====
function toggleProductSelection(cardElement) {
    const productId = cardElement.dataset.productId;
    console.log('üõçÔ∏è Toggle produit:', productId);
    
    if (selectedProducts.includes(productId)) {
        selectedProducts = selectedProducts.filter(id => id !== productId);
        cardElement.classList.remove('selected');
        console.log('‚ùå Produit d√©s√©lectionn√©:', productId);
    } else {
        selectedProducts.push(productId);
        cardElement.classList.add('selected');
        console.log('‚úÖ Produit s√©lectionn√©:', productId);
    }
    
    console.log('üì¶ Produits actuellement s√©lectionn√©s:', selectedProducts);
}


function insertSelectedProducts() {
    if (selectedProducts.length === 0) {
        showNotification('‚ö†Ô∏è S√©lectionnez au moins un produit', 'warning');
        return;
    }
    
    const emailContent = document.getElementById('emailContent');
    
    let productsHtml = '<div class="products-container editable-element editable-background" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0;">';
    
    selectedProducts.forEach(productId => {
    const product = allJewels.find(p => p.id == productId);
    if (product) {
        productsHtml += `
            <div style="border: 1px solid #e2e8f0; border-radius: 8px; padding: 15px; text-align: center; background: white; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                <img src="${product.imageUrl}" alt="${product.name}" style="width: 100%; height: 120px; object-fit: cover; border-radius: 4px; margin-bottom: 10px;">
                <h4 style="color: #1e293b; margin: 0 0 8px 0; font-size: 16px;">${product.name}</h4>
                <p style="color: #d89ab3; font-weight: 600; font-size: 18px; margin: 0 0 15px 0;">${product.formattedPrice}</p>
                <a href="/bijoux/${product.slug}" style="display: inline-block; background: linear-gradient(135deg, #d89ab3, #b794a8); color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px; font-size: 14px;">Voir le produit</a>
            </div>
        `;
    }
});
    
    productsHtml += '</div>';
    
    const selection = window.getSelection();
    if (selection.rangeCount > 0) {
        const range = selection.getRangeAt(0);
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = productsHtml;
        range.deleteContents();
        range.insertNode(tempDiv.firstChild);
    } else {
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = productsHtml;
        emailContent.appendChild(tempDiv.firstChild);
    }
    
    closeModal('productsModal');
    showNotification(`‚úÖ ${selectedProducts.length} produit(s) ins√©r√©(s)`, 'success');
    
    // R√©initialiser la s√©lection
    selectedProducts = [];
    document.querySelectorAll('.product-card').forEach(card => {
        card.classList.remove('selected');
    });
    
    scheduleAutoSave();
    updatePreview();
}

// ===== SAUVEGARDE AUTOMATIQUE =====
function startAutoSave() {
    console.log('üíæ D√©marrage de la sauvegarde automatique...');
    
    setInterval(() => {
        if (Date.now() - lastSaveTime > 30000) {
            autoSave();
        }
    }, 30000);
}

function scheduleAutoSave() {
    lastSaveTime = Date.now();
    
    if (autoSaveTimer) {
        clearTimeout(autoSaveTimer);
    }
    
    autoSaveTimer = setTimeout(() => {
        autoSave();
    }, 3000);
}

function autoSave() {
    try {
        const campaignData = {
            name: document.getElementById('campaignName')?.value || 'Campagne sans nom',
            subject: document.getElementById('emailSubject')?.value || '',
            preheader: document.getElementById('emailPreheader')?.value || '',
            content: document.getElementById('emailContent')?.innerHTML || '',
            template: currentTemplate,
            recipients: selectedClients,
            timestamp: new Date().toISOString()
        };

        // Simulation de sauvegarde locale pour le d√©veloppement
        if (typeof localStorage !== 'undefined') {
            localStorage.setItem('email_draft', JSON.stringify(campaignData));
        }
        showAutoSaveIndicator();
        console.log('üíæ Sauvegarde automatique effectu√©e');
        
    } catch (error) {
        console.error('‚ùå Erreur sauvegarde automatique:', error);
    }
}

function showAutoSaveIndicator() {
    const indicator = document.getElementById('autoSaveIndicator');
    if (indicator) {
        indicator.classList.add('visible');
        setTimeout(() => {
            indicator.classList.remove('visible');
        }, 2000);
    }
}

// ===== TOOLBAR CONTEXTUELLE =====
function handleContentClick(e) {
    const element = e.target.closest('.editable-element');
    if (element && !e.target.classList.contains('editable-text')) {
        selectedElement = element;
        showContextualToolbar(e.clientX, e.clientY);
    } else {
        hideContextualToolbar();
    }
}

function showContextualToolbar(x, y) {
    const toolbar = document.getElementById('contextualToolbar');
    if (toolbar) {
        toolbar.style.left = x + 'px';
        toolbar.style.top = (y - 50) + 'px';
        toolbar.classList.add('show');
    }
}

function hideContextualToolbar() {
    const toolbar = document.getElementById('contextualToolbar');
    if (toolbar) {
        toolbar.classList.remove('show');
    }
    selectedElement = null;
}

function editElement() {
    if (selectedElement) {
        showNotification('‚úèÔ∏è Double-cliquez pour √©diter le texte', 'info');
        hideContextualToolbar();
    }
}

function duplicateElement() {
    if (selectedElement) {
        const clone = selectedElement.cloneNode(true);
        selectedElement.parentNode.insertBefore(clone, selectedElement.nextSibling);
        updatePreview();
        hideContextualToolbar();
        showNotification('‚úÖ √âl√©ment dupliqu√©', 'success');
    }
}

function deleteElement() {
    if (selectedElement) {
        selectedElement.style.animation = 'fadeOut 0.3s ease';
        setTimeout(() => {
            selectedElement.remove();
            updatePreview();
            hideContextualToolbar();
            showNotification('‚úÖ √âl√©ment supprim√©', 'success');
        }, 300);
    }
}

// ===== MODALS =====
function openModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        if (modalId === 'sendModal') {
            prepareSendModal();
        }
        modal.classList.add('active');
    }
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.remove('active');
    }
}

function prepareSendModal() {
    const recipientType = currentFilter;
    const recipientCount = selectedClients.length; // IMPORTANT: Utiliser selectedClients.length
    const campaignName = document.getElementById('campaignName')?.value || 'Campagne sans nom';
    const subject = document.getElementById('emailSubject')?.value || 'Email sans sujet';
    
    const summary = document.getElementById('sendSummary');
    if (summary) {
        summary.innerHTML = `
            <div style="background: var(--bg-primary); padding: 20px; border-radius: var(--radius); margin-bottom: 20px;">
                <h4 style="margin: 0 0 15px 0;">üìß R√©sum√© de la campagne</h4>
                <p><strong>Nom:</strong> ${campaignName}</p>
                <p><strong>Sujet:</strong> ${subject}</p>
                <p><strong>Type de destinataires:</strong> ${getFilterLabel(recipientType)}</p>
                <p><strong>Destinataires s√©lectionn√©s:</strong> <span style="color: #FF1493; font-weight: bold; font-size: 18px;">${recipientCount}</span></p>
                <p><strong>Header inclus:</strong> <span style="color: #10b981;">‚úÖ Oui (avec styles)</span></p>
            </div>
            <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: var(--radius); padding: 15px; margin-bottom: 20px;">
                <p style="margin: 0; color: #856404;"><strong>‚ö†Ô∏è Attention:</strong> Cette action enverra imm√©diatement l'email complet (header styl√© + contenu + footer) aux <strong>${recipientCount} destinataires s√©lectionn√©s UNIQUEMENT</strong>.</p>
            </div>
            ${recipientCount === 0 ? `
                <div style="background: #fef2f2; border: 1px solid #fecaca; border-radius: var(--radius); padding: 15px; margin-bottom: 20px;">
                    <p style="margin: 0; color: #dc2626;"><strong>‚ùå Erreur:</strong> Aucun destinataire s√©lectionn√© ! Veuillez s√©lectionner au moins un client.</p>
                </div>
            ` : ''}
        `;
    }
}

function getFilteredCount(filter) {
    switch(filter) {
        case 'newsletter': return customerStats.newsletter || 0;
        case 'vip': return customerStats.vip || 0;
        case 'with-orders': return customerStats.withOrders || 0;
        case 'all': return customerStats.all || 0;
        default: return 0;
    }
}

function getFilterLabel(filter) {
    const labels = {
        'newsletter': 'Abonn√©s newsletter',
        'vip': 'Clients VIP',
        'with-orders': 'Clients avec commandes',
        'all': 'Tous les clients',
        'selected': 'Clients s√©lectionn√©s'
    };
    return labels[filter] || filter;
}

function insertLink() {
    const text = document.getElementById('linkText').value;
    const url = document.getElementById('linkUrl').value;
    const newTab = document.getElementById('linkNewTab').checked;
    
    if (!text || !url) {
        showNotification('‚ö†Ô∏è Veuillez remplir tous les champs', 'warning');
        return;
    }
    
    const emailContent = document.getElementById('emailContent');
    emailContent.focus();
    
    const link = document.createElement('a');
    link.href = url;
    link.textContent = text;
    link.className = 'editable-color';
    link.style.cssText = 'color: #d89ab3; text-decoration: underline;';
    if (newTab) {
        link.target = '_blank';
    }
    
    const selection = window.getSelection();
    if (selection.rangeCount > 0) {
        const range = selection.getRangeAt(0);
        range.deleteContents();
        range.insertNode(link);
    } else {
        emailContent.appendChild(link);
    }
    
    closeModal('linkModal');
    updatePreview();
    showNotification('‚úÖ Lien ins√©r√©', 'success');
    scheduleAutoSave();
    
    // Reset form
    document.getElementById('linkText').value = '';
    document.getElementById('linkUrl').value = '';
    document.getElementById('linkNewTab').checked = false;
}

function handleImageUpload(event) {
    console.log('üì∑ Upload d\'image...');
    
    try {
        const files = Array.from(event.target.files);
        if (files.length === 0) return;

        files.forEach(file => {
            if (!file.type.startsWith('image/')) {
                showNotification('‚ö†Ô∏è Veuillez s√©lectionner des images uniquement', 'warning');
                return;
            }

            if (file.size > 5 * 1024 * 1024) {
                showNotification('‚ö†Ô∏è Image trop grande (max 5MB)', 'warning');
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                const imageUrl = e.target.result;
                
                // Ajouter √† la galerie
                const uploadedImages = document.getElementById('uploadedImages');
                if (uploadedImages) {
                    const imageContainer = document.createElement('div');
                    imageContainer.style.cssText = 'margin-bottom: 10px; position: relative; border-radius: 8px; overflow: hidden; border: 1px solid var(--border);';
                    imageContainer.innerHTML = `
                        <img src="${imageUrl}" alt="Image upload√©e" style="width: 100%; max-height: 80px; object-fit: cover; cursor: pointer; transition: transform 0.2s;" onclick="insertResizableImage('${imageUrl}')">
                        <button onclick="this.parentElement.remove()" style="position: absolute; top: 5px; right: 5px; background: var(--danger); color: white; border: none; border-radius: 50%; width: 24px; height: 24px; cursor: pointer; font-size: 12px; display: flex; align-items: center; justify-content: center; box-shadow: 0 2px 8px rgba(0,0,0,0.2);">√ó</button>
                    `;
                    uploadedImages.appendChild(imageContainer);
                }
                
                // Ins√©rer directement dans l'√©diteur
                insertResizableImage(imageUrl);
                
                showNotification('üì∑ Image redimensionnable ajout√©e', 'success');
            };
            reader.readAsDataURL(file);
        });
        
        event.target.value = '';
        
    } catch (error) {
        console.error('‚ùå Erreur upload:', error);
        showNotification('‚ùå Erreur lors de l\'upload', 'error');
    }
}

// Sauvegarder automatiquement dans localStorage
function saveToLocalStorage() {
    const draftData = {
        campaignName: document.getElementById('campaignName')?.value || '',
        emailSubject: document.getElementById('emailSubject')?.value || '',
        emailPreheader: document.getElementById('emailPreheader')?.value || '',
        emailContent: document.getElementById('emailContent')?.innerHTML || '',
        selectedClients: selectedClients,
        timestamp: new Date().toISOString()
    };
    
    localStorage.setItem('email_editor_draft', JSON.stringify(draftData));
    console.log('üíæ Draft sauvegard√© localement');
}

// Restaurer au chargement de la page
function loadFromLocalStorage() {
    try {
        const saved = localStorage.getItem('email_editor_draft');
        if (saved) {
            const draftData = JSON.parse(saved);
            
            document.getElementById('campaignName').value = draftData.campaignName || '';
            document.getElementById('emailSubject').value = draftData.emailSubject || '';
            document.getElementById('emailPreheader').value = draftData.emailPreheader || '';
            document.getElementById('emailContent').innerHTML = draftData.emailContent || '';
            selectedClients = draftData.selectedClients || [];
            
            updatePreview();
            updateRecipientCounter();
            console.log('üìÇ Draft restaur√© depuis localStorage');
            showNotification('üìÇ Brouillon restaur√©', 'info');
        }
    } catch (error) {
        console.error('‚ùå Erreur restauration draft:', error);
    }
}



// ===== RACCOURCIS CLAVIER =====
function handleKeyboardShortcuts(e) {
    if (e.ctrlKey || e.metaKey) {
        switch(e.key) {
            case 's':
                e.preventDefault();
                saveAsDraft();
                break;
            case 'Enter':
                if (e.shiftKey) {
                    e.preventDefault();
                    openModal('testModal');
                }
                break;
            case 'p':
                e.preventDefault();
                previewEmail();
                break;
            case 'b':
                e.preventDefault();
                executeFormatCommand('bold');
                break;
            case 'i':
                e.preventDefault();
                executeFormatCommand('italic');
                break;
            case 'u':
                e.preventDefault();
                executeFormatCommand('underline');
                break;
        }
    }
    
    if (e.key === 'Delete' && selectedElement) {
        deleteElement();
    }
    
    // Mise √† jour des boutons de formatage
    if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(e.key)) {
        setTimeout(updateButtonStates, 10);
    }
}

// ===== UTILITAIRES =====
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease forwards';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 300);
    }, 3000);
}

// NOUVELLES VARIABLES (ajouter au d√©but du script)
let allVisibleClients = [];
let autoSelectMode = false;

// NOUVELLE FONCTION: S√©lectionner une cat√©gorie ET tous ses clients
function selectCategoryAndClients(filter) {
    console.log(`üéØ S√©lection automatique de la cat√©gorie: ${filter}`);
    
    autoSelectMode = true;
    
    try {
        // 1. Activer le filtre
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.classList.remove('active', 'auto-selected');
        });
        
        const filterBtn = document.querySelector(`[data-filter="${filter}"]`);
        if (filterBtn) {
            filterBtn.classList.add('active', 'auto-selected');
        }

        currentFilter = filter;
        
        // 2. Filtrer les clients selon la cat√©gorie
        let filteredClients = [];
        if (filter === 'all') {
            filteredClients = allCustomers;
        } else if (filter === 'newsletter') {
            filteredClients = allCustomers.filter(client => client.newsletter_subscribed);
        } else if (filter === 'with-orders') {
            filteredClients = allCustomers.filter(client => client.total_orders > 0);
        } else if (filter === 'vip') {
            filteredClients = allCustomers.filter(client => client.customer_type === 'vip');
        }
        
        // 3. Afficher les clients
        displayClients(filteredClients);
        allVisibleClients = filteredClients;
        
        // 4. S√©lectionner AUTOMATIQUEMENT tous les clients de cette cat√©gorie
        selectedClients = filteredClients.map(client => client.id);
        
        // 5. Mettre √† jour l'affichage
        updateClientSelectionDisplay();
        updateRecipientCounter();
        updateSelectAllToggle();
        
        showNotification(`‚ú® Cat√©gorie "${getFilterLabel(filter)}" s√©lectionn√©e - ${selectedClients.length} clients automatiquement s√©lectionn√©s`, 'success');
        
    } catch (error) {
        console.error('‚ùå Erreur s√©lection cat√©gorie:', error);
        showNotification('‚ùå Erreur lors de la s√©lection', 'error');
    } finally {
        autoSelectMode = false;
    }
}

// NOUVELLE FONCTION: Toggle tout s√©lectionner/d√©selectionner
function toggleSelectAll() {
    const selectAllCheckbox = document.getElementById('selectAllToggle');
    const isChecked = selectAllCheckbox.checked;
    
    if (isChecked) {
        selectedClients = [...allVisibleClients.map(client => client.id)];
        showNotification(`‚úÖ ${selectedClients.length} clients s√©lectionn√©s`, 'success');
    } else {
        selectedClients = [];
        showNotification('‚ùå Tous les clients d√©s√©lectionn√©s', 'info');
    }
    
    updateClientSelectionDisplay();
    updateRecipientCounter();
    updateSelectAllLabel();
}

// NOUVELLES FONCTIONS UTILITAIRES
function updateClientSelectionDisplay() {
    document.querySelectorAll('.client-item').forEach(item => {
        const clientId = parseInt(item.dataset.clientId);
        if (selectedClients.includes(clientId)) {
            item.classList.add('selected');
        } else {
            item.classList.remove('selected');
        }
    });
}

function updateSelectAllToggle() {
    const selectAllCheckbox = document.getElementById('selectAllToggle');
    if (!selectAllCheckbox) return;
    
    const visibleClientIds = allVisibleClients.map(c => c.id);
    const selectedVisibleClients = selectedClients.filter(id => visibleClientIds.includes(id));
    
    if (selectedVisibleClients.length === 0) {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = false;
    } else if (selectedVisibleClients.length === visibleClientIds.length) {
        selectAllCheckbox.checked = true;
        selectAllCheckbox.indeterminate = false;
    } else {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = true;
    }
    
    updateSelectAllLabel();
}

function updateSelectAllLabel() {
    const label = document.getElementById('selectAllLabel');
    const selectAllCheckbox = document.getElementById('selectAllToggle');
    
    if (!label || !selectAllCheckbox) return;
    
    if (selectAllCheckbox.checked) {
        label.textContent = 'Tout d√©s√©lectionner';
    } else if (selectAllCheckbox.indeterminate) {
        label.textContent = 'S√©lection partielle';
    } else {
        label.textContent = 'Tout s√©lectionner';
    }
}

// Ajouter au scope global
window.selectCategoryAndClients = selectCategoryAndClients;
window.toggleSelectAll = toggleSelectAll;

// ===== FONCTIONS GLOBALES POUR L'HTML =====
window.toggleClientSelection = toggleClientSelection;
window.closeModal = closeModal;
window.insertLink = insertLink;
window.insertSelectedProducts = insertSelectedProducts;
window.sendTestEmail = sendTestEmail;
window.confirmSendCampaign = confirmSendCampaign;
window.editElement = editElement;
window.duplicateElement = duplicateElement;
window.deleteElement = deleteElement;
window.saveButtonChanges = saveButtonChanges;
window.insertResizableImage = insertResizableImage;

// Initialisation finale
setTimeout(() => {
    showNotification('‚ú® √âditeur d\'emails CrystosJewel fusionn√© pr√™t !', 'success');
    preventReload = false;
}, 2000);

console.log('üéâ √âditeur d\'emails CrystosJewel fusionn√© enti√®rement charg√© avec toutes les fonctionnalit√©s !');
    </script>

</body>
</html>