<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tableau de Bord Administratif - Bijouterie</title>
    <style>
        :root {
            --rose-gold: #b76e79;
            --rose-gold-light: #e8c2c8;
            --rose-gold-dark: #7d4b53;
            --cream: #fff8f0;
            --text-dark: #3a3a3a;
            --success: #28a745;
            --danger: #dc3545;
            --warning: #ffc107;
            --info: #17a2b8;
            --light: #f8f9fa;
            --dark: #343a40;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, var(--rose-gold-light) 0%, var(--cream) 100%);
            color: var(--text-dark);
            overflow-x: hidden;
        }

        .dashboard {
            display: flex;
            min-height: 100vh;
        }

        .sidebar {
            width: 250px;
            background: linear-gradient(180deg, var(--rose-gold-dark), var(--rose-gold));
            color: white;
            padding: 20px 0;
            position: fixed;
            height: 100vh;
            overflow-y: auto;
            box-shadow: 4px 0 15px rgba(0,0,0,0.1);
            z-index: 1000;
        }

        .logo {
            text-align: center;
            padding: 20px;
            border-bottom: 1px solid rgba(255,255,255,0.2);
            margin-bottom: 20px;
        }

        .logo h2 {
            font-size: 1.5rem;
            font-weight: 300;
        }

        .logo span {
            font-weight: 700;
        }

        .menu {
            padding: 0 10px;
        }

        .menu-item {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            margin: 5px 0;
            cursor: pointer;
            border-radius: 8px;
            transition: all 0.3s ease;
            position: relative;
        }

        .menu-item:hover {
            background: rgba(255,255,255,0.1);
            transform: translateX(5px);
        }

        .menu-item.active {
            background: rgba(255,255,255,0.2);
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }

        .menu-item i {
            margin-right: 10px;
            font-size: 1.2rem;
        }

        .main-content {
            flex: 1;
            margin-left: 250px;
            padding: 30px;
            background: transparent;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            background: rgba(255,255,255,0.9);
            padding: 20px 30px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(183, 110, 121, 0.15);
            backdrop-filter: blur(10px);
        }

        .page-title h1 {
            color: var(--rose-gold-dark);
            font-size: 2rem;
            font-weight: 600;
        }

        .filters {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .filter-select, .export-btn {
            padding: 10px 15px;
            border: 2px solid var(--rose-gold);
            border-radius: 8px;
            background: white;
            color: var(--rose-gold);
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
        }

        .filter-select:hover, .export-btn:hover {
            background: var(--rose-gold);
            color: white;
            transform: translateY(-2px);
        }

        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .card {
            background: rgba(255,255,255,0.95);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(183, 110, 121, 0.1);
            transition: all 0.3s ease;
            border: 1px solid var(--rose-gold-light);
            position: relative;
            overflow: hidden;
        }

        .card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--rose-gold), var(--rose-gold-dark));
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 45px rgba(183, 110, 121, 0.2);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .card-title {
            font-size: 0.9rem;
            color: var(--text-dark);
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .card-icon {
            font-size: 1.5rem;
            opacity: 0.7;
        }

        .card-value {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--rose-gold);
            margin-bottom: 10px;
            line-height: 1;
        }

        .card-comparison {
            font-size: 0.85rem;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .card-comparison.positive {
            color: var(--success);
        }

        .card-comparison.negative {
            color: var(--danger);
        }

        .card-comparison.neutral {
            color: var(--info);
        }

        .card-comparison i {
            font-style: normal;
            font-weight: bold;
        }

        .tab-container {
            background: rgba(255,255,255,0.95);
            border-radius: 15px;
            margin-bottom: 30px;
            overflow: hidden;
            box-shadow: 0 8px 32px rgba(183, 110, 121, 0.1);
        }

        .tabs {
            display: flex;
            background: var(--rose-gold-light);
            border-bottom: 1px solid var(--rose-gold);
        }

        .tab {
            flex: 1;
            padding: 15px 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
            color: var(--rose-gold-dark);
        }

        .tab:hover {
            background: rgba(255,255,255,0.3);
        }

        .tab.active {
            background: var(--rose-gold);
            color: white;
            box-shadow: inset 0 4px 8px rgba(0,0,0,0.1);
        }

        .tab-content {
            padding: 30px;
        }

        .tab-content h3 {
            color: var(--rose-gold-dark);
            margin-bottom: 20px;
            font-size: 1.3rem;
        }

        .graph-container {
            position: relative;
            height: 300px;
            background: linear-gradient(to top, var(--rose-gold-light), transparent);
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
        }

        .bar {
            position: absolute;
            bottom: 20px;
            width: 8%;
            background: linear-gradient(to top, var(--rose-gold), var(--rose-gold-light));
            border-radius: 4px 4px 0 0;
            transition: all 0.5s ease;
            cursor: pointer;
        }

        .bar:hover {
            background: linear-gradient(to top, var(--rose-gold-dark), var(--rose-gold));
            transform: scale(1.1);
        }

        .bar-value {
            position: absolute;
            top: -25px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 0.8rem;
            font-weight: 600;
            color: var(--rose-gold-dark);
            white-space: nowrap;
        }

        .bar-label {
            position: absolute;
            bottom: -20px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 0.8rem;
            color: var(--text-dark);
            font-weight: 500;
        }

        .pie-chart {
            width: 200px;
            height: 200px;
            border-radius: 50%;
            margin: 20px auto;
            position: relative;
            box-shadow: 0 8px 25px rgba(183, 110, 121, 0.3);
        }

        .pie-center {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 80px;
            height: 80px;
            background: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            color: var(--rose-gold);
        }

        .pie-legend {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-top: 20px;
        }

        .pie-item {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 0.9rem;
        }

        .pie-color {
            width: 20px;
            height: 20px;
            border-radius: 3px;
        }

        .table-container {
            background: rgba(255,255,255,0.95);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(183, 110, 121, 0.1);
            margin-bottom: 30px;
        }

        .table-container h3 {
            color: var(--rose-gold-dark);
            margin-bottom: 20px;
            font-size: 1.3rem;
        }

        .orders-table {
            width: 100%;
            border-collapse: collapse;
            overflow: hidden;
            border-radius: 10px;
        }

        .orders-table thead {
            background: var(--rose-gold);
            color: white;
        }

        .orders-table th,
        .orders-table td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid var(--rose-gold-light);
        }

        .orders-table tbody tr {
            transition: all 0.3s ease;
        }

        .orders-table tbody tr:hover {
            background: rgba(183, 110, 121, 0.1);
            transform: scale(1.01);
        }

        .status {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status.delivered, .status.shipped {
            background: var(--success);
            color: white;
        }

        .status.preparing, .status.waiting {
            background: var(--warning);
            color: var(--text-dark);
        }

        .status.cancelled {
            background: var(--danger);
            color: white;
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255,255,255,0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .loading-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 4px solid var(--rose-gold-light);
            border-top: 4px solid var(--rose-gold);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            background: var(--success);
            color: white;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            transform: translateX(100%);
            transition: transform 0.3s ease;
            z-index: 1001;
        }

        .notification.show {
            transform: translateX(0);
        }

        .refresh-indicator {
            display: inline-block;
            margin-left: 10px;
            font-size: 0.8rem;
            color: var(--info);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .refresh-indicator.active {
            opacity: 1;
        }

        .visitors-chart {
            display: flex;
            align-items: end;
            justify-content: space-around;
            height: 150px;
            background: linear-gradient(to top, var(--rose-gold-light), transparent);
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
        }

        .visitor-bar {
            width: 30px;
            background: linear-gradient(to top, var(--rose-gold), var(--rose-gold-light));
            border-radius: 4px 4px 0 0;
            position: relative;
            transition: all 0.5s ease;
            cursor: pointer;
        }

        .visitor-bar:hover {
            background: linear-gradient(to top, var(--rose-gold-dark), var(--rose-gold));
            transform: scale(1.1);
        }

        .visitor-day {
            position: absolute;
            bottom: -25px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 0.8rem;
            color: var(--text-dark);
            font-weight: 500;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
                transition: transform 0.3s ease;
            }

            .sidebar.open {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
                padding: 20px;
            }

            .dashboard-grid {
                grid-template-columns: 1fr;
                gap: 15px;
            }

            .header {
                flex-direction: column;
                gap: 15px;
                text-align: center;
            }

            .filters {
                flex-wrap: wrap;
                justify-content: center;
            }

            .card-value {
                font-size: 2rem;
            }

            .orders-table {
                font-size: 0.8rem;
            }

            .orders-table th,
            .orders-table td {
                padding: 10px 8px;
            }
        }

        @media (max-width: 480px) {
            .main-content {
                padding: 15px;
            }

            .card {
                padding: 20px;
            }

            .card-value {
                font-size: 1.8rem;
            }

            .tab {
                padding: 10px;
                font-size: 0.9rem;
            }

            .orders-table th,
            .orders-table td {
                padding: 8px 5px;
                font-size: 0.7rem;
            }
        }

        /* Animation d'entrée */
        @keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .card {
            animation: slideInUp 0.6s ease forwards;
        }

        .card:nth-child(1) { animation-delay: 0.1s; }
        .card:nth-child(2) { animation-delay: 0.2s; }
        .card:nth-child(3) { animation-delay: 0.3s; }
        .card:nth-child(4) { animation-delay: 0.4s; }
    </style>
</head>
<body>
    <!-- Include navbar if needed -->
    <%- include('partials/navbarre.ejs') %>

    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-spinner"></div>
    </div>

    <!-- Notification -->
    <div class="notification" id="notification">
        Données mises à jour avec succès
    </div>

    <div class="dashboard">
        <div class="sidebar" id="sidebar">
            <div class="logo">
                <h2>Bijoux <span>Admin</span></h2>
            </div>
            <div class="menu">
                <div class="menu-item active" data-section="dashboard">
                    <i>📊</i> Tableau de bord
                </div>
                <div class="menu-item" data-section="orders">
                    <i>🛒</i> Commandes
                </div>
                <div class="menu-item" data-section="customers">
                    <i>👥</i> Clients
                </div>
                <div class="menu-item" data-section="products">
                    <i>💎</i> Produits
                </div>
                <div class="menu-item" data-section="statistics">
                    <i>📈</i> Statistiques
                </div>
                <div class="menu-item" data-section="finance">
                    <i>💰</i> Finance
                </div>
                <div class="menu-item" data-section="settings">
                    <i>⚙️</i> Paramètres
                </div>
            </div>
        </div>

        <div class="main-content">
            <div class="header">
                <div class="page-title">
                    <h1 id="pageTitle">Dashboard - <%= dashboardData.selectedPeriod || 'Ce mois' %></h1>
                    <span class="refresh-indicator" id="refreshIndicator">
                        🔄 Dernière mise à jour: <%= new Date().toLocaleTimeString('fr-FR') %>
                    </span>
                </div>
                <div class="filters">
                    <select class="filter-select" id="periodFilter">
                        <option value="today" <%= dashboardData.selectedPeriod === 'today' ? 'selected' : '' %>>Aujourd'hui</option>
                        <option value="week" <%= dashboardData.selectedPeriod === 'week' ? 'selected' : '' %>>Cette semaine</option>
                        <option value="month" <%= dashboardData.selectedPeriod === 'month' || !dashboardData.selectedPeriod ? 'selected' : '' %>>Ce mois</option>
                        <option value="quarter" <%= dashboardData.selectedPeriod === 'quarter' ? 'selected' : '' %>>Ce trimestre</option>
                        <option value="year" <%= dashboardData.selectedPeriod === 'year' ? 'selected' : '' %>>Cette année</option>
                        <option value="all" <%= dashboardData.selectedPeriod === 'all' ? 'selected' : '' %>>Depuis la création</option>
                    </select>
                    <button class="export-btn" id="exportBtn">
                        📊 Exporter
                    </button>
                    <button class="export-btn" id="refreshBtn">
                        🔄 Actualiser
                    </button>
                </div>
            </div>

            <!-- Main Statistics Cards -->
            <div class="dashboard-grid" id="mainStatsGrid">
                <div class="card">
                    <div class="card-header">
                        <div class="card-title">Chiffre d'affaires</div>
                        <div class="card-icon">💰</div>
                    </div>
                    <div class="card-value" id="revenueValue">
                        <%= new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR', minimumFractionDigits: 0 }).format(dashboardData.totalRevenue || 0) %>
                    </div>
                    <div class="card-comparison <%= dashboardData.revenueGrowth >= 0 ? 'positive' : 'negative' %>" id="revenueComparison">
                        <i><%= dashboardData.revenueGrowth >= 0 ? '↑' : '↓' %></i> 
                        <%= Math.abs(dashboardData.revenueGrowth || 0).toFixed(1) %>% par rapport à la période précédente
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <div class="card-title">TVA à payer</div>
                        <div class="card-icon">🧾</div>
                    </div>
                    <div class="card-value" id="vatValue">
                        <%= new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR', minimumFractionDigits: 0 }).format(dashboardData.totalTax || 0) %>
                    </div>
                    <div class="card-comparison <%= dashboardData.taxGrowth >= 0 ? 'positive' : 'negative' %>" id="vatComparison">
                        <i><%= dashboardData.taxGrowth >= 0 ? '↑' : '↓' %></i> 
                        <%= Math.abs(dashboardData.taxGrowth || 0).toFixed(1) %>% par rapport à la période précédente
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <div class="card-title">Nombre de commandes</div>
                        <div class="card-icon">📦</div>
                    </div>
                    <div class="card-value" id="ordersValue">
                        <%= dashboardData.totalOrders || 0 %>
                    </div>
                    <div class="card-comparison <%= dashboardData.ordersGrowth >= 0 ? 'positive' : 'negative' %>" id="ordersComparison">
                        <i><%= dashboardData.ordersGrowth >= 0 ? '↑' : '↓' %></i> 
                        <%= Math.abs(dashboardData.ordersGrowth || 0).toFixed(1) %>% par rapport à la période précédente
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <div class="card-title">Nombre de clients</div>
                        <div class="card-icon">👥</div>
                    </div>
                    <div class="card-value" id="customersValue">
                        <%= dashboardData.totalCustomers || 0 %>
                    </div>
                    <div class="card-comparison <%= dashboardData.customersGrowth >= 0 ? 'positive' : 'negative' %>" id="customersComparison">
                        <i><%= dashboardData.customersGrowth >= 0 ? '↑' : '↓' %></i> 
                        <%= Math.abs(dashboardData.customersGrowth || 0).toFixed(1) %>% par rapport à la période précédente
                    </div>
                </div>
            </div>

            <!-- Charts Tab Container -->
            <div class="tab-container">
                <div class="tabs">
                    <div class="tab active" data-tab="sales">Évolution des ventes</div>
                    <div class="tab" data-tab="products">Répartition des produits</div>
                    <div class="tab" data-tab="visitors">Statistiques du site</div>
                </div>
                <div class="tab-content">
                    <h3 id="chartTitle">Évolution du chiffre d'affaires</h3>
                    <div class="graph-container" id="chartContainer">
                        <% if (dashboardData.chartData && dashboardData.chartData.length > 0) { %>
                            <% dashboardData.chartData.forEach((item, index) => { %>
                                <% 
                                const maxValue = Math.max(...dashboardData.chartData.map(d => d.value));
                                const height = (item.value / maxValue) * 100;
                                const left = (index / dashboardData.chartData.length) * 90 + 5;
                                %>
                                <div class="bar" style="height: <%= height %>%; left: <%= left %>%;">
                                    <div class="bar-value"><%= new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR', minimumFractionDigits: 0 }).format(item.value) %></div>
                                    <div class="bar-label"><%= item.label %></div>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <div style="text-align: center; padding: 50px; color: var(--text-dark);">
                                Aucune donnée disponible pour cette période
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>

            <!-- Categories Distribution -->
            <div class="card" id="categoriesCard">
                <div class="card-header">
                    <div class="card-title">Répartition des catégories de bijoux</div>
                </div>
                <% 
                const categories = dashboardData.categoriesData || [];
                const total = categories.reduce((sum, cat) => sum + (cat.count || 0), 0);
                %>
                <div class="pie-chart" id="pieChart">
                    <div class="pie-center">100%</div>
                </div>
                <div class="pie-legend" id="pieLegend">
                    <% if (categories.length > 0) { %>
                        <% categories.forEach((category, index) => { %>
                            <% 
                            const percentage = total > 0 ? (category.count / total * 100).toFixed(1) : 0;
                            const colors = ['var(--rose-gold)', 'var(--rose-gold-light)', 'var(--rose-gold-dark)', 'var(--warning)', 'var(--info)'];
                            %>
                            <div class="pie-item">
                                <div class="pie-color" style="background-color: <%= colors[index % colors.length] %>;"></div>
                                <%= category.name %> (<%= percentage %>%) - <%= category.count %> bijoux
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="pie-item">Aucune donnée disponible</div>
                    <% } %>
                </div>
            </div>

            <!-- Recent Orders Table -->
            <div class="table-container">
                <h3>Dernières commandes (<%= dashboardData.recentOrders ? dashboardData.recentOrders.length : 0 %> commandes)</h3>
                <table class="orders-table">
                    <thead>
                        <tr>
                            <th>N° Commande</th>
                            <th>Client</th>
                            <th>Date</th>
                            <th>Montant</th>
                            <th>Statut</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="ordersTableBody">
                        <% if (dashboardData.recentOrders && dashboardData.recentOrders.length > 0) { %>
                            <% dashboardData.recentOrders.forEach(order => { %>
                                <tr data-order-id="<%= order.id %>">
                                    <td>#<%= order.numero_commande || order.id %></td>
                                    <td><%= order.customer_name || 'Client inconnu' %></td>
                                    <td><%= new Date(order.created_at).toLocaleDateString('fr-FR') %></td>
                                    <td><%= new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR' }).format(order.total || 0) %></td>
                                    <td><span class="status <%= order.status || 'waiting' %>"><%= order.status || 'En attente' %></span></td>
                                    <td>
                                        <button onclick="viewOrder(<%= order.id %>)" style="background: var(--info); color: white; border: none; padding: 5px 10px; border-radius: 5px; cursor: pointer;">
                                            👁️ Voir
                                        </button>
                                    </td>
                                </tr>
                            <% }); %>
                        <% } else { %>
                            <tr>
                                <td colspan="6" style="text-align: center; padding: 20px; color: var(--text-dark);">
                                    Aucune commande trouvée pour cette période
                                </td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>

            <!-- Site Statistics -->
            <div class="card">
                <div class="card-header">
                    <div class="card-title">Statistiques du site</div>
                </div>
                <div class="dashboard-grid" id="siteStatsGrid">
                    <div class="card">
                        <div class="card-header">
                            <div class="card-title">Visiteurs actuels</div>
                        </div>
                        <div class="card-value" id="currentVisitors">
                            <%= dashboardData.siteStats?.currentVisitors || 0 %>
                        </div>
                        <div class="card-comparison positive">
                            <i>↑</i> Temps réel
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-header">
                            <div class="card-title">Visites totales</div>
                        </div>
                        <div class="card-value" id="totalVisits">
                            <%= dashboardData.siteStats?.totalVisits || 0 %>
                        </div>
                        <div class="card-comparison <%= dashboardData.siteStats?.visitsGrowth >= 0 ? 'positive' : 'negative' %>">
                            <i><%= dashboardData.siteStats?.visitsGrowth >= 0 ? '↑' : '↓' %></i> 
                            <%= Math.abs(dashboardData.siteStats?.visitsGrowth || 0).toFixed(1) %>%
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-header">
                            <div class="card-title">Bijoux favoris</div>
                        </div>
                        <div class="card-value" id="totalFavorites">
                            <%= dashboardData.siteStats?.totalFavorites || 0 %>
                        </div>
                        <div class="card-comparison positive">
                            <i>💎</i> Total ajoutés
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-header">
                            <div class="card-title">Taux de conversion</div>
                        </div>
                        <div class="card-value" id="conversionRate">
                            <%= (dashboardData.siteStats?.conversionRate || 0).toFixed(1) %>%
                        </div>
                        <div class="card-comparison <%= dashboardData.siteStats?.conversionGrowth >= 0 ? 'positive' : 'negative' %>">
                            <i><%= dashboardData.siteStats?.conversionGrowth >= 0 ? '↑' : '↓' %></i> 
                            <%= Math.abs(dashboardData.siteStats?.conversionGrowth || 0).toFixed(1) %>%
                        </div>
                    </div>
                </div>

                <!-- Weekly Visitors Chart -->
                <h3 style="margin-top: 30px; margin-bottom: 10px;">Visiteurs par jour (7 derniers jours)</h3>
                <div class="visitors-chart" id="visitorsChart">
                    <% 
                    const visitorsData = dashboardData.visitorsData || [];
                    const maxVisitors = visitorsData.length > 0 ? Math.max(...visitorsData.map(d => d.count)) : 1;
                    %>
                    <% if (visitorsData.length > 0) { %>
                        <% visitorsData.forEach(dayData => { %>
                            <% const height = (dayData.count / maxVisitors) * 100; %>
                            <div class="visitor-bar" style="height: <%= height %>%;" title="<%= dayData.count %> visiteurs">
                                <div class="visitor-day"><%= dayData.day %></div>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <% ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'].forEach(day => { %>
                            <div class="visitor-bar" style="height: 20%;">
                                <div class="visitor-day"><%= day %></div>
                            </div>
                        <% }); %>
                    <% } %>
                </div>
            </div>

            <!-- Additional Stats Cards -->
            <div class="dashboard-grid" style="margin-top: 30px;">
                <div class="card">
                    <div class="card-header">
                        <div class="card-title">Bijoux en stock</div>
                        <div class="card-icon">💎</div>
                    </div>
                    <div class="card-value">
                        <%= dashboardData.inventoryStats?.totalStock || 0 %>
                    </div>
                    <div class="card-comparison <%= dashboardData.inventoryStats?.lowStockItems > 0 ? 'negative' : 'positive' %>">
                        <i><%= dashboardData.inventoryStats?.lowStockItems > 0 ? '⚠️' : '✅' %></i> 
                        <%= dashboardData.inventoryStats?.lowStockItems || 0 %> en rupture
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <div class="card-title">Bijoux populaires</div>
                        <div class="card-icon">⭐</div>
                    </div>
                    <div class="card-value">
                        <%= dashboardData.inventoryStats?.featuredCount || 0 %>
                    </div>
                    <div class="card-comparison neutral">
                        <i>📈</i> Mis en avant
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <div class="card-title">Panier moyen</div>
                        <div class="card-icon">🛒</div>
                    </div>
                    <div class="card-value">
                        <%= new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR' }).format(dashboardData.averageOrderValue || 0) %>
                    </div>
                    <div class="card-comparison <%= dashboardData.averageOrderGrowth >= 0 ? 'positive' : 'negative' %>">
                        <i><%= dashboardData.averageOrderGrowth >= 0 ? '↑' : '↓' %></i> 
                        <%= Math.abs(dashboardData.averageOrderGrowth || 0).toFixed(1) %>%
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <div class="card-title">Nouveaux clients</div>
                        <div class="card-icon">👤</div>
                    </div>
                    <div class="card-value">
                        <%= dashboardData.newCustomersCount || 0 %>
                    </div>
                    <div class="card-comparison <%= dashboardData.newCustomersGrowth >= 0 ? 'positive' : 'negative' %>">
                        <i><%= dashboardData.newCustomersGrowth >= 0 ? '↑' : '↓' %></i> 
                        <%= Math.abs(dashboardData.newCustomersGrowth || 0).toFixed(1) %>%
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Pass server data to JavaScript -->
    <script>
        // Variables globales avec données du serveur
        window.dashboardData = <%- JSON.stringify(dashboardData) %>;
        window.csrfToken = '<%= typeof csrfToken !== 'undefined' ? csrfToken : '' %>';
        
        // ================================
        // CLASSE DASHBOARD MANAGER - VERSION EJS
        // ================================
        class DashboardManager {
            constructor() {
                this.currentPeriod = '<%= dashboardData.selectedPeriod || "month" %>';
                this.currentTab = 'sales';
                this.currentSection = 'dashboard';
                this.autoRefreshInterval = null;
                this.isLoading = false;
                
                this.init();
            }

            init() {
                this.bindEvents();
                this.startAutoRefresh();
                this.simulateRealTimeUpdates();
                this.updatePieChart();
                console.log('🚀 Dashboard initialisé avec les données:', window.dashboardData);
            }

            bindEvents() {
                // Menu navigation
                document.querySelectorAll('.menu-item').forEach(item => {
                    item.addEventListener('click', (e) => {
                        this.handleMenuClick(e.target.closest('.menu-item'));
                    });
                });

                // Period filter
                document.getElementById('periodFilter').addEventListener('change', (e) => {
                    this.changePeriod(e.target.value);
                });

                // Tab switching
                document.querySelectorAll('.tab').forEach(tab => {
                    tab.addEventListener('click', (e) => {
                        this.switchTab(e.target.dataset.tab);
                    });
                });

                // Export button
                document.getElementById('exportBtn').addEventListener('click', () => {
                    this.exportData();
                });

                // Refresh button
                document.getElementById('refreshBtn').addEventListener('click', () => {
                    this.refreshData();
                });

                // Mobile sidebar toggle
                this.bindMobileEvents();
            }

            bindMobileEvents() {
                if (window.innerWidth <= 768) {
                    const header = document.querySelector('.header');
                    const menuButton = document.createElement('button');
                    menuButton.innerHTML = '☰';
                    menuButton.className = 'mobile-menu-btn';
                    menuButton.style.cssText = `
                        background: var(--rose-gold);
                        color: white;
                        border: none;
                        padding: 10px 15px;
                        border-radius: 5px;
                        font-size: 1.2rem;
                        cursor: pointer;
                        margin-right: 15px;
                    `;
                    
                    menuButton.addEventListener('click', () => {
                        document.getElementById('sidebar').classList.toggle('open');
                    });
                    
                    header.prepend(menuButton);
                }
            }

            updatePieChart() {
                const categories = window.dashboardData.categoriesData || [];
                const total = categories.reduce((sum, cat) => sum + (cat.count || 0), 0);
                
                if (total > 0 && categories.length > 0) {
                    const colors = ['var(--rose-gold)', 'var(--rose-gold-light)', 'var(--rose-gold-dark)', 'var(--warning)', 'var(--info)'];
                    let cumulativePercentage = 0;
                    let gradientStops = [];
                    
                    categories.forEach((category, index) => {
                        const percentage = (category.count / total) * 100;
                        const startAngle = cumulativePercentage * 3.6;
                        const endAngle = (cumulativePercentage + percentage) * 3.6;
                        
                        gradientStops.push(`${colors[index % colors.length]} ${startAngle}deg ${endAngle}deg`);
                        cumulativePercentage += percentage;
                    });
                    
                    const pieChart = document.getElementById('pieChart');
                    if (pieChart) {
                        pieChart.style.background = `conic-gradient(${gradientStops.join(', ')})`;
                    }
                }
            }

            async changePeriod(period) {
                if (this.isLoading) return;
                
                this.showLoading(true);
                this.showRefreshIndicator();
                
                try {
                    // Rediriger vers la même page avec la nouvelle période
                    const url = new URL(window.location);
                    url.searchParams.set('period', period);
                    window.location.href = url.toString();
                } catch (error) {
                    console.error('Erreur lors du changement de période:', error);
                    this.showNotification('Erreur lors du changement de période', 'error');
                    this.showLoading(false);
                    this.hideRefreshIndicator();
                }
            }

            switchTab(tab) {
                this.currentTab = tab;
                
                // Mise à jour des onglets visuels
                document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                document.querySelector(`[data-tab="${tab}"]`).classList.add('active');
                
                // Mise à jour du titre du graphique
                const chartTitle = document.getElementById('chartTitle');
                switch(tab) {
                    case 'sales':
                        chartTitle.textContent = 'Évolution du chiffre d\'affaires';
                        break;
                    case 'products':
                        chartTitle.textContent = 'Répartition des produits vendus';
                        break;
                    case 'visitors':
                        chartTitle.textContent = 'Statistiques de fréquentation du site';
                        break;
                }
            }

            handleMenuClick(menuItem) {
                const section = menuItem.dataset.section;
                if (section === this.currentSection) return;
                
                // Mise à jour visuelle du menu
                document.querySelectorAll('.menu-item').forEach(item => item.classList.remove('active'));
                menuItem.classList.add('active');
                
                // Mise à jour du titre de la page
                const pageTitle = document.getElementById('pageTitle');
                const titles = {
                    dashboard: 'Dashboard - Statistiques Générales',
                    orders: 'Gestion des Commandes',
                    customers: 'Gestion des Clients',
                    products: 'Gestion des Produits',
                    statistics: 'Analyse Détaillée',
                    finance: 'Rapport Financier',
                    settings: 'Configuration du Système'
                };
                
                pageTitle.textContent = titles[section] || titles.dashboard;
                this.currentSection = section;
                
                // Fermer la sidebar mobile si ouverte
                if (window.innerWidth <= 768) {
                    document.getElementById('sidebar').classList.remove('open');
                }
                
                // Redirection vers les autres sections (à adapter selon vos routes)
                if (section !== 'dashboard') {
                    // window.location.href = `/admin/${section}`;
                    this.showNotification(`Navigation vers: ${titles[section]}`);
                }
            }

            async refreshData() {
                if (this.isLoading) return;
                
                this.showRefreshIndicator();
                this.showNotification('Actualisation des données...');
                
                try {
                    // Recharger la page pour obtenir les données fraîches
                    window.location.reload();
                } catch (error) {
                    console.error('Erreur lors de l\'actualisation:', error);
                    this.showNotification('Erreur lors de l\'actualisation', 'error');
                } finally {
                    this.hideRefreshIndicator();
                }
            }

            exportData() {
                const period = this.currentPeriod;
                const periodTexts = {
                    today: 'Aujourd\'hui',
                    week: 'Cette semaine',
                    month: 'Ce mois',
                    quarter: 'Ce trimestre',
                    year: 'Cette année',
                    all: 'Depuis la création'
                };
                
                const data = {
                    period: periodTexts[period] || periodTexts.month,
                    exportDate: new Date().toISOString(),
                    stats: window.dashboardData,
                    generated_by: 'Dashboard Admin Bijouterie'
                };
                
                // Créer et télécharger le fichier JSON
                const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `rapport_bijouterie_${period}_${new Date().toISOString().split('T')[0]}.json`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                this.showNotification(`Export terminé pour la période: ${periodTexts[period]}`);
            }

            startAutoRefresh() {
                // Actualisation automatique toutes les 10 minutes
                this.autoRefreshInterval = setInterval(() => {
                    this.refreshCurrentVisitors();
                }, 10 * 60 * 1000);
            }

            async refreshCurrentVisitors() {
                try {
                    const response = await fetch('/api/admin/current-visitors', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-Token': window.csrfToken
                        }
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        const currentVisitorsEl = document.getElementById('currentVisitors');
                        if (currentVisitorsEl && data.currentVisitors !== undefined) {
                            currentVisitorsEl.textContent = data.currentVisitors;
                        }
                    }
                } catch (error) {
                    console.error('Erreur lors de la mise à jour des visiteurs:', error);
                }
            }

            simulateRealTimeUpdates() {
                // Simulation de mise à jour des visiteurs actuels
                setInterval(() => {
                    const currentVisitorsEl = document.getElementById('currentVisitors');
                    if (currentVisitorsEl) {
                        const currentValue = parseInt(currentVisitorsEl.textContent) || 0;
                        const change = Math.floor(Math.random() * 5) - 2; // -2 à +2
                        const newValue = Math.max(0, currentValue + change);
                        
                        currentVisitorsEl.textContent = newValue;
                        
                        // Animation de changement
                        currentVisitorsEl.style.color = change > 0 ? 'var(--success)' : 
                                                      change < 0 ? 'var(--danger)' : 'var(--rose-gold)';
                        setTimeout(() => {
                            currentVisitorsEl.style.color = 'var(--rose-gold)';
                        }, 2000);
                    }
                }, 45000); // Toutes les 45 secondes
            }

            // Fonctions utilitaires
            showLoading(show) {
                this.isLoading = show;
                const overlay = document.getElementById('loadingOverlay');
                if (overlay) {
                    overlay.classList.toggle('active', show);
                }
            }

            showRefreshIndicator() {
                const indicator = document.getElementById('refreshIndicator');
                if (indicator) {
                    indicator.classList.add('active');
                    indicator.textContent = '🔄 Mise à jour en cours...';
                }
            }

            hideRefreshIndicator() {
                const indicator = document.getElementById('refreshIndicator');
                if (indicator) {
                    indicator.classList.remove('active');
                    indicator.textContent = `🔄 Dernière mise à jour: ${new Date().toLocaleTimeString('fr-FR')}`;
                }
            }

            showNotification(message, type = 'success') {
                const notification = document.getElementById('notification');
                if (notification) {
                    notification.textContent = message;
                    notification.className = 'notification show';
                    
                    if (type === 'error') {
                        notification.style.background = 'var(--danger)';
                    } else {
                        notification.style.background = 'var(--success)';
                    }
                    
                    setTimeout(() => {
                        notification.classList.remove('show');
                    }, 4000);
                }
            }
        }

        // ================================
        // FONCTIONS GLOBALES
        // ================================
        
        // Fonction pour voir une commande
        function viewOrder(orderId) {
            // Rediriger vers la page de détail de la commande
            window.location.href = `/admin/orders/${orderId}`;
        }

        // ================================
        // INITIALISATION
        // ================================
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Dashboard Admin EJS initialisé');
            
            // Créer l'instance du gestionnaire
            window.dashboardManager = new DashboardManager();
            
            // Gestion responsive
            window.addEventListener('resize', function() {
                if (window.innerWidth > 768) {
                    const sidebar = document.getElementById('sidebar');
                    if (sidebar) sidebar.classList.remove('open');
                }
            });
            
            // Animation des cartes au chargement
            setTimeout(() => {
                document.querySelectorAll('.card').forEach((card, index) => {
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                });
            }, 100);
        });

        // Styles additionnels pour mobile
        const additionalStyles = document.createElement('style');
        additionalStyles.textContent = `
            .mobile-menu-btn {
                display: none;
            }
            
            @media (max-width: 768px) {
                .mobile-menu-btn {
                    display: block !important;
                }
            }
        `;
        document.head.appendChild(additionalStyles);

        console.log('✨ Dashboard EJS chargé avec succès');
    </script>
</body>
</html>