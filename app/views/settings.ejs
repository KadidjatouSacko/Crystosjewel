<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title || 'Paramètres Essentiels' %></title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <style>
        :root {
            --primary-color: #b76e79;
            --primary-light: #e8c2c8;
            --cream: #fff8f0;
            --dark-text: #3a3a3a;
            --white: #ffffff;
            --success: #4caf50;
            --danger: #f44336;
            --warning: #ff9800;
            --shadow: rgba(183, 110, 121, 0.1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, var(--cream) 0%, #f5f5f5 100%);
            color: var(--dark-text);
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .header {
            text-align: center;
            margin-bottom: 3rem;
            background: white;
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 4px 15px var(--shadow);
        }

        .header h1 {
            font-size: 2.5rem;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }

        .header p {
            color: #666;
            font-size: 1.1rem;
        }

        .sections-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 2rem;
        }

        .section-card {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 4px 15px var(--shadow);
            transition: transform 0.3s ease;
        }

        .section-card:hover {
            transform: translateY(-5px);
        }

        .section-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid var(--primary-light);
        }

        .section-icon {
            background: var(--primary-color);
            color: white;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
        }

        .section-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--dark-text);
        }

        .section-description {
            font-size: 0.9rem;
            color: #666;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            font-weight: 500;
            margin-bottom: 0.5rem;
            color: var(--dark-text);
        }

        .form-input,
        .form-textarea {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .form-input:focus,
        .form-textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(183, 110, 121, 0.1);
        }

        .form-textarea {
            resize: vertical;
            min-height: 80px;
        }

        /* Switch pour les booléens */
        .switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: 0.3s;
            border-radius: 24px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: 0.3s;
            border-radius: 50%;
        }

        input:checked + .slider {
            background-color: var(--primary-color);
        }

        input:checked + .slider:before {
            transform: translateX(26px);
        }

        .save-btn {
            background: var(--primary-color);
            color: white;
            border: none;
            padding: 0.75rem 2rem;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .save-btn:hover {
            background: #a55963;
            transform: translateY(-2px);
        }

        /* Styles spéciaux pour la maintenance */
        .maintenance-section {
            border-left: 4px solid var(--warning);
        }

        .maintenance-section.active {
            background: linear-gradient(135deg, #fff5f5, #ffffff);
            border-left-color: var(--danger);
        }

        .maintenance-section.inactive {
            border-left-color: var(--success);
            background: linear-gradient(135deg, #f0fff4, #ffffff);
        }

        /* Ordre d'affichage des sections */
        .section-card[data-section="maintenance"] { order: 1; }
        .section-card[data-section="shipping"] { order: 2; }
        .section-card[data-section="security"] { order: 3; }
        .section-card[data-section="company"] { order: 4; }
        .section-card[data-section="footer"] { order: 5; }
        .section-card[data-section="payment"] { order: 6; } /* EN DERNIER */

        .status-badge {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.85rem;
            margin-bottom: 1rem;
        }

        .status-active {
            background: #ffebee;
            color: var(--danger);
            border: 1px solid rgba(244, 67, 54, 0.3);
        }

        .status-inactive {
            background: #e8f5e8;
            color: var(--success);
            border: 1px solid rgba(76, 175, 80, 0.3);
        }

        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .alert-success {
            background: #e8f5e8;
            color: #2e7d32;
            border-left: 4px solid var(--success);
        }

        .alert-danger {
            background: #ffebee;
            color: #c62828;
            border-left: 4px solid var(--danger);
        }

        /* Loading state */
        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            .sections-grid {
                grid-template-columns: 1fr;
            }

            .header h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1><i class="fas fa-cogs me-2"></i><%= pageTitle || 'Paramètres Essentiels' %></h1>
            <p>Gérez la configuration de votre boutique en ligne</p>
        </div>

        <!-- Messages Flash -->
        <% if (typeof success !== 'undefined' && success.length > 0) { %>
            <% success.forEach(message => { %>
                <div class="alert alert-success">
                    <i class="fas fa-check-circle"></i>
                    <%= message %>
                </div>
            <% }); %>
        <% } %>

        <% if (typeof error !== 'undefined' && error.length > 0) { %>
            <% error.forEach(message => { %>
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle"></i>
                    <%= message %>
                </div>
            <% }); %>
        <% } %>

        <!-- Sections Grid -->
        <div class="sections-grid">
            <!-- ✅ ORDRE SPÉCIFIQUE DES SECTIONS -->
            <% 
            // Ordre souhaité : maintenance, shipping, security, company, footer, payment (en dernier)
            const sectionOrder = ['maintenance', 'shipping', 'security', 'company', 'footer', 'payment'];
            
            if (sections && settings) {
                sectionOrder.forEach(sectionKey => {
                    const section = sections[sectionKey];
                    const sectionSettings = settings[sectionKey];
                    
                    if (section && sectionSettings) {
            %>
            
            <div class="section-card <%= sectionKey === 'maintenance' ? 'maintenance-section' : '' %>" 
                 data-section="<%= sectionKey %>" 
                 id="<%= sectionKey %>">
                <div class="section-header">
                    <div class="section-icon">
                        <i class="<%= section.icon %>"></i>
                    </div>
                    <div>
                        <h3 class="section-title"><%= section.title %></h3>
                        <p class="section-description"><%= section.description %></p>
                    </div>
                </div>

                <!-- Statut spécial pour maintenance -->
                <% if (sectionKey === 'maintenance') { %>
                    <% if (sectionSettings.enabled?.value === true || sectionSettings.enabled?.value === 'true') { %>
                        <div class="status-badge status-active">
                            <i class="fas fa-exclamation-triangle"></i>
                            Site en maintenance
                        </div>
                    <% } else { %>
                        <div class="status-badge status-inactive">
                            <i class="fas fa-check-circle"></i>
                            Site opérationnel
                        </div>
                    <% } %>
                <% } %>

                <!-- Formulaire de la section -->
                <form onsubmit="saveSection(event, '<%= sectionKey %>')">
                    <% Object.entries(sectionSettings).forEach(([key, setting]) => { %>
                        <% if (key !== 'scheduled_start' && key !== 'scheduled_end') { %>
                        <div class="form-group">
                            <label class="form-label" for="<%= sectionKey %>_<%= key %>">
                                <%= setting.description %>
                            </label>
                            
                            <% if (setting.type === 'boolean') { %>
                                <label class="switch">
                                    <input type="checkbox" 
                                           id="<%= sectionKey %>_<%= key %>" 
                                           name="settings[<%= key %>]" 
                                           <%= (setting.value === true || setting.value === 'true') ? 'checked' : '' %>>
                                    <span class="slider"></span>
                                </label>
                            <% } else if (setting.type === 'number') { %>
                                <input type="number" 
                                       class="form-input" 
                                       id="<%= sectionKey %>_<%= key %>" 
                                       name="settings[<%= key %>]" 
                                       value="<%= setting.value || '' %>"
                                       step="0.01">
                            <% } else if (key.includes('url') || key.includes('link')) { %>
                                <input type="url" 
                                       class="form-input" 
                                       id="<%= sectionKey %>_<%= key %>" 
                                       name="settings[<%= key %>]" 
                                       value="<%= setting.value || '' %>"
                                       placeholder="https://">
                            <% } else if (key.includes('email')) { %>
                                <input type="email" 
                                       class="form-input" 
                                       id="<%= sectionKey %>_<%= key %>" 
                                       name="settings[<%= key %>]" 
                                       value="<%= setting.value || '' %>">
                            <% } else if (key.includes('phone')) { %>
                                <input type="tel" 
                                       class="form-input" 
                                       id="<%= sectionKey %>_<%= key %>" 
                                       name="settings[<%= key %>]" 
                                       value="<%= setting.value || '' %>">
                            <% } else if (setting.description && setting.description.toLowerCase().includes('adresse')) { %>
                                <textarea class="form-input form-textarea" 
                                          id="<%= sectionKey %>_<%= key %>" 
                                          name="settings[<%= key %>]" 
                                          rows="3"><%= setting.value || '' %></textarea>
                            <% } else { %>
                                <input type="text" 
                                       class="form-input" 
                                       id="<%= sectionKey %>_<%= key %>" 
                                       name="settings[<%= key %>]" 
                                       value="<%= setting.value || '' %>">
                            <% } %>
                        </div>
                        <% } %>
                    <% }); %>
                    
                    <button type="submit" class="save-btn">
                        <i class="fas fa-save"></i>
                        Sauvegarder <%= section.title %>
                    </button>
                </form>
            </div>
            
            <% 
                    } // fin if section && sectionSettings
                }); // fin forEach sectionOrder
            } // fin if sections && settings
            %>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // ✅ Fonction pour sauvegarder une section - VERSION CORRIGÉE
        async function saveSection(event, section) {
            event.preventDefault();
            
            console.log('💾 Début sauvegarde section:', section);
            
            const form = event.target;
            const formData = new FormData(form);
            const settings = {};
            
            // Extraire les données du formulaire
            for (const [key, value] of formData.entries()) {
                if (key.startsWith('settings[') && key.endsWith(']')) {
                    const settingKey = key.slice(9, -1); // Enlever 'settings[' et ']'
                    settings[settingKey] = value;
                    console.log(`📝 ${settingKey} = ${value}`);
                }
            }
            
            // ✅ IMPORTANT: Gérer les checkboxes non cochées
            const checkboxes = form.querySelectorAll('input[type="checkbox"]');
            checkboxes.forEach(checkbox => {
                if (checkbox.name.startsWith('settings[')) {
                    const settingKey = checkbox.name.slice(9, -1);
                    if (!checkbox.checked && !settings.hasOwnProperty(settingKey)) {
                        settings[settingKey] = false;
                        console.log(`☑️ Checkbox non cochée: ${settingKey} = false`);
                    }
                }
            });
            
            console.log('📤 Données à envoyer:', { section, settings });
            
            try {
                form.classList.add('loading');
                
                // ✅ Appel vers la bonne route
                const response = await fetch('/admin/parametres/save', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        section: section,
                        settings: settings
                    })
                });
                
                console.log('📥 Statut réponse:', response.status);
                
                if (!response.ok) {
                    throw new Error(`Erreur HTTP: ${response.status}`);
                }
                
                const result = await response.json();
                console.log('📥 Résultat:', result);
                
                if (result.success) {
                    showNotification(`✅ ${result.message}`, 'success');
                    // Recharger la page après 1 seconde pour voir les changements
                    setTimeout(() => {
                        console.log('🔄 Rechargement de la page...');
                        location.reload();
                    }, 1000);
                } else {
                    showNotification(`❌ Erreur: ${result.message}`, 'error');
                }
            } catch (error) {
                console.error('❌ Erreur sauvegarde:', error);
                showNotification('❌ Erreur de communication avec le serveur', 'error');
            } finally {
                form.classList.remove('loading');
            }
        }

        // Fonction pour afficher les notifications
        function showNotification(message, type = 'info') {
            console.log('🔔 Notification:', message, type);
            
            // Supprimer les notifications existantes
            const existingNotifications = document.querySelectorAll('.notification-toast');
            existingNotifications.forEach(notif => notif.remove());
            
            const notification = document.createElement('div');
            notification.className = `notification-toast alert alert-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'info'}`;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 9999;
                min-width: 300px;
                max-width: 500px;
                animation: slideIn 0.3s ease;
                box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            `;
            
            notification.innerHTML = `
                <i class="fas ${type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-triangle' : 'fa-info-circle'}"></i>
                ${message}
            `;
            
            document.body.appendChild(notification);
            
            // Supprimer après 4 secondes
            setTimeout(() => {
                notification.style.animation = 'slideOut 0.3s ease';
                setTimeout(() => notification.remove(), 300);
            }, 4000);
        }

        // CSS pour les animations de notification
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideIn {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
            
            @keyframes slideOut {
                from {
                    transform: translateX(0);
                    opacity: 1;
                }
                to {
                    transform: translateX(100%);
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(style);

        // Debug au chargement de la page
        document.addEventListener('DOMContentLoaded', function() {
            console.log('✅ Page paramètres chargée');
            console.log('🔍 Sections trouvées:', document.querySelectorAll('.section-card').length);
            
            // Vérifier l'ordre des sections
            const sections = Array.from(document.querySelectorAll('.section-card'));
            sections.forEach((section, index) => {
                const sectionName = section.getAttribute('data-section');
                console.log(`📍 Section ${index + 1}: ${sectionName}`);
            });
        });

        // Debug des formulaires
        document.addEventListener('submit', function(e) {
            if (e.target.closest('.section-card')) {
                console.log('📝 Soumission formulaire détectée');
            }
        });
    </script>
</body>
</html>