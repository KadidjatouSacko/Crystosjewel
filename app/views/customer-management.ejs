<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title || 'Gestion des Clients' %></title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        /* Styles pour la gestion clients */
        .customer-management {
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .management-header {
            background: linear-gradient(135deg, #d89ab3 0%, #b794a8 100%);
            color: white;
            padding: 30px;
            border-radius: 20px;
            margin: 20px;
            box-shadow: 0 10px 30px rgba(216, 154, 179, 0.3);
        }

        .management-header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .controls-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 20px;
            padding: 20px;
            background: white;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
            flex-wrap: wrap;
            gap: 20px;
        }

        .search-filters {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }

        .search-input {
            position: relative;
        }

        .search-input input {
            padding: 12px 45px 12px 15px;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            font-size: 14px;
            width: 300px;
            transition: all 0.3s ease;
        }

        .search-input input:focus {
            outline: none;
            border-color: #d89ab3;
            box-shadow: 0 0 0 3px rgba(216, 154, 179, 0.1);
        }

        .search-input i {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #64748b;
        }

        .filter-dropdown {
            padding: 12px 15px;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            background: white;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 150px;
        }

        .filter-dropdown:focus {
            outline: none;
            border-color: #d89ab3;
        }

        .action-btns {
            display: flex;
            gap: 15px;
        }

        .btn {
            padding: 12px 20px;
            border: none;
            border-radius: 12px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            text-decoration: none;
            color: white;
        }

        .btn-primary {
            background: linear-gradient(135deg, #d89ab3 0%, #b794a8 100%);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(216, 154, 179, 0.3);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-success {
            background: #28a745;
        }

        .stats-overview {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 20px;
        }

        .stat-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
            border-left: 5px solid #d89ab3;
            transition: transform 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .stat-icon {
            width: 50px;
            height: 50px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            color: white;
        }

        .stat-value {
            font-size: 2.5rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #64748b;
            font-size: 14px;
            font-weight: 500;
        }

        .customers-list {
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
            margin: 20px;
        }

        .list-header {
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            padding: 20px;
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .list-header h3 {
            color: #1e293b;
            font-size: 1.5rem;
            margin: 0;
        }

        .customers-table {
            width: 100%;
            border-collapse: collapse;
        }

        .customers-table th {
            background: #f8fafc;
            padding: 15px;
            text-align: left;
            font-weight: 600;
            color: #475569;
            border-bottom: 1px solid #e2e8f0;
            position: sticky;
            top: 0;
        }

        .customers-table td {
            padding: 15px;
            border-bottom: 1px solid #f1f5f9;
            vertical-align: middle;
        }

        .customers-table tr:hover {
            background: #f8fafc;
        }

        .customer-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .customer-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #d89ab3 0%, #b794a8 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 16px;
        }

        .customer-details h4 {
            color: #1e293b;
            font-size: 14px;
            margin: 0 0 3px 0;
        }

        .customer-details p {
            color: #64748b;
            font-size: 13px;
            margin: 0;
        }

        .status-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-account {
            background: #dcfce7;
            color: #166534;
        }

        .status-guest {
            background: #fee2e2;
            color: #dc2626;
        }

        .status-newsletter-yes {
            background: #dbeafe;
            color: #1d4ed8;
        }

        .status-newsletter-no {
            background: #f3f4f6;
            color: #374151;
        }

        .action-buttons {
            display: flex;
            gap: 8px;
        }

        .btn-icon {
            width: 35px;
            height: 35px;
            border-radius: 8px;
            border: none;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .btn-edit {
            background: #fef3c7;
            color: #d97706;
        }

        .btn-edit:hover {
            background: #fcd34d;
            transform: scale(1.1);
        }

        .btn-mail {
            background: #dbeafe;
            color: #2563eb;
        }

        .btn-mail:hover {
            background: #93c5fd;
            transform: scale(1.1);
        }

        .btn-view {
            background: #d1fae5;
            color: #059669;
        }

        .btn-view:hover {
            background: #6ee7b7;
            transform: scale(1.1);
        }

        .no-results {
            text-align: center;
            padding: 40px;
            color: #64748b;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            animation: fadeIn 0.3s ease;
        }

        .modal-content {
            background: white;
            margin: 2% auto;
            padding: 0;
            border-radius: 15px;
            width: 90%;
            max-width: 900px;
            max-height: 90vh;
            overflow-y: auto;
            animation: slideUp 0.3s ease;
        }

        .modal-header {
            background: linear-gradient(135deg, #d89ab3 0%, #b794a8 100%);
            color: white;
            padding: 20px 30px;
            border-radius: 15px 15px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-header h2 {
            margin: 0;
            font-size: 1.5rem;
        }

        .close {
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            padding: 5px;
            border-radius: 50%;
            transition: background 0.3s ease;
        }

        .close:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .modal-body {
            padding: 30px;
        }

        .form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group.full-width {
            grid-column: 1 / -1;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #374151;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s ease;
            box-sizing: border-box;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #d89ab3;
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 10px;
        }

        .checkbox-group input[type="checkbox"] {
            width: auto;
        }

        .email-composer {
            background: #f8fafc;
            border-radius: 12px;
            padding: 25px;
            margin-top: 20px;
        }

        .email-templates {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 25px;
        }

        .template-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            border: 2px solid #e5e7eb;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
        }

        .template-card:hover {
            border-color: #d89ab3;
            transform: translateY(-2px);
        }

        .template-card.active {
            border-color: #d89ab3;
            background: #fdf2f8;
        }

        .email-preview {
            background: white;
            border: 2px solid #e5e7eb;
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
            min-height: 200px;
        }

        .selected-customers-info {
            background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
            border: 1px solid #3b82f6;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            display: none;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            z-index: 9999;
            animation: slideInRight 0.3s ease;
            max-width: 350px;
        }

        .notification.success {
            background: #10b981;
        }

        .notification.error {
            background: #ef4444;
        }

        .notification.warning {
            background: #f59e0b;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @keyframes slideOutRight {
            from {
                transform: translateX(0);
                opacity: 1;
            }
            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }

        @media (max-width: 768px) {
            .controls-section {
                flex-direction: column;
                align-items: stretch;
            }

            .search-filters {
                flex-direction: column;
            }

            .search-input input {
                width: 100%;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }

            .stats-overview {
                grid-template-columns: 1fr;
            }

            .email-templates {
                grid-template-columns: 1fr;
            }

            .modal-content {
                width: 95%;
                margin: 1% auto;
            }
        }
    </style>
</head>
<body class="customer-management">
    <%- include('partials/navbarre.ejs') %>

    <!-- Header de gestion -->
    <div class="management-header">
        <h1><i class="fas fa-users"></i> Gestion des Clients</h1>
        <p>Gérez vos clients, leurs commandes et envoyez des emails personnalisés</p>
    </div>

    <!-- Contrôles et filtres -->
    <div class="controls-section">
        <div class="search-filters">
            <div class="search-input">
                <input type="text" id="searchCustomers" placeholder="Rechercher un client...">
                <i class="fas fa-search"></i>
            </div>
            
            <select class="filter-dropdown" id="accountFilter">
                <option value="all">Tous les clients</option>
                <option value="with-account">Avec compte</option>
                <option value="without-account">Sans compte (invités)</option>
            </select>
            
            <select class="filter-dropdown" id="newsletterFilter">
                <option value="all">Newsletter</option>
                <option value="subscribed">Abonnés</option>
                <option value="not-subscribed">Non abonnés</option>
            </select>
            
            <select class="filter-dropdown" id="orderFilter">
                <option value="all">Commandes</option>
                <option value="with-orders">Avec commandes</option>
                <option value="without-orders">Sans commandes</option>
            </select>
        </div>

        <div class="action-btns">
            <button class="btn btn-secondary" id="exportBtn">
                <i class="fas fa-download"></i> Exporter
            </button>
            <button class="btn btn-success" id="sendEmailBtn">
                <i class="fas fa-envelope"></i> Envoyer Email
            </button>
            <button class="btn btn-primary" id="addCustomerBtn">
                <i class="fas fa-plus"></i> Ajouter Client
            </button>
        </div>
    </div>

    <!-- Statistiques -->
    <div class="stats-overview">
        <div class="stat-card">
            <div class="stat-header">
                <div class="stat-icon" style="background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);">
                    <i class="fas fa-users"></i>
                </div>
            </div>
            <div class="stat-value" id="totalCustomers">
                <% 
                let totalClients = 0;
                if (typeof customersData !== 'undefined' && customersData && customersData.customers) {
                    totalClients = customersData.customers.length;
                } else if (typeof customers !== 'undefined' && customers && customers.length) {
                    totalClients = customers.length;
                } else if (typeof stats !== 'undefined' && stats.totalCustomers) {
                    totalClients = stats.totalCustomers;
                }
                %>
                <%= totalClients %>
            </div>
            <div class="stat-label">Total Clients</div>
        </div>

        <div class="stat-card">
            <div class="stat-header">
                <div class="stat-icon" style="background: linear-gradient(135deg, #10b981 0%, #059669 100%);">
                    <i class="fas fa-shopping-cart"></i>
                </div>
            </div>
            <div class="stat-value" id="customersWithOrders">
                <% 
                let withOrders = 0;
                if (typeof customersData !== 'undefined' && customersData && customersData.customers) {
                    withOrders = customersData.customers.filter(c => c.total_orders && c.total_orders > 0).length;
                } else if (typeof customers !== 'undefined' && customers && customers.length) {
                    withOrders = customers.filter(c => c.total_orders && c.total_orders > 0).length;
                } else if (typeof stats !== 'undefined' && stats.withOrders) {
                    withOrders = stats.withOrders;
                }
                %>
                <%= withOrders %>
            </div>
            <div class="stat-label">Avec Commandes</div>
        </div>

        <div class="stat-card">
            <div class="stat-header">
                <div class="stat-icon" style="background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);">
                    <i class="fas fa-user-check"></i>
                </div>
            </div>
            <div class="stat-value" id="customersWithAccounts">
                <% 
                let withAccounts = 0;
                if (typeof customersData !== 'undefined' && customersData && customersData.customers) {
                    withAccounts = customersData.customers.filter(c => !c.is_guest).length;
                } else if (typeof customers !== 'undefined' && customers && customers.length) {
                    withAccounts = customers.filter(c => !c.is_guest).length;
                } else if (typeof stats !== 'undefined' && stats.withAccounts) {
                    withAccounts = stats.withAccounts;
                }
                %>
                <%= withAccounts %>
            </div>
            <div class="stat-label">Comptes Créés</div>
        </div>

        <div class="stat-card">
            <div class="stat-header">
                <div class="stat-icon" style="background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);">
                    <i class="fas fa-envelope"></i>
                </div>
            </div>
            <div class="stat-value" id="newsletterSubscribers">
                <% 
                let newsletter = 0;
                if (typeof customersData !== 'undefined' && customersData && customersData.customers) {
                    newsletter = customersData.customers.filter(c => c.marketing_opt_in || c.email_notifications).length;
                } else if (typeof customers !== 'undefined' && customers && customers.length) {
                    newsletter = customers.filter(c => c.marketing_opt_in || c.email_notifications).length;
                } else if (typeof stats !== 'undefined' && stats.newsletter) {
                    newsletter = stats.newsletter;
                }
                %>
                <%= newsletter %>
            </div>
            <div class="stat-label">Newsletter</div>
        </div>
    </div>

    <!-- Liste des clients -->
    <div class="customers-list">
        <div class="list-header">
            <h3>Liste des Clients</h3>
            <div class="table-actions">
                <span id="resultsCount">
                    <% 
                    let customerCount = 0;
                    if (typeof customersData !== 'undefined' && customersData && customersData.customers) {
                        customerCount = customersData.customers.length;
                    } else if (typeof customers !== 'undefined' && customers) {
                        customerCount = customers.length;
                    }
                    %>
                    <%= customerCount %> clients trouvés
                </span>
                <span id="selectedCount" style="margin-left: 20px; color: #d89ab3; font-weight: 600; display: none;">
                    0 client(s) sélectionné(s)
                </span>
            </div>
        </div>

        <table class="customers-table" id="customersTable">
            <thead>
                <tr>
                    <th>
                        <input type="checkbox" id="selectAll">
                    </th>
                    <th>Client</th>
                    <th>Statut Compte</th>
                    <th>Newsletter</th>
                    <th>Commandes</th>
                    <th>Dernière Activité</th>
                    <th>Total Dépensé</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="customersTableBody">
                <% 
                let customersToShow = [];
                if (typeof customersData !== 'undefined' && customersData && customersData.customers) {
                    customersToShow = customersData.customers;
                } else if (typeof customers !== 'undefined' && customers) {
                    customersToShow = customers;
                }
                
                if (customersToShow && customersToShow.length > 0) { 
                %>
                    <% customersToShow.forEach(customer => { %>
                        <tr data-customer-id="<%= customer.id %>" 
                            data-account="<%= customer.is_guest ? 'guest' : 'account' %>"
                            data-newsletter="<%= (customer.marketing_opt_in || customer.email_notifications) ? 'yes' : 'no' %>"
                            data-orders="<%= (customer.total_orders && customer.total_orders > 0) ? 'yes' : 'no' %>"
                            class="customer-row">
                            <td>
                                <input type="checkbox" class="customer-checkbox" value="<%= customer.id %>" data-email="<%= customer.email %>">
                            </td>
                            <td>
                                <div class="customer-info">
                                    <div class="customer-avatar">
                                        <%= (customer.first_name || customer.email || 'C')[0].toUpperCase() %>
                                    </div>
                                    <div class="customer-details">
                                        <h4>
                                            <%= (customer.first_name || '') %> <%= (customer.last_name || '') %>
                                            <% if (!customer.first_name && !customer.last_name) { %>
                                                Utilisateur
                                            <% } %>
                                        </h4>
                                        <p><%= customer.email %></p>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <% if (customer.is_guest) { %>
                                    <span class="status-badge status-guest">Invité</span>
                                <% } else { %>
                                    <span class="status-badge status-account">Compte</span>
                                <% } %>
                            </td>
                            <td>
                                <% if (customer.marketing_opt_in || customer.email_notifications) { %>
                                    <span class="status-badge status-newsletter-yes">Abonné</span>
                                <% } else { %>
                                    <span class="status-badge status-newsletter-no">Non abonné</span>
                                <% } %>
                            </td>
                            <td>
                                <strong><%= customer.total_orders || 0 %></strong>
                            </td>
                            <td>
                                <% if (customer.last_order_date) { %>
                                    <%= new Date(customer.last_order_date).toLocaleDateString('fr-FR') %>
                                <% } else if (customer.created_at) { %>
                                    <%= new Date(customer.created_at).toLocaleDateString('fr-FR') %>
                                <% } else { %>
                                    <span style="color: #9ca3af;">Jamais</span>
                                <% } %>
                            </td>
                            <td>
                                <strong><%= parseFloat(customer.total_spent || 0).toFixed(2) %>€</strong>
                            </td>
                            <td>
                                <div class="action-buttons">
                                    <button class="btn-icon btn-view" onclick="viewCustomer(<%= customer.id %>)" title="Voir détails">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn-icon btn-edit" onclick="editCustomer(<%= customer.id %>)" title="Modifier">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn-icon btn-mail" onclick="emailCustomer('<%= customer.email %>')" title="Envoyer email">
                                        <i class="fas fa-envelope"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    <% }); %>
                <% } else { %>
                    <tr>
                        <td colspan="8" class="no-results">
                            <i class="fas fa-users" style="font-size: 48px; color: #d1d5db; margin-bottom: 16px;"></i>
                            <h3>Aucun client trouvé</h3>
                            <p>Aucun client ne correspond à vos critères de recherche.</p>
                        </td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>

    <!-- Modal pour composer un email -->
    <div id="emailModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2><i class="fas fa-envelope"></i> Composer un Email</h2>
                <button class="close" onclick="closeEmailModal()">&times;</button>
            </div>
            <div class="modal-body">
                <form id="emailForm">
                    <div class="form-group">
                        <label>Destinataires</label>
                        <select id="emailRecipients" class="filter-dropdown" style="width: 100%;">
                            <option value="all">Tous les clients</option>
                            <option value="selected">Clients sélectionnés</option>
                            <option value="with-orders">Clients avec commandes</option>
                            <option value="newsletter">Abonnés newsletter</option>
                            <option value="no-orders">Clients sans commandes</option>
                            <option value="guests">Clients invités</option>
                        </select>
                    </div>

                    <div id="selectedCustomersInfo" class="selected-customers-info">
                        <i class="fas fa-info-circle"></i>
                        <span id="selectedCustomersText">0 client(s) sélectionné(s)</span>
                    </div>

                   
                            <div class="email-composer">
                        <h4>Choisir un Template</h4>
                        <div class="email-templates">
                            <div class="template-card active" data-template="newsletter">
                                <i class="fas fa-newspaper" style="font-size: 24px; color: #3b82f6; margin-bottom: 10px;"></i>
                                <h5>Newsletter</h5>
                                <p>Template moderne et élégant</p>
                            </div>
                            
                            <div class="template-card" data-template="promotion">
                                <i class="fas fa-tags" style="font-size: 24px; color: #f59e0b; margin-bottom: 10px;"></i>
                                <h5>Promotion</h5>
                                <p>Pour les offres spéciales</p>
                            </div>
                            
                            <div class="template-card" data-template="welcome">
                                <i class="fas fa-heart" style="font-size: 24px; color: #ec4899; margin-bottom: 10px;"></i>
                                <h5>Bienvenue</h5>
                                <p>Pour accueillir nouveaux clients</p>
                            </div>
                            
                            <div class="template-card" data-template="custom">
                                <i class="fas fa-palette" style="font-size: 24px; color: #8b5cf6; margin-bottom: 10px;"></i>
                                <h5>Personnalisé</h5>
                                <p>Template libre</p>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="emailSubject">Sujet</label>
                            <input type="text" id="emailSubject" name="subject" placeholder="Sujet de l'email" required>
                        </div>

                        <div class="form-group">
                            <label for="emailTitle">Titre Principal</label>
                            <input type="text" id="emailTitle" name="title" placeholder="Titre affiché dans l'email" required>
                        </div>

                        <div class="form-group">
                            <label for="emailContent">Contenu</label>
                            <textarea id="emailContent" name="content" rows="6" placeholder="Votre message..." required></textarea>
                        </div>

                        <div class="form-grid">
                            <div class="form-group">
                                <label for="emailDiscount">Réduction (%)</label>
                                <input type="number" id="emailDiscount" name="discount" min="0" max="100" placeholder="0">
                            </div>
                            
                            <div class="form-group">
                                <label for="emailPromoCode">Code Promo</label>
                                <input type="text" id="emailPromoCode" name="promoCode" placeholder="CODE20">
                            </div>
                        </div>

                        <div class="email-preview" id="emailPreview">
                            <h4>Aperçu de l'Email</h4>
                            <div id="previewContent">
                                <!-- Le contenu sera généré par JavaScript -->
                            </div>
                        </div>

                        <div style="display: flex; gap: 15px; justify-content: flex-end; margin-top: 30px;">
                            <button type="button" onclick="closeEmailModal()" class="btn btn-secondary">
                                Annuler
                            </button>
                            <button type="button" onclick="previewEmailTemplate()" class="btn btn-secondary">
                                <i class="fas fa-eye"></i> Test Aperçu
                            </button>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-paper-plane"></i> Envoyer
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Modal pour voir les détails d'un client -->
    <div id="viewCustomerModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2><i class="fas fa-user"></i> Détails du Client</h2>
                <button class="close" onclick="closeModal('viewCustomerModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div id="customerDetails">
                    <div style="text-align: center; padding: 40px;">
                        <p>Chargement des détails...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal pour éditer un client -->
    <div id="editCustomerModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2><i class="fas fa-edit"></i> Modifier Client</h2>
                <button class="close" onclick="closeModal('editCustomerModal')">&times;</button>
            </div>
            <div class="modal-body">
                <form id="editCustomerForm">
                    <input type="hidden" id="editCustomerId" name="customerId">
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="editFirstName">Prénom</label>
                            <input type="text" id="editFirstName" name="firstName" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="editLastName">Nom</label>
                            <input type="text" id="editLastName" name="lastName" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="editEmail">Email</label>
                            <input type="email" id="editEmail" name="email" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="editPhone">Téléphone</label>
                            <input type="tel" id="editPhone" name="phone">
                        </div>
                        
                        <div class="form-group full-width">
                            <label for="editAddress">Adresse</label>
                            <textarea id="editAddress" name="address" rows="3"></textarea>
                        </div>
                        
                        <div class="form-group">
                            <div class="checkbox-group">
                                <input type="checkbox" id="editNewsletterOpt" name="newsletterOpt">
                                <label for="editNewsletterOpt">Abonné à la newsletter</label>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <div class="checkbox-group">
                                <input type="checkbox" id="editEmailNotifications" name="emailNotifications">
                                <label for="editEmailNotifications">Notifications par email</label>
                            </div>
                        </div>
                    </div>
                    
                    <div style="display: flex; gap: 15px; justify-content: flex-end; margin-top: 30px;">
                        <button type="button" onclick="closeModal('editCustomerModal')" class="btn btn-secondary">Annuler</button>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> Sauvegarder
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

      <!-- Injection des données du serveur -->
    <script type="application/json" id="server-data">
        <%- JSON.stringify({
            customers: (typeof customersData !== 'undefined' && customersData && customersData.customers) ? customersData.customers :
                      (typeof customers !== 'undefined' && customers) ? customers : [],
            stats: (typeof stats !== 'undefined') ? stats : {}
        }) %>
    </script>

    <script>
        // Variables globales avec données du serveur
        let allCustomers = [];
        let filteredCustomers = [];
        let selectedCustomers = [];
        let currentTemplate = 'newsletter';

        // Charger les données du serveur depuis le script JSON
        try {
            const serverData = JSON.parse(document.getElementById('server-data').textContent);
            window.customersServerData = serverData.customers || [];
            window.serverStats = serverData.stats || {};
        } catch (error) {
            console.error('Erreur lors du chargement des données serveur:', error);
            window.customersServerData = [];
            window.serverStats = {};
        }

        // Templates d'email avec designs différents
        const emailTemplates = {
            newsletter: {
                colors: { primary: '#d89ab3', secondary: '#b794a8' },
                icon: '💎',
                title: 'Newsletter Élégante'
            },
            promotion: {
                colors: { primary: '#f59e0b', secondary: '#d97706' },
                icon: '🔥',
                title: 'Offre Promotionnelle'
            },
            welcome: {
                colors: { primary: '#ec4899', secondary: '#be185d' },
                icon: '🌟',
                title: 'Bienvenue'
            },
            custom: {
                colors: { primary: '#8b5cf6', secondary: '#7c3aed' },
                icon: '📧',
                title: 'Email Personnalisé'
            }
        };

        // Initialisation
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Initialisation du système de gestion clients...');
            console.log('📊 Données clients disponibles:', window.customersServerData?.length || 0);
            
            try {
                initializeEventListeners();
                loadCustomersData();
                updatePreview();
                console.log('✅ Système initialisé avec succès');
            } catch (error) {
                console.error('❌ Erreur lors de l\'initialisation:', error);
                showNotification('Erreur lors de l\'initialisation du système', 'error');
            }
        });

        // Initialiser les event listeners
        function initializeEventListeners() {
            console.log('📋 Initialisation des event listeners...');
            
            // Vérifier que les éléments existent avant d'ajouter les listeners
            const elements = {
                searchCustomers: document.getElementById('searchCustomers'),
                accountFilter: document.getElementById('accountFilter'),
                newsletterFilter: document.getElementById('newsletterFilter'),
                orderFilter: document.getElementById('orderFilter'),
                selectAll: document.getElementById('selectAll'),
                sendEmailBtn: document.getElementById('sendEmailBtn'),
                exportBtn: document.getElementById('exportBtn'),
                addCustomerBtn: document.getElementById('addCustomerBtn'),
                emailForm: document.getElementById('emailForm'),
                editCustomerForm: document.getElementById('editCustomerForm'),
                emailRecipients: document.getElementById('emailRecipients')
            };

            // Filtres et recherche
            if (elements.searchCustomers) {
                elements.searchCustomers.addEventListener('input', filterCustomers);
                console.log('✅ Search listener ajouté');
            }
            if (elements.accountFilter) {
                elements.accountFilter.addEventListener('change', filterCustomers);
            }
            if (elements.newsletterFilter) {
                elements.newsletterFilter.addEventListener('change', filterCustomers);
            }
            if (elements.orderFilter) {
                elements.orderFilter.addEventListener('change', filterCustomers);
            }

            // Sélection
            if (elements.selectAll) {
                elements.selectAll.addEventListener('change', toggleSelectAll);
            }

            // Délégation d'événements pour les checkboxes des clients
            document.addEventListener('change', function(e) {
                if (e.target && e.target.classList.contains('customer-checkbox')) {
                    updateSelectedCustomers();
                }
            });

            // Boutons d'action
            if (elements.sendEmailBtn) {
                elements.sendEmailBtn.addEventListener('click', openEmailModal);
                console.log('✅ Email button listener ajouté');
            }
            if (elements.exportBtn) {
                elements.exportBtn.addEventListener('click', exportCustomers);
            }
            if (elements.addCustomerBtn) {
                elements.addCustomerBtn.addEventListener('click', addNewCustomer);
            }

            // Formulaires
            if (elements.emailForm) {
                elements.emailForm.addEventListener('submit', sendBulkEmail);
            }
            if (elements.editCustomerForm) {
                elements.editCustomerForm.addEventListener('submit', saveCustomer);
            }

            // Templates d'email
            document.querySelectorAll('.template-card').forEach(card => {
                card.addEventListener('click', function() {
                    selectEmailTemplate(this.dataset.template);
                });
            });

            // Aperçu email en temps réel
            ['emailTitle', 'emailContent', 'emailDiscount', 'emailPromoCode'].forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.addEventListener('input', updatePreview);
                }
            });

            // Sélection de destinataires
            if (elements.emailRecipients) {
                elements.emailRecipients.addEventListener('change', updateSelectedCustomersInfo);
            }

            // Fermer modals en cliquant à l'extérieur
            window.addEventListener('click', function(event) {
                if (event.target && event.target.classList.contains('modal')) {
                    closeModal(event.target.id);
                }
            });

            // Raccourcis clavier
            document.addEventListener('keydown', function(event) {
                if (event.key === 'Escape') {
                    const openModal = document.querySelector('.modal[style*="block"]');
                    if (openModal) {
                        closeModal(openModal.id);
                    }
                }
            });

            console.log('✅ Event listeners initialisés');
        }

        // Charger les données des clients
        function loadCustomersData() {
            try {
                const customerRows = document.querySelectorAll('.customer-row');
                allCustomers = Array.from(customerRows).map(row => {
                    return {
                        id: row.dataset.customerId,
                        element: row
                    };
                });
                filteredCustomers = [...allCustomers];
                updateResultsCount();
                console.log('📋 Données clients chargées:', allCustomers.length);
            } catch (error) {
                console.error('❌ Erreur lors du chargement des données:', error);
            }
        }

        // Filtrer les clients
        function filterCustomers() {
            try {
                const searchTerm = document.getElementById('searchCustomers')?.value.toLowerCase() || '';
                const accountFilter = document.getElementById('accountFilter')?.value || 'all';
                const newsletterFilter = document.getElementById('newsletterFilter')?.value || 'all';
                const orderFilter = document.getElementById('orderFilter')?.value || 'all';

                filteredCustomers = allCustomers.filter(customer => {
                    const row = customer.element;
                    if (!row) return false;
                    
                    const customerInfo = row.querySelector('.customer-details');
                    if (!customerInfo) return false;
                    
                    const nameElement = customerInfo.querySelector('h4');
                    const emailElement = customerInfo.querySelector('p');
                    
                    if (!nameElement || !emailElement) return false;
                    
                    const name = nameElement.textContent.toLowerCase();
                    const email = emailElement.textContent.toLowerCase();
                    
                    // Filtrage par texte
                    const matchesSearch = name.includes(searchTerm) || email.includes(searchTerm);
                    
                    // Filtrage par type de compte
                    const matchesAccount = accountFilter === 'all' || 
                        (accountFilter === 'with-account' && row.dataset.account === 'account') ||
                        (accountFilter === 'without-account' && row.dataset.account === 'guest');
                    
                    // Filtrage par newsletter
                    const matchesNewsletter = newsletterFilter === 'all' ||
                        (newsletterFilter === 'subscribed' && row.dataset.newsletter === 'yes') ||
                        (newsletterFilter === 'not-subscribed' && row.dataset.newsletter === 'no');
                    
                    // Filtrage par commandes
                    const matchesOrders = orderFilter === 'all' ||
                        (orderFilter === 'with-orders' && row.dataset.orders === 'yes') ||
                        (orderFilter === 'without-orders' && row.dataset.orders === 'no');

                    return matchesSearch && matchesAccount && matchesNewsletter && matchesOrders;
                });

                // Afficher/masquer les lignes
                allCustomers.forEach(customer => {
                    if (customer.element) {
                        customer.element.style.display = 'none';
                    }
                });

                filteredCustomers.forEach(customer => {
                    if (customer.element) {
                        customer.element.style.display = 'table-row';
                    }
                });

                updateResultsCount();
            } catch (error) {
                console.error('❌ Erreur lors du filtrage:', error);
            }
        }

        // Mettre à jour le nombre de résultats
        function updateResultsCount() {
            try {
                const count = filteredCustomers.length;
                const resultsElement = document.getElementById('resultsCount');
                if (resultsElement) {
                    resultsElement.textContent = `${count} clients trouvés`;
                }
            } catch (error) {
                console.error('❌ Erreur lors de la mise à jour du compteur:', error);
            }
        }

        // Sélectionner/désélectionner tous
        function toggleSelectAll(event) {
            try {
                const checkboxes = document.querySelectorAll('.customer-checkbox');
                checkboxes.forEach(checkbox => {
                    const row = checkbox.closest('tr');
                    if (row && row.style.display !== 'none') {
                        checkbox.checked = event.target.checked;
                    }
                });
                updateSelectedCustomers();
            } catch (error) {
                console.error('❌ Erreur lors de la sélection globale:', error);
            }
        }

        // Mettre à jour la liste des clients sélectionnés
        function updateSelectedCustomers() {
            try {
                const selected = document.querySelectorAll('.customer-checkbox:checked');
                selectedCustomers = Array.from(selected).map(cb => ({
                    id: cb.value,
                    email: cb.dataset.email || cb.getAttribute('data-email')
                }));

                const count = selectedCustomers.length;
                const countElement = document.getElementById('selectedCount');
                
                if (countElement) {
                    if (count > 0) {
                        countElement.textContent = `${count} client(s) sélectionné(s)`;
                        countElement.style.display = 'inline';
                    } else {
                        countElement.style.display = 'none';
                    }
                }

                updateSelectedCustomersInfo();
            } catch (error) {
                console.error('❌ Erreur lors de la mise à jour des sélections:', error);
            }
        }

        // Mettre à jour les infos des clients sélectionnés dans le modal
        function updateSelectedCustomersInfo() {
            try {
                const recipientsSelect = document.getElementById('emailRecipients');
                const infoDiv = document.getElementById('selectedCustomersInfo');
                const textSpan = document.getElementById('selectedCustomersText');
                
                if (!recipientsSelect || !infoDiv || !textSpan) return;
                
                const recipients = recipientsSelect.value;
                
                if (recipients === 'selected') {
                    const count = selectedCustomers.length;
                    textSpan.textContent = `${count} client(s) sélectionné(s)`;
                    infoDiv.style.display = count > 0 ? 'block' : 'none';
                } else {
                    infoDiv.style.display = 'none';
                }
            } catch (error) {
                console.error('❌ Erreur lors de la mise à jour des infos:', error);
            }
        }

        // Sélectionner un template d'email
        function selectEmailTemplate(template) {
            try {
                currentTemplate = template;
                
                // Retirer la classe active de tous les templates
                document.querySelectorAll('.template-card').forEach(card => {
                    card.classList.remove('active');
                });
                
                // Ajouter la classe active au template sélectionné
                const selectedCard = document.querySelector(`[data-template="${template}"]`);
                if (selectedCard) {
                    selectedCard.classList.add('active');
                }
                
                // Mettre à jour l'aperçu
                updatePreview();
            } catch (error) {
                console.error('❌ Erreur lors de la sélection du template:', error);
            }
        }

        // Mettre à jour l'aperçu de l'email
        function updatePreview() {
            try {
                const template = emailTemplates[currentTemplate];
                if (!template) return;

                const titleInput = document.getElementById('emailTitle');
                const contentInput = document.getElementById('emailContent');
                const discountInput = document.getElementById('emailDiscount');
                const promoCodeInput = document.getElementById('emailPromoCode');

                const title = titleInput?.value || 'Titre de l\'email';
                const content = contentInput?.value || 'Votre message apparaîtra ici...';
                const discount = discountInput?.value;
                const promoCode = promoCodeInput?.value;

                const previewDiv = document.getElementById('previewContent');
                if (!previewDiv) return;

                let promoSection = '';
                if (discount && discount > 0 && promoCode) {
                    promoSection = `
                        <div style="background: ${template.colors.primary}15; border: 2px solid ${template.colors.primary}; border-radius: 12px; padding: 25px; text-align: center; margin: 25px 0;">
                            <h3 style="color: ${template.colors.secondary}; margin: 0 0 15px 0; font-size: 22px;">
                                🎉 Offre Spéciale ${discount}% !
                            </h3>
                            <div style="background: white; border: 1px solid ${template.colors.primary}; border-radius: 8px; padding: 15px; margin: 15px 0;">
                                <p style="margin: 0; color: ${template.colors.secondary}; font-size: 14px; font-weight: 600;">
                                    Code promo : <span style="font-family: monospace; font-size: 18px; font-weight: bold;">${promoCode}</span>
                                </p>
                            </div>
                        </div>
                    `;
                }

                previewDiv.innerHTML = `
                    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #ffffff; border-radius: 15px; overflow: hidden; box-shadow: 0 8px 25px rgba(0,0,0,0.15);">
                        <div style="background: linear-gradient(135deg, ${template.colors.primary} 0%, ${template.colors.secondary} 100%); color: white; padding: 40px 30px; text-align: center;">
                            <h1 style="margin: 0; font-size: 32px; font-weight: 700;">
                                ${template.icon} ${template.title}
                            </h1>
                            <p style="margin: 15px 0 0 0; opacity: 0.9; font-size: 16px;">
                                Bijouterie Élégance - Votre bijoutier de confiance
                            </p>
                        </div>
                        <div style="padding: 40px 30px;">
                            <h2 style="color: #1e293b; margin-bottom: 25px; font-size: 26px; text-align: center;">
                                ${title}
                            </h2>
                            <div style="color: #64748b; font-size: 16px; line-height: 1.7; margin-bottom: 30px;">
                                ${content.replace(/\n/g, '<br>')}
                            </div>
                            ${promoSection}
                            <div style="text-align: center; margin: 35px 0;">
                                <a href="#" style="background: linear-gradient(135deg, ${template.colors.primary} 0%, ${template.colors.secondary} 100%); color: white; padding: 15px 30px; text-decoration: none; border-radius: 50px; font-weight: 600; font-size: 16px; display: inline-block; box-shadow: 0 4px 15px ${template.colors.primary}40;">
                                    Découvrir nos bijoux ✨
                                </a>
                            </div>
                        </div>
                        <div style="background-color: #f8fafc; padding: 25px; text-align: center; border-top: 1px solid #e5e7eb;">
                            <p style="margin: 0; color: #6b7280; font-size: 14px;">
                                Bijouterie Élégance - Des bijoux d'exception !
                            </p>
                        </div>
                    </div>
                `;
            } catch (error) {
                console.error('❌ Erreur lors de la mise à jour de l\'aperçu:', error);
            }
        }

        // Test de l'aperçu
        function previewEmailTemplate() {
            try {
                updatePreview();
                const previewDiv = document.getElementById('previewContent');
                if (!previewDiv) {
                    showNotification('Erreur: aperçu non disponible', 'error');
                    return;
                }
                
                // Créer une nouvelle fenêtre pour l'aperçu
                const previewWindow = window.open('', '_blank', 'width=800,height=600,scrollbars=yes');
                if (previewWindow) {
                    previewWindow.document.write(`
                        <!DOCTYPE html>
                        <html>
                        <head>
                            <title>Aperçu Email - ${emailTemplates[currentTemplate]?.title || 'Email'}</title>
                            <meta charset="UTF-8">
                        </head>
                        <body style="margin: 0; padding: 20px; background: #f3f4f6;">
                            ${previewDiv.innerHTML}
                        </body>
                        </html>
                    `);
                    previewWindow.document.close();
                } else {
                    showNotification('Impossible d\'ouvrir la fenêtre d\'aperçu', 'error');
                }
            } catch (error) {
                console.error('❌ Erreur lors de l\'aperçu:', error);
                showNotification('Erreur lors de l\'ouverture de l\'aperçu', 'error');
            }
        }

        // Ouvrir le modal d'email
        function openEmailModal() {
            try {
                console.log('🔵 Ouverture du modal email...');
                updateSelectedCustomers();
                const recipients = document.getElementById('emailRecipients')?.value;
                
                if (recipients === 'selected' && selectedCustomers.length === 0) {
                    showNotification('Veuillez sélectionner au moins un client', 'warning');
                    return;
                }
                
                openModal('emailModal');
                updateSelectedCustomersInfo();
                console.log('✅ Modal email ouvert');
            } catch (error) {
                console.error('❌ Erreur lors de l\'ouverture du modal email:', error);
                showNotification('Erreur lors de l\'ouverture du modal', 'error');
            }
        }

        // Fermer le modal d'email
        function closeEmailModal() {
            try {
                closeModal('emailModal');
                // Reset du formulaire
                const emailForm = document.getElementById('emailForm');
                if (emailForm) {
                    emailForm.reset();
                }
                selectEmailTemplate('newsletter');
                updatePreview();
            } catch (error) {
                console.error('❌ Erreur lors de la fermeture du modal email:', error);
            }
        }

        // Envoyer email en masse
        function sendBulkEmail(event) {
            try {
                event.preventDefault();
                
                const formData = new FormData(event.target);
                const subject = formData.get('subject');
                const title = formData.get('title');
                const content = formData.get('content');
                
                if (!subject || !title || !content) {
                    showNotification('Veuillez remplir tous les champs requis', 'warning');
                    return;
                }
                
                const emailData = {
                    recipients: document.getElementById('emailRecipients')?.value || 'all',
                    selectedCustomers: selectedCustomers.map(c => c.id),
                    template: currentTemplate,
                    subject: subject,
                    title: title,
                    content: content,
                    discount: formData.get('discount'),
                    promoCode: formData.get('promoCode')
                };

                const recipientCount = emailData.recipients === 'selected' ? selectedCustomers.length : 
                                     emailData.recipients === 'all' ? allCustomers.length : 'certains';
                
                if (!confirm(`Êtes-vous sûr de vouloir envoyer cet email à ${recipientCount} client(s) ?`)) {
                    return;
                }

                const submitBtn = event.target.querySelector('button[type="submit"]');
                if (submitBtn) {
                    const originalHTML = submitBtn.innerHTML;
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Envoi en cours...';

                    fetch('/admin/send-bulk-email', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(emailData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const message = `Email envoyé avec succès à ${data.sentCount} client(s)${data.errorCount > 0 ? ` (${data.errorCount} erreurs)` : ''}`;
                            showNotification(message, 'success');
                            closeEmailModal();
                        } else {
                            showNotification('Erreur lors de l\'envoi: ' + (data.message || 'Erreur inconnue'), 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Erreur:', error);
                        showNotification('Erreur lors de l\'envoi des emails', 'error');
                    })
                    .finally(() => {
                        submitBtn.disabled = false;
                        submitBtn.innerHTML = originalHTML;
                    });
                }
            } catch (error) {
                console.error('❌ Erreur lors de l\'envoi de l\'email:', error);
                showNotification('Erreur lors de l\'envoi de l\'email', 'error');
            }
        }

        // Voir les détails d'un client
        function viewCustomer(customerId) {
            try {
                console.log('🔍 Affichage des détails du client:', customerId);
                openModal('viewCustomerModal');
                
                // Utiliser les données du serveur si disponibles
                const customerData = window.customersServerData?.find(c => c.id == customerId);
                
                if (customerData) {
                    displayCustomerDetails(customerData);
                } else {
                    // Fallback: récupérer depuis le serveur
                    fetch(`/admin/customer/${customerId}/details`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                displayCustomerDetails(data.customer);
                            } else {
                                showErrorInModal('customerDetails');
                            }
                        })
                        .catch(error => {
                            console.error('Erreur:', error);
                            showErrorInModal('customerDetails');
                        });
                }
            } catch (error) {
                console.error('❌ Erreur lors de l\'affichage des détails:', error);
                showNotification('Erreur lors de l\'affichage des détails', 'error');
            }
        }

        // Afficher les détails du client
        function displayCustomerDetails(customer) {
            try {
                const detailsHtml = `
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 30px;">
                        <div>
                            <h4 style="color: #1e293b; margin-bottom: 15px; font-size: 18px;">📋 Informations personnelles</h4>
                            <div style="background: #f8fafc; padding: 20px; border-radius: 10px;">
                                <p style="margin-bottom: 10px;"><strong>Nom :</strong> ${customer.first_name || ''} ${customer.last_name || ''}</p>
                                <p style="margin-bottom: 10px;"><strong>Email :</strong> ${customer.email}</p>
                                <p style="margin-bottom: 10px;"><strong>Téléphone :</strong> ${customer.phone || 'Non renseigné'}</p>
                                <p style="margin-bottom: 10px;"><strong>Adresse :</strong> ${customer.address || 'Non renseignée'}</p>
                                <p style="margin-bottom: 10px;"><strong>Type :</strong> ${customer.is_guest ? 'Client invité' : 'Compte créé'}</p>
                                <p style="margin-bottom: 0;"><strong>Inscrit le :</strong> ${customer.created_at ? new Date(customer.created_at).toLocaleDateString('fr-FR') : 'Date inconnue'}</p>
                            </div>
                        </div>
                        
                        <div>
                            <h4 style="color: #1e293b; margin-bottom: 15px; font-size: 18px;">📊 Statistiques</h4>
                            <div style="background: #f8fafc; padding: 20px; border-radius: 10px;">
                                <p style="margin-bottom: 10px;"><strong>Commandes :</strong> ${customer.total_orders || 0}</p>
                                <p style="margin-bottom: 10px;"><strong>Total dépensé :</strong> ${parseFloat(customer.total_spent || 0).toFixed(2)}€</p>
                                <p style="margin-bottom: 10px;"><strong>Dernière commande :</strong> ${customer.last_order_date ? new Date(customer.last_order_date).toLocaleDateString('fr-FR') : 'Jamais'}</p>
                                <p style="margin-bottom: 10px;"><strong>Newsletter :</strong> ${customer.marketing_opt_in ? 'Abonné' : 'Non abonné'}</p>
                                <p style="margin-bottom: 0;"><strong>Notifications :</strong> ${customer.email_notifications ? 'Activées' : 'Désactivées'}</p>
                            </div>
                        </div>
                    </div>
                    
                    <div style="margin-top: 30px;">
                        <h4 style="color: #1e293b; margin-bottom: 15px; font-size: 18px;">📝 Notes</h4>
                        <div style="background: #f8fafc; padding: 20px; border-radius: 10px;">
                            <p style="margin: 0;">${customer.notes || 'Aucune note pour ce client.'}</p>
                        </div>
                    </div>
                `;
                
                const detailsElement = document.getElementById('customerDetails');
                if (detailsElement) {
                    detailsElement.innerHTML = detailsHtml;
                }
            } catch (error) {
                console.error('❌ Erreur lors de l\'affichage des détails client:', error);
                showErrorInModal('customerDetails');
            }
        }

        // Afficher erreur dans modal
        function showErrorInModal(elementId) {
            try {
                const element = document.getElementById(elementId);
                if (element) {
                    element.innerHTML = 
                        `<div style="text-align: center; padding: 40px; color: #ef4444;">
                            <i class="fas fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 16px;"></i>
                            <h3>Erreur</h3>
                            <p>Impossible de charger les détails du client.</p>
                        </div>`;
                }
            } catch (error) {
                console.error('❌ Erreur lors de l\'affichage de l\'erreur:', error);
            }
        }

        // Éditer un client
        function editCustomer(customerId) {
            try {
                console.log('✏️ Édition du client:', customerId);
                openModal('editCustomerModal');
                
                // Utiliser les données du serveur si disponibles
                const customerData = window.customersServerData?.find(c => c.id == customerId);
                
                if (customerData) {
                    populateEditForm(customerData);
                } else {
                    // Fallback: récupérer depuis le serveur
                    fetch(`/admin/customer/${customerId}/details`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                populateEditForm(data.customer);
                            } else {
                                showNotification('Erreur lors du chargement des données client', 'error');
                                closeModal('editCustomerModal');
                            }
                        })
                        .catch(error => {
                            console.error('Erreur:', error);
                            showNotification('Erreur de connexion', 'error');
                            closeModal('editCustomerModal');
                        });
                }
            } catch (error) {
                console.error('❌ Erreur lors de l\'édition du client:', error);
                showNotification('Erreur lors de l\'édition', 'error');
            }
        }

        // Remplir le formulaire d'édition
        function populateEditForm(customer) {
            try {
                const elements = {
                    editCustomerId: customer.id,
                    editFirstName: customer.first_name || '',
                    editLastName: customer.last_name || '',
                    editEmail: customer.email || '',
                    editPhone: customer.phone || '',
                    editAddress: customer.address || ''
                };

                // Remplir les champs texte
                Object.entries(elements).forEach(([id, value]) => {
                    const element = document.getElementById(id);
                    if (element) {
                        element.value = value;
                    }
                });

                // Remplir les checkboxes
                const newsletterCheckbox = document.getElementById('editNewsletterOpt');
                const notificationsCheckbox = document.getElementById('editEmailNotifications');
                
                if (newsletterCheckbox) {
                    newsletterCheckbox.checked = customer.marketing_opt_in || false;
                }
                if (notificationsCheckbox) {
                    notificationsCheckbox.checked = customer.email_notifications || false;
                }
            } catch (error) {
                console.error('❌ Erreur lors du remplissage du formulaire:', error);
            }
        }

        // Sauvegarder les modifications d'un client
        function saveCustomer(event) {
            try {
                event.preventDefault();
                
                const formData = new FormData(event.target);
                const customerId = formData.get('customerId');
                
                const customerData = {
                    id: customerId,
                    firstName: formData.get('firstName'),
                    lastName: formData.get('lastName'),
                    email: formData.get('email'),
                    phone: formData.get('phone'),
                    address: formData.get('address'),
                    marketingOptIn: document.getElementById('editNewsletterOpt')?.checked || false,
                    emailNotifications: document.getElementById('editEmailNotifications')?.checked || false
                };

                const submitBtn = event.target.querySelector('button[type="submit"]');
                if (submitBtn) {
                    const originalHTML = submitBtn.innerHTML;
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sauvegarde...';

                    fetch(`/admin/customer/${customerId}/update`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(customerData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showNotification('Client mis à jour avec succès', 'success');
                            closeModal('editCustomerModal');
                            // Recharger la page pour voir les modifications
                            setTimeout(() => {
                                window.location.reload();
                            }, 1000);
                        } else {
                            showNotification('Erreur lors de la mise à jour: ' + (data.message || 'Erreur inconnue'), 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Erreur:', error);
                        showNotification('Erreur lors de la mise à jour du client', 'error');
                    })
                    .finally(() => {
                        submitBtn.disabled = false;
                        submitBtn.innerHTML = originalHTML;
                    });
                }
            } catch (error) {
                console.error('❌ Erreur lors de la sauvegarde:', error);
                showNotification('Erreur lors de la sauvegarde', 'error');
            }
        }

        // Envoyer email à un client spécifique
        function emailCustomer(email) {
            try {
                console.log('📧 Email pour le client:', email);
                // Pré-sélectionner le client dans le modal d'email
                openEmailModal();
                // Ici vous pourriez ajouter une logique pour pré-remplir l'email
            } catch (error) {
                console.error('❌ Erreur lors de l\'envoi d\'email:', error);
            }
        }

        // Exporter les clients
        function exportCustomers() {
            try {
                console.log('📥 Export des clients...');
                const selectedOnly = selectedCustomers.length > 0;
                
                if (selectedOnly) {
                    const confirmExport = confirm(`Exporter uniquement les ${selectedCustomers.length} clients sélectionnés ?`);
                    if (!confirmExport) return;
                }

                // Créer l'URL d'export
                let exportUrl = '/admin/customers/export';
                if (selectedOnly) {
                    const customerIds = selectedCustomers.map(c => c.id).join(',');
                    exportUrl += `?selected=${customerIds}`;
                }

                // Déclencher le téléchargement
                window.location.href = exportUrl;
                
                showNotification('Export en cours...', 'success');
            } catch (error) {
                console.error('❌ Erreur lors de l\'export:', error);
                showNotification('Erreur lors de l\'export', 'error');
            }
        }

        // Ajouter un nouveau client
        function addNewCustomer() {
            try {
                console.log('➕ Ajout d\'un nouveau client...');
                // Rediriger vers la page d'ajout de client
                window.location.href = '/admin/customers/add';
            } catch (error) {
                console.error('❌ Erreur lors de la redirection:', error);
                showNotification('Erreur lors de la redirection', 'error');
            }
        }

        // Utilitaires pour les modals
        function openModal(modalId) {
            try {
                const modal = document.getElementById(modalId);
                if (modal) {
                    modal.style.display = 'block';
                    document.body.style.overflow = 'hidden';
                    console.log('✅ Modal ouvert:', modalId);
                } else {
                    console.error('❌ Modal non trouvé:', modalId);
                }
            } catch (error) {
                console.error('❌ Erreur lors de l\'ouverture du modal:', error);
            }
        }

        function closeModal(modalId) {
            try {
                const modal = document.getElementById(modalId);
                if (modal) {
                    modal.style.display = 'none';
                    document.body.style.overflow = 'auto';
                    console.log('✅ Modal fermé:', modalId);
                }
            } catch (error) {
                console.error('❌ Erreur lors de la fermeture du modal:', error);
            }
        }

        // Système de notifications
        function showNotification(message, type = 'info') {
            try {
                console.log(`📢 Notification ${type}:`, message);
                
                // Supprimer les notifications existantes
                const existingNotifications = document.querySelectorAll('.notification');
                existingNotifications.forEach(notification => {
                    notification.remove();
                });

                // Créer la nouvelle notification
                const notification = document.createElement('div');
                notification.className = `notification ${type}`;
                
                const iconMap = {
                    'success': 'check-circle',
                    'error': 'exclamation-circle',
                    'warning': 'exclamation-triangle',
                    'info': 'info-circle'
                };
                
                const icon = iconMap[type] || 'info-circle';
                
                notification.innerHTML = `
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <i class="fas fa-${icon}"></i>
                        <span>${message}</span>
                    </div>
                `;

                // Ajouter au DOM
                document.body.appendChild(notification);

                // Auto-suppression après 5 secondes
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.style.animation = 'slideOutRight 0.3s ease forwards';
                        setTimeout(() => {
                            if (notification.parentNode) {
                                notification.parentNode.removeChild(notification);
                            }
                        }, 300);
                    }
                }, 5000);
            } catch (error) {
                console.error('❌ Erreur lors de l\'affichage de la notification:', error);
            }
        }

        // Gestion du responsive
        function handleResponsive() {
            try {
                const isMobile = window.innerWidth <= 768;
                
                if (isMobile) {
                    // Ajustements pour mobile
                    const searchInput = document.querySelector('.search-input input');
                    if (searchInput) {
                        searchInput.style.width = '100%';
                    }
                }
            } catch (error) {
                console.error('❌ Erreur lors de la gestion du responsive:', error);
            }
        }

        // Event listener pour le redimensionnement
        window.addEventListener('resize', handleResponsive);

        // Exposer les fonctions globalement pour les boutons HTML
        window.viewCustomer = viewCustomer;
        window.editCustomer = editCustomer;
        window.emailCustomer = emailCustomer;
        window.closeEmailModal = closeEmailModal;
        window.closeModal = closeModal;
        window.previewEmailTemplate = previewEmailTemplate;

        // Message de debug pour vérifier le chargement
        console.log('✅ Système de gestion clients initialisé avec succès');
        console.log('📊 Clients disponibles:', window.customersServerData?.length || 0);
        console.log('🔧 Fonctions exposées globalement:', {
            viewCustomer: typeof window.viewCustomer,
            editCustomer: typeof window.editCustomer,
            emailCustomer: typeof window.emailCustomer,
            closeEmailModal: typeof window.closeEmailModal,
            closeModal: typeof window.closeModal,
            previewEmailTemplate: typeof window.previewEmailTemplate
        });
    </script>
    
</body>
</html>