
                <!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/css/style.css">
    <style>
        /* =============================================================================
           VARIABLES CSS - Tons du site
        ============================================================================= */
        :root {
            --rose-gold: #d4a574;
            --rose-gold-dark: #b8935f;
            --rose-gold-light: #e8d0b8;
            --cream: #f8f6f0;
            --white-soft: #fefefe;
            --dark-text: #2c3e50;
            --medium-text: #34495e;
            --light-text: #7f8c8d;
            --border-light: #ecf0f1;
            --border-medium: #bdc3c7;
            --success: #27ae60;
            --warning: #f39c12;
            --error: #e74c3c;
            --info: #3498db;
            --shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            --shadow-hover: 0 8px 25px rgba(0, 0, 0, 0.15);
            --transition: all 0.3s ease;
            --border-radius: 12px;
        }

        /* =============================================================================
           BASE STYLES
        ============================================================================= */
        body {
            font-family: 'Montserrat', sans-serif;
            background: linear-gradient(135deg, var(--cream) 0%, #f0ede6 100%);
            color: var(--dark-text);
            line-height: 1.6;
            margin: 0;
            padding: 0;
        }

        .main-content {
            min-height: 100vh;
            padding-top: 2rem;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }

        /* =============================================================================
           HEADER SECTION
        ============================================================================= */
        .orders-header {
            background: linear-gradient(135deg, var(--rose-gold) 0%, var(--rose-gold-dark) 100%);
            border-radius: var(--border-radius);
            padding: 2.5rem 2rem;
            margin-bottom: 2rem;
            text-align: center;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .orders-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="pattern" x="0" y="0" width="20" height="20" patternUnits="userSpaceOnUse"><circle cx="10" cy="10" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23pattern)"/></svg>');
            opacity: 0.3;
        }

        .orders-title {
            color: white;
            font-size: clamp(1.75rem, 4vw, 2.5rem);
            font-weight: 700;
            margin-bottom: 0.5rem;
            position: relative;
            z-index: 2;
            text-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .orders-subtitle {
            color: rgba(255, 255, 255, 0.9);
            font-size: clamp(0.9rem, 2.5vw, 1.1rem);
            font-weight: 400;
            position: relative;
            z-index: 2;
            max-width: 600px;
            margin: 0 auto;
        }

        /* =============================================================================
           STATS DASHBOARD
        ============================================================================= */
        .orders-stats {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        @media (min-width: 768px) {
            .orders-stats {
                grid-template-columns: repeat(4, 1fr);
            }
        }

        .stat-card {
            background: var(--white-soft);
            border-radius: var(--border-radius);
            padding: 1.5rem;
            box-shadow: var(--shadow);
            text-align: center;
            transition: var(--transition);
            border: 2px solid transparent;
        }

        .stat-card:hover {
            transform: translateY(-3px);
            box-shadow: var(--shadow-hover);
            border-color: var(--rose-gold-light);
        }

        .stat-icon {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--rose-gold) 0%, var(--rose-gold-dark) 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
            margin: 0 auto 1rem;
        }

        .stat-value {
            font-size: clamp(1.5rem, 5vw, 2rem);
            font-weight: 700;
            color: var(--rose-gold-dark);
            margin-bottom: 0.5rem;
        }

        .stat-label {
            font-size: 0.8rem;
            color: var(--medium-text);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            font-weight: 600;
        }

        /* =============================================================================
           CONTROLS SECTION
        ============================================================================= */
        .orders-controls {
            background: var(--white-soft);
            border-radius: var(--border-radius);
            padding: 1.5rem;
            margin-bottom: 2rem;
            box-shadow: var(--shadow);
        }

        .controls-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 1rem;
        }

        .filter-group {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        .filter-select {
            padding: 0.875rem 1rem;
            border: 2px solid var(--border-light);
            border-radius: var(--border-radius);
            font-size: 0.95rem;
            background: white;
            cursor: pointer;
            transition: var(--transition);
            font-weight: 500;
            color: var(--dark-text);
            font-family: 'Montserrat', sans-serif;
        }

        .filter-select:focus {
            outline: none;
            border-color: var(--rose-gold);
            box-shadow: 0 0 0 3px rgba(212, 165, 116, 0.1);
        }

        .search-btn {
            padding: 0.875rem 1.5rem;
            background: linear-gradient(135deg, var(--rose-gold), var(--rose-gold-dark));
            color: white;
            border: none;
            border-radius: var(--border-radius);
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            font-size: 0.95rem;
            box-shadow: var(--shadow);
            font-family: 'Montserrat', sans-serif;
        }

        .search-btn:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-hover);
        }

        @media (min-width: 640px) {
            .controls-grid {
                grid-template-columns: 1fr 1fr auto;
                align-items: end;
            }
            
            .filter-group {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
        }

        /* =============================================================================
           ORDERS LIST
        ============================================================================= */
        .orders-container {
            background: var(--white-soft);
            border-radius: var(--border-radius);
            padding: 2rem;
            box-shadow: var(--shadow);
        }

        .order-card {
            background: white;
            border: 2px solid var(--border-light);
            border-radius: var(--border-radius);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            transition: var(--transition);
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .order-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: linear-gradient(135deg, var(--rose-gold), var(--rose-gold-dark));
            transform: scaleY(0);
            transition: var(--transition);
        }

        .order-card:hover::before {
            transform: scaleY(1);
        }

        .order-card:hover {
            border-color: var(--rose-gold-light);
            transform: translateX(5px);
            box-shadow: var(--shadow-hover);
        }

        .order-card:last-child {
            margin-bottom: 0;
        }

        .order-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .order-info {
            flex: 1;
        }

        .order-number {
            font-weight: 700;
            font-size: 1.1rem;
            color: var(--rose-gold-dark);
            margin-bottom: 0.3rem;
            font-family: 'Courier New', monospace;
        }

        .order-date {
            color: var(--light-text);
            font-size: 0.85rem;
            margin-bottom: 0.3rem;
        }

        .order-status {
            display: inline-block;
            padding: 0.4rem 1rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        /* Status Colors */
        .status-waiting { background: #fff3cd; color: #856404; }
        .status-preparing { background: #d1ecf1; color: #0c5460; }
        .status-shipped { background: #d4edda; color: #155724; }
        .status-delivered { background: #d1e7dd; color: #0f5132; }
        .status-cancelled { background: #f8d7da; color: #721c24; }

        .order-total {
            font-weight: 700;
            color: var(--rose-gold-dark);
            font-size: 1.2rem;
            text-align: right;
        }

        .order-details {
            display: grid;
            grid-template-columns: auto 1fr;
            gap: 1rem;
            align-items: center;
            margin-bottom: 1rem;
        }

        .order-image {
            width: 60px;
            height: 60px;
            border-radius: 8px;
            object-fit: cover;
            border: 2px solid var(--border-light);
        }

        .order-image-placeholder {
            width: 60px;
            height: 60px;
            border-radius: 8px;
            background: linear-gradient(135deg, var(--rose-gold-light), var(--rose-gold));
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
        }

        .order-items {
            min-width: 0;
        }

        .order-primary-item {
            font-weight: 600;
            color: var(--dark-text);
            margin-bottom: 0.3rem;
            font-size: 0.95rem;
        }

        .order-items-count {
            color: var(--light-text);
            font-size: 0.8rem;
        }font-size: 0.95rem;
        }

        .order-items-count {
            color: var(--light-text);
            font-size: 0.8rem;
        }

        .order-actions {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.5rem;
        }

        .btn-action {
            padding: 8px 16px;
            border: 2px solid var(--rose-gold);
            border-radius: var(--border-radius);
            color: var(--rose-gold);
            background: transparent;
            font-size: 0.85rem;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            font-family: 'Montserrat', sans-serif;
        }

        .btn-action:hover {
            background: var(--rose-gold);
            color: white;
            transform: translateY(-1px);
        }

        .btn-primary-action {
            background: var(--rose-gold);
            color: white;
        }

        .btn-primary-action:hover {
            background: var(--rose-gold-dark);
        }

        /* =============================================================================
           MODAL STYLES
        ============================================================================= */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            z-index: 1000;
            justify-content: center;
            align-items: center;
            padding: 1rem;
            backdrop-filter: blur(5px);
        }

        .modal.active {
            display: flex;
            animation: modalFadeIn 0.3s ease;
        }

        @keyframes modalFadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .modal-content {
            background: var(--white-soft);
            border-radius: var(--border-radius);
            width: 100%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
            animation: modalSlideIn 0.3s ease;
        }

        @keyframes modalSlideIn {
            from {
                transform: translateY(50px) scale(0.95);
                opacity: 0;
            }
            to {
                transform: translateY(0) scale(1);
                opacity: 1;
            }
        }

        .modal-header {
            padding: 2rem 2rem 1rem;
            border-bottom: 1px solid var(--border-light);
            background: linear-gradient(135deg, var(--rose-gold), var(--rose-gold-dark));
            border-radius: var(--border-radius) var(--border-radius) 0 0;
            position: relative;
        }

        .modal-title {
            color: white;
            font-size: 1.25rem;
            font-weight: 700;
            margin: 0;
            padding-right: 3rem;
            text-shadow: 0 1px 2px rgba(0,0,0,0.2);
        }

        .modal-close {
            position: absolute;
            top: 15px;
            right: 20px;
            background: rgba(255, 255, 255, 0.2);
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            cursor: pointer;
            color: white;
            transition: var(--transition);
        }

        .modal-close:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.1);
        }

        .modal-body {
            padding: 2rem;
        }

        .detail-section {
            margin-bottom: 2rem;
            padding: 1.5rem;
            background: var(--cream);
            border-radius: var(--border-radius);
            border-left: 4px solid var(--rose-gold);
        }

        .detail-section:last-child {
            margin-bottom: 0;
        }

        .detail-section h4 {
            margin-bottom: 1rem;
            color: var(--dark-text);
            font-size: 1rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .detail-grid {
            display: grid;
            gap: 1rem;
        }

        @media (min-width: 768px) {
            .detail-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        .detail-item {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .detail-item label {
            font-weight: 600;
            color: var(--light-text);
            font-size: 0.8rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .detail-item span {
            color: var(--dark-text);
            font-weight: 500;
            font-size: 0.95rem;
        }

        .order-number-display {
            font-family: 'Courier New', monospace;
            background: var(--border-light);
            padding: 0.5rem 0.75rem;
            border-radius: 6px;
            font-weight: 600;
            color: var(--rose-gold-dark);
        }

        .status-badge {
            padding: 0.4rem 1rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            width: fit-content;
        }

        .total-amount {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--rose-gold-dark);
        }

        /* Articles dans la modal */
        .items-list {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .item-row {
            display: flex;
            gap: 1rem;
            padding: 1rem;
            background: white;
            border-radius: 8px;
            border: 1px solid var(--border-light);
            align-items: center;
        }

        .item-image {
            width: 60px;
            height: 60px;
            border-radius: 6px;
            object-fit: cover;
            border: 1px solid var(--border-light);
            flex-shrink: 0;
        }

        .item-image-placeholder {
            width: 60px;
            height: 60px;
            border-radius: 6px;
            background: linear-gradient(135deg, var(--rose-gold-light), var(--rose-gold));
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            flex-shrink: 0;
        }

        .item-details {
            flex: 1;
            min-width: 0;
        }

        .item-name {
            font-weight: 600;
            color: var(--dark-text);
            margin-bottom: 0.25rem;
            font-size: 0.95rem;
        }

        .item-specs {
            font-size: 0.85rem;
            color: var(--light-text);
            margin-bottom: 0.25rem;
        }

        .item-quantity {
            font-size: 0.8rem;
            color: var(--medium-text);
        }

        .item-price {
            font-weight: 700;
            color: var(--rose-gold-dark);
            text-align: right;
            font-size: 1rem;
        }

        /* Tracking section */
        .tracking-timeline {
            background: white;
            border-radius: 8px;
            padding: 1.5rem;
            border: 1px solid var(--border-light);
        }

        .timeline-item {
            display: flex;
            align-items: flex-start;
            gap: 1rem;
            padding: 1rem 0;
            border-bottom: 1px solid var(--border-light);
            position: relative;
        }

        .timeline-item:last-child {
            border-bottom: none;
        }

        .timeline-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1rem;
            flex-shrink: 0;
        }

        .timeline-icon.completed {
            background: var(--success);
        }

        .timeline-icon.current {
            background: var(--rose-gold);
        }

        .timeline-icon.pending {
            background: var(--light-text);
        }

        .timeline-content {
            flex: 1;
        }

        .timeline-title {
            font-weight: 600;
            color: var(--dark-text);
            margin-bottom: 0.25rem;
        }

        .timeline-date {
            font-size: 0.8rem;
            color: var(--light-text);
        }

        .tracking-number-display {
            background: rgba(59, 130, 246, 0.1);
            padding: 1rem;
            border-radius: 8px;
            border-left: 4px solid #3b82f6;
            margin-bottom: 1rem;
        }

        .tracking-number {
            font-family: 'Courier New', monospace;
            font-weight: 600;
            color: #2563eb;
            font-size: 1rem;
        }

        /* Order summary */
        .order-summary {
            background: white;
            border-radius: 8px;
            padding: 1.5rem;
            border: 1px solid var(--border-light);
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem 0;
            border-bottom: 1px solid var(--border-light);
        }

        .summary-row:last-child {
            border-bottom: none;
            font-weight: 700;
            font-size: 1.1rem;
            color: var(--rose-gold-dark);
            padding-top: 1rem;
            margin-top: 0.5rem;
            border-top: 2px solid var(--border-light);
        }

        .summary-label {
            color: var(--medium-text);
        }

        .summary-value {
            font-weight: 600;
            color: var(--dark-text);
        }

        .promo-value {
            color: var(--success);
        }

        /* Styles pour les éléments des modales */
        .order-items-summary {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .order-item-preview {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.75rem;
            background: white;
            border-radius: 8px;
            border-left: 3px solid var(--rose-gold);
            border: 1px solid var(--border-light);
        }

        .order-item-image {
            width: 50px;
            height: 50px;
            border-radius: 6px;
            object-fit: cover;
            border: 1px solid var(--border-light);
            flex-shrink: 0;
        }

        .order-item-image-placeholder {
            width: 50px;
            height: 50px;
            border-radius: 6px;
            background: linear-gradient(135deg, var(--rose-gold-light), var(--rose-gold));
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.2rem;
            flex-shrink: 0;
        }

        .order-item-info {
            flex: 1;
            min-width: 0;
        }

        .order-item-name {
            font-weight: 600;
            color: var(--dark-text);
            font-size: 0.9rem;
            margin-bottom: 0.25rem;
            line-height: 1.3;
        }

        .order-item-details {
            display: flex;
            gap: 1rem;
            font-size: 0.8rem;
            color: var(--medium-text);
        }

        .order-item-price {
            text-align: right;
            flex-shrink: 0;
        }

        .order-item-unit-price {
            font-weight: 600;
            color: var(--rose-gold-dark);
            font-size: 0.9rem;
            margin-bottom: 0.2rem;
        }

        .order-item-quantity {
            font-size: 0.75rem;
            color: var(--light-text);
        }

        .order-shipping-info {
            background: rgba(59, 130, 246, 0.05);
            border: 1px solid rgba(59, 130, 246, 0.2);
            border-radius: 6px;
            padding: 0.75rem;
        }

        .shipping-title {
            font-size: 0.8rem;
            font-weight: 600;
            color: var(--medium-text);
            margin-bottom: 0.25rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .shipping-amount {
            font-size: 0.85rem;
            color: var(--dark-text);
            font-weight: 500;
        }

        .shipping-free {
            color: var(--success);
            font-weight: 600;
        }
        .empty-orders {
            text-align: center;
            padding: 4rem 2rem;
            color: var(--light-text);
        }

        .empty-orders i {
            font-size: 4rem;
            color: var(--rose-gold-light);
            margin-bottom: 1.5rem;
        }

        .empty-orders h3 {
            font-size: 1.8rem;
            margin-bottom: 1rem;
            color: var(--dark-text);
        }

        .empty-orders p {
            font-size: 1.1rem;
            margin-bottom: 2rem;
            max-width: 500px;
            margin-left: auto;
            margin-right: auto;
        }

        .btn-shop {
            padding: 14px 28px;
            background: linear-gradient(135deg, var(--rose-gold) 0%, var(--rose-gold-dark) 100%);
            color: white;
            border: none;
            border-radius: var(--border-radius);
            font-weight: 600;
            font-size: 1rem;
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            font-family: 'Montserrat', sans-serif;
        }

        .btn-shop:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(212, 165, 116, 0.4);
        }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 0.5rem;
            margin-top: 2rem;
            flex-wrap: wrap;
        }

        .pagination-btn {
            padding: 10px 15px;
            border: 2px solid var(--border-medium);
            background: white;
            color: var(--dark-text);
            border-radius: var(--border-radius);
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
            font-family: 'Montserrat', sans-serif;
        }

        .pagination-btn:hover {
            border-color: var(--rose-gold);
            background: var(--rose-gold-light);
        }

        .pagination-btn.active {
            background: var(--rose-gold);
            color: white;
            border-color: var(--rose-gold);
        }

        .pagination-btn.disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .order-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }

            .order-details {
                grid-template-columns: 1fr;
                gap: 1rem;
                text-align: center;
            }

            .order-actions {
                justify-content: center;
            }

            .orders-title {
                font-size: 1.8rem;
            }

            .modal-content {
                width: 95%;
                max-height: 95vh;
            }

            .modal-header {
                padding: 1.5rem;
            }

            .modal-body {
                padding: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <%- include('partials/navbarre.ejs') %>

    <div class="main-content">
        <div class="container">
            <!-- Header -->
            <div class="orders-header">
                <h1 class="orders-title">
                    <i class="fas fa-box"></i>
                    Mes Commandes
                </h1>
                <p class="orders-subtitle">
                    Suivez l'état de vos commandes et consultez votre historique d'achats
                </p>
            </div>

            <!-- Stats Dashboard -->
            <div class="orders-stats">
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-shopping-cart"></i>
                    </div>
                    <div class="stat-value"><%= stats.totalOrders %></div>
                    <div class="stat-label">Total Commandes</div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="stat-value"><%= stats.waitingOrders + stats.preparingOrders %></div>
                    <div class="stat-label">En cours</div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="stat-value"><%= stats.deliveredOrders %></div>
                    <div class="stat-label">Livrées</div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-euro-sign"></i>
                    </div>
                    <div class="stat-value"><%= stats.totalSpent.toFixed(0) %>€</div>
                    <div class="stat-label">Total dépensé</div>
                </div>
            </div>

            <!-- Controls -->
            <div class="orders-controls">
                <form method="GET" action="/mescommandes" id="filterForm">
                    <div class="controls-grid">
                        <div class="filter-group">
                            <select name="statut" class="filter-select" id="statusFilter">
                                <option value="all" <%= currentStatut === 'all' ? 'selected' : '' %>>Tous les statuts</option>
                                <option value="waiting" <%= currentStatut === 'waiting' ? 'selected' : '' %>>En attente</option>
                                <option value="preparing" <%= currentStatut === 'preparing' ? 'selected' : '' %>>En préparation</option>
                                <option value="shipped" <%= currentStatut === 'shipped' ? 'selected' : '' %>>Expédiées</option>
                                <option value="delivered" <%= currentStatut === 'delivered' ? 'selected' : '' %>>Livrées</option>
                            </select>
                            <select name="period" class="filter-select" id="periodFilter">
                                <option value="all" <%= (typeof currentPeriod !== 'undefined' && currentPeriod === 'all') || typeof currentPeriod === 'undefined' ? 'selected' : '' %>>Toutes les périodes</option>
                                <option value="week" <%= typeof currentPeriod !== 'undefined' && currentPeriod === 'week' ? 'selected' : '' %>>Cette semaine</option>
                                <option value="month" <%= typeof currentPeriod !== 'undefined' && currentPeriod === 'month' ? 'selected' : '' %>>Ce mois</option>
    <script>
        // =============================================================================
        // SCRIPT COMPLET POUR LA PAGE /MESCOMMANDES - VERSION CORRIGÉE
        // =============================================================================

        console.log('🚀 Début du chargement du script mescommandes');

        // Variables globales
        let currentOrderData = null;

        // =============================================================================
        // INITIALISATION
        // =============================================================================
        document.addEventListener('DOMContentLoaded', function() {
            console.log('📋 DOM chargé, initialisation...');
            setupEventListeners();
            console.log('✅ Script mescommandes initialisé');
        });

        // =============================================================================
        // GESTION DES ÉVÉNEMENTS
        // =============================================================================
        function setupEventListeners() {
            console.log('🔧 Configuration des événements...');
            
            // Fermer les modales avec Escape
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    closeOrderModal();
                }
            });

            // Fermer les modales en cliquant sur l'arrière-plan
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('modal')) {
                    closeOrderModal();
                }
            });
            
            console.log('✅ Événements configurés');
        }

        // =============================================================================
        // GESTION DES MODALES
        // =============================================================================
        function showOrderModal() {
            console.log('📂 Ouverture de la modal...');
            const modal = document.getElementById('orderModal');
            if (modal) {
                modal.classList.add('active');
                document.body.style.overflow = 'hidden';
                console.log('✅ Modal ouverte');
                return true;
            } else {
                console.error('❌ Modal #orderModal introuvable');
                return false;
            }
        }

        function closeOrderModal() {
            console.log('📂 Fermeture de la modal...');
            const modal = document.getElementById('orderModal');
            if (modal) {
                modal.classList.remove('active');
                document.body.style.overflow = 'auto';
                console.log('✅ Modal fermée');
            }
        }

        // =============================================================================
        // FONCTION PRINCIPALE - showOrderDetails
        // =============================================================================
        async function showOrderDetails(orderId) {
            console.log(`🔍 showOrderDetails appelé avec orderId: "${orderId}"`);
            
            try {
                // Validation de l'ID
                if (!orderId || orderId === 'undefined' || orderId === '') {
                    console.error('❌ orderId invalide:', orderId);
                    showNotification('ID de commande invalide', 'error');
                    return;
                }

                // Nettoyer l'orderId
                orderId = String(orderId).trim();
                console.log(`🔍 ID nettoyé: "${orderId}"`);

                // Ouvrir la modal avec loading
                if (!showOrderModal()) {
                    console.error('❌ Impossible d\'ouvrir la modal');
                    return;
                }

                // Afficher le loading
                const modalContent = document.getElementById('orderModalContent');
                if (modalContent) {
                    modalContent.innerHTML = getLoadingHTML();
                } else {
                    console.error('❌ Element orderModalContent introuvable');
                    return;
                }

                // Essayer l'API d'abord
                console.log('🌐 Tentative d\'appel API...');
                try {
                    const response = await fetch(`/api/commandes/${orderId}/details`, {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        }
                    });

                    console.log(`📡 Réponse API: ${response.status}`);

                    if (response.ok) {
                        const data = await response.json();
                        console.log('📊 Données API reçues:', data);
                        
                        if (data && data.success) {
                            displayFullOrderDetails(data);
                            return;
                        }
                    }
                } catch (apiError) {
                    console.warn('⚠️ Erreur API:', apiError.message);
                }

                // Fallback: données locales
                console.log('💾 Utilisation des données locales...');
                displayLocalOrderDetails(orderId);

            } catch (error) {
                console.error('❌ Erreur dans showOrderDetails:', error);
                displayErrorInModal();
            }
        }

        // =============================================================================
        // AFFICHAGE DES DÉTAILS - Version API
        // =============================================================================
        function displayFullOrderDetails(data) {
            console.log('📊 Affichage des détails complets...');
            
            const { order, items = [], tracking = [], summary = {} } = data;
            
            if (!order) {
                console.error('❌ Pas de données order dans la réponse');
                displayErrorInModal();
                return;
            }

            // Titre de la modal
            const modalTitle = document.getElementById('modalTitle');
            if (modalTitle) {
                modalTitle.textContent = `Commande ${order.display_number || '#' + order.id}`;
            }

            // Contenu de la modal
            const modalContent = generateFullModalContent(order, items, summary, tracking);
            const modalBody = document.getElementById('orderModalContent');
            if (modalBody) {
                modalBody.innerHTML = modalContent;
            }
            
            console.log('✅ Détails complets affichés');
        }

        // =============================================================================
        // AFFICHAGE DES DÉTAILS - Version Locale (Fallback)
        // =============================================================================
        function displayLocalOrderDetails(orderId) {
            console.log(`💾 Affichage des données locales pour: ${orderId}`);
            
            try {
                // Chercher la carte de commande
                const orderCard = document.querySelector(`[data-order-id="${orderId}"]`);
                if (!orderCard) {
                    console.error(`❌ Carte de commande introuvable pour ID: ${orderId}`);
                    displayErrorInModal();
                    return;
                }

                console.log('📋 Carte de commande trouvée:', orderCard);

                // Extraire les données
                const orderData = extractOrderDataFromCard(orderCard);
                console.log('📊 Données extraites:', orderData);

                // Titre de la modal
                const modalTitle = document.getElementById('modalTitle');
                if (modalTitle) {
                    modalTitle.textContent = orderData.numero;
                }

                // Contenu de la modal
                const modalContent = generateLocalModalContent(orderData);
                const modalBody = document.getElementById('orderModalContent');
                if (modalBody) {
                    modalBody.innerHTML = modalContent;
                }
                
                console.log('✅ Données locales affichées');

            } catch (error) {
                console.error('❌ Erreur dans displayLocalOrderDetails:', error);
                displayErrorInModal();
            }
        }

        // =============================================================================
        // EXTRACTION DES DONNÉES DEPUIS LE DOM
        // =============================================================================
        function extractOrderDataFromCard(orderCard) {
            const data = {
                id: orderCard.dataset.orderId || '',
                numero: '',
                status: orderCard.dataset.status || '',
                date: '',
                total: '',
                item: '',
                count: '',
                tracking: orderCard.dataset.tracking || ''
            };

            // Extraire les données des éléments
            try {
                const numberEl = orderCard.querySelector('.order-number');
                data.numero = numberEl ? numberEl.textContent.trim() : '#' + data.id;

                const dateEl = orderCard.querySelector('.order-date');
                data.date = dateEl ? dateEl.textContent.trim() : '';

                const totalEl = orderCard.querySelector('.order-total');
                data.total = totalEl ? totalEl.textContent.trim() : '0€';

                const itemEl = orderCard.querySelector('.order-primary-item');
                data.item = itemEl ? itemEl.textContent.trim() : '';

                const countEl = orderCard.querySelector('.order-items-count');
                data.count = countEl ? countEl.textContent.trim() : '';

                const statusEl = orderCard.querySelector('.order-status');
                data.statusDisplay = statusEl ? statusEl.textContent.trim() : translateStatus(data.status);

            } catch (e) {
                console.warn('⚠️ Erreur lors de l\'extraction:', e);
            }

            return data;
        }

        // =============================================================================
        // GÉNÉRATION DU CONTENU MODAL - Version complète
        // =============================================================================
        function generateFullModalContent(order, items, summary, tracking) {
            return `
                <!-- Informations générales -->
                <div class="detail-section">
                    <h4><i class="fas fa-info-circle"></i> Informations de la commande</h4>
                    <div class="detail-grid">
                        <div class="detail-item">
                            <label>Numéro de commande</label>
                            <span class="order-number-display">${order.display_number || '#' + order.id}</span>
                        </div>
                        <div class="detail-item">
                            <label>Statut actuel</label>
                            <span class="status-badge ${order.status_class || 'status-' + order.status}">
                                ${order.status_display || translateStatus(order.status)}
                            </span>
                        </div>
                        <div class="detail-item">
                            <label>Date de commande</label>
                            <span>${formatDate(order.created_at || order.order_date)}</span>
                        </div>
                        <div class="detail-item">
                            <label>Méthode de paiement</label>
                            <span>${translatePaymentMethod(order.payment_method || 'card')}</span>
                        </div>
                    </div>
                </div>

                <!-- Articles commandés -->
                <div class="detail-section">
                    <h4><i class="fas fa-gem"></i> Articles commandés (${items.length})</h4>
                    <div class="items-list">
                        ${items.map(item => generateItemRow(item)).join('')}
                    </div>
                </div>

                <!-- Résumé financier -->
                <div class="detail-section">
                    <h4><i class="fas fa-calculator"></i> Résumé de la commande</h4>
                    <div class="order-summary">
                        ${generateOrderSummary(order, items, summary)}
                    </div>
                </div>

                <!-- Suivi -->
                ${generateTrackingSection(order, tracking)}

                <!-- Adresse de livraison -->
                ${order.shipping_address ? generateShippingAddress(order.shipping_address) : ''}
            `;
        }

        // =============================================================================
        // GÉNÉRATION DU CONTENU MODAL - Version locale
        // =============================================================================
        function generateLocalModalContent(orderData) {
            return `
                <div class="detail-section">
                    <h4><i class="fas fa-info-circle"></i> Informations de la commande</h4>
                    <div class="detail-grid">
                        <div class="detail-item">
                            <label>Numéro</label>
                            <span class="order-number-display">${orderData.numero}</span>
                        </div>
                        <div class="detail-item">
                            <label>Statut</label>
                            <span class="status-badge">${orderData.statusDisplay}</span>
                        </div>
                        <div class="detail-item">
                            <label>Date</label>
                            <span>${orderData.date}</span>
                        </div>
                        <div class="detail-item">
                            <label>Total</label>
                            <span class="total-amount">${orderData.total}</span>
                        </div>
                    </div>
                </div>

                ${orderData.item ? `
                <div class="detail-section">
                    <h4><i class="fas fa-gem"></i> Articles de la commande</h4>
                    <div class="order-items-summary">
                        <div class="order-item-preview">
                            <div class="order-item-image-placeholder">
                                <i class="fas fa-gem"></i>
                            </div>
                            <div class="order-item-info">
                                <div class="order-item-name">${orderData.item}</div>
                                <div class="order-item-details">
                                    <span>${orderData.count}</span>
                                </div>
                            </div>
                            <div class="order-item-price">
                                <div class="order-item-unit-price">Voir détails complets</div>
                                <div class="order-item-quantity">dans l'email</div>
                            </div>
                        </div>
                        
                        <div class="order-shipping-info">
                            <div class="shipping-title">
                                <i class="fas fa-truck"></i>
                                Frais de livraison
                            </div>
                            <div class="shipping-amount shipping-free">
                                Information non disponible
                            </div>
                        </div>
                    </div>
                </div>` : ''}

                <div class="detail-section">
                    <h4><i class="fas fa-clock"></i> Statut de la commande</h4>
                    ${generateStatusMessage(orderData.status, orderData.tracking)}
                </div>

                <div class="detail-section">
                    <h4><i class="fas fa-info-circle"></i> Information</h4>
                    <div style="background: rgba(59, 130, 246, 0.1); padding: 1.5rem; border-radius: 8px; border-left: 4px solid #3b82f6;">
                        <p style="margin: 0; color: var(--dark-text);">
                            <i class="fas fa-envelope" style="color: #3b82f6; margin-right: 0.5rem;"></i>
                            Les détails complets de votre commande vous ont été envoyés par email.
                        </p>
                    </div>
                </div>
            `;
        }

        // =============================================================================
        // FONCTIONS DE GÉNÉRATION DE CONTENU
        // =============================================================================
        function generateItemRow(item) {
            return `
                <div class="item-row">
                    ${item.jewel && item.jewel.image ? `
                        <img src="/uploads/jewels/${item.jewel.image}" 
                             alt="${item.jewel.name}" 
                             class="item-image"
                             onerror="this.onerror=null; this.style.display='none'; this.nextElementSibling.style.display='flex';">
                        <div class="item-image-placeholder" style="display: none;">
                            <i class="fas fa-gem"></i>
                        </div>
                    ` : `
                        <div class="item-image-placeholder">
                            <i class="fas fa-gem"></i>
                        </div>
                    `}
                    <div class="item-details">
                        <div class="item-name">${item.jewel ? item.jewel.name : 'Article'}</div>
                        ${item.jewel && item.jewel.category ? `<div class="item-specs">Catégorie: ${item.jewel.category.name || item.jewel.category}</div>` : ''}
                        ${item.jewel && item.jewel.material ? `<div class="item-specs">Matériau: ${item.jewel.material}</div>` : ''}
                        ${item.size ? `<div class="item-specs">Taille: ${item.size}</div>` : ''}
                        <div class="item-quantity">Quantité: ${item.quantity || 1}</div>
                    </div>
                    <div class="item-price">
                        <div style="font-weight: 700; color: var(--rose-gold-dark);">${parseFloat(item.unit_price || 0).toFixed(2)}€</div>
                        <div style="font-size: 0.8rem; color: var(--light-text);">l'unité</div>
                        <div style="font-size: 0.9rem; color: var(--dark-text); margin-top: 0.25rem; font-weight: 600;">
                            Total: ${(parseFloat(item.unit_price || 0) * parseInt(item.quantity || 1)).toFixed(2)}€
                        </div>
                    </div>
                </div>
            `;
        }

        function generateOrderSummary(order, items, summary) {
            const subtotal = summary.subtotal || order.subtotal || calculateSubtotal(items);
            const shipping = summary.shipping || order.shipping_price || 0;
            const discount = summary.discount || order.promo_discount_amount || 0;
            const tax = summary.tax || order.tax_amount || 0;
            const total = parseFloat(order.total || 0);

            return `
                <div class="summary-row">
                    <span class="summary-label">Sous-total articles</span>
                    <span class="summary-value">${subtotal.toFixed(2)}€</span>
                </div>
                ${order.promo_code ? `
                <div class="summary-row">
                    <span class="summary-label">Code promo (${order.promo_code})</span>
                    <span class="summary-value promo-value">-${discount.toFixed(2)}€</span>
                </div>` : ''}
                <div class="summary-row">
                    <span class="summary-label">Frais de livraison</span>
                    <span class="summary-value">${shipping.toFixed(2)}€</span>
                </div>
                ${tax > 0 ? `
                <div class="summary-row">
                    <span class="summary-label">TVA</span>
                    <span class="summary-value">${tax.toFixed(2)}€</span>
                </div>` : ''}
                <div class="summary-row">
                    <span class="summary-label">Total</span>
                    <span class="summary-value">${total.toFixed(2)}€</span>
                </div>
            `;
        }

        function generateTrackingSection(order, tracking) {
            if (order.tracking_number || tracking.length > 0) {
                return `
                    <div class="detail-section">
                        <h4><i class="fas fa-truck"></i> Suivi de livraison</h4>
                        ${order.tracking_number ? `
                            <div class="tracking-number-display">
                                <div style="margin-bottom: 0.5rem; font-weight: 600;">Numéro de suivi</div>
                                <div class="tracking-number">${order.tracking_number}</div>
                            </div>
                        ` : ''}
                        <div class="tracking-timeline">
                            ${generateTrackingTimeline(order, tracking)}
                        </div>
                    </div>
                `;
            } else {
                return `
                    <div class="detail-section">
                        <h4><i class="fas fa-clock"></i> Statut de la commande</h4>
                        ${generateStatusMessage(order.status, order.tracking_number)}
                    </div>
                `;
            }
        }

        function generateShippingAddress(address) {
            return `
                <div class="detail-section">
                    <h4><i class="fas fa-map-marker-alt"></i> Adresse de livraison</h4>
                    <div style="background: white; padding: 1.5rem; border-radius: 8px; border: 1px solid var(--border-light);">
                        <div style="white-space: pre-line; line-height: 1.6; color: var(--dark-text);">${address}</div>
                    </div>
                </div>
            `;
        }

        // =============================================================================
        // FONCTIONS UTILITAIRES
        // =============================================================================
        function generateStatusMessage(status, trackingNumber = '') {
            const statusConfig = {
                'waiting': {
                    icon: 'fas fa-clock',
                    color: '#f39c12',
                    bgColor: 'rgba(243, 156, 18, 0.1)',
                    title: 'Commande en attente',
                    message: 'Votre commande a été reçue et va être traitée sous peu'
                },
                'preparing': {
                    icon: 'fas fa-cog fa-spin',
                    color: '#3498db',
                    bgColor: 'rgba(52, 152, 219, 0.1)',
                    title: 'Commande en préparation',
                    message: 'Votre commande est actuellement en cours de préparation'
                },
                'shipped': {
                    icon: 'fas fa-truck',
                    color: '#27ae60',
                    bgColor: 'rgba(39, 174, 96, 0.1)',
                    title: 'Commande expédiée',
                    message: trackingNumber ? 
                        'Votre commande a été expédiée et est en cours de livraison' : 
                        'Votre commande a été expédiée'
                },
                'delivered': {
                    icon: 'fas fa-check-circle',
                    color: '#27ae60',
                    bgColor: 'rgba(39, 174, 96, 0.1)',
                    title: 'Commande livrée',
                    message: 'Votre commande a été livrée avec succès'
                },
                'cancelled': {
                    icon: 'fas fa-times-circle',
                    color: '#e74c3c',
                    bgColor: 'rgba(231, 76, 60, 0.1)',
                    title: 'Commande annulée',
                    message: 'Cette commande a été annulée'
                }
            };

            const config = statusConfig[status] || statusConfig['waiting'];

            return `
                <div style="text-align: center; padding: 2rem; background: ${config.bgColor}; border-radius: 8px; border-left: 4px solid ${config.color};">
                    <i class="${config.icon}" style="font-size: 2rem; color: ${config.color}; margin-bottom: 1rem;"></i>
                    <p style="margin: 0; color: var(--dark-text); font-weight: 600; margin-bottom: 0.5rem;">
                        ${config.title}
                    </p>
                    <p style="margin: 0; color: var(--medium-text); font-size: 0.9rem;">
                        ${config.message}
                    </p>
                </div>
            `;
        }

        function generateTrackingTimeline(order, trackingEvents = []) {
            const statusSteps = [
                { status: 'waiting', title: 'Commande reçue', icon: 'fas fa-check', date: order.created_at || order.order_date },
                { status: 'preparing', title: 'En préparation', icon: 'fas fa-cog', date: order.preparing_date },
                { status: 'shipped', title: 'Expédiée', icon: 'fas fa-truck', date: order.shipping_date || order.shipped_date },
                { status: 'delivered', title: 'Livrée', icon: 'fas fa-home', date: order.delivery_date || order.delivered_date }
            ];

            const currentStatus = order.status;
            const currentStatusIndex = statusSteps.findIndex(step => step.status === currentStatus);

            return statusSteps.map((step, index) => {
                let iconClass = 'pending';
                let dateDisplay = '';

                if (index < currentStatusIndex) {
                    iconClass = 'completed';
                } else if (index === currentStatusIndex) {
                    iconClass = 'current';
                }

                if (step.date) {
                    dateDisplay = formatDate(step.date);
                } else if (index === currentStatusIndex) {
                    dateDisplay = 'En cours...';
                } else if (index > currentStatusIndex) {
                    dateDisplay = 'En attente';
                }

                return `
                    <div class="timeline-item">
                        <div class="timeline-icon ${iconClass}">
                            <i class="${step.icon}"></i>
                        </div>
                        <div class="timeline-content">
                            <div class="timeline-title">${step.title}</div>
                            <div class="timeline-date">${dateDisplay}</div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function calculateSubtotal(items) {
            return items.reduce((sum, item) => {
                return sum + (parseFloat(item.unit_price || 0) * parseInt(item.quantity || 1));
            }, 0);
        }

        function translateStatus(status) {
            const translations = {
                'waiting': 'En attente',
                'preparing': 'En préparation', 
                'shipped': 'Expédiée',
                'delivered': 'Livrée',
                'cancelled': 'Annulée'
            };
            return translations[status] || status;
        }

        function translatePaymentMethod(method) {
            const translations = {
                'card': 'Carte bancaire',
                'paypal': 'PayPal',
                'bank_transfer': 'Virement bancaire',
                'cash': 'Espèces',
                'check': 'Chèque'
            };
            return translations[method] || method;
        }

        function formatDate(dateString) {
            if (!dateString) return 'Non spécifié';
            
            try {
                const date = new Date(dateString);
                if (isNaN(date.getTime())) return dateString;
                
                return date.toLocaleDateString('fr-FR', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            } catch (e) {
                return dateString;
            }
        }

        function getLoadingHTML() {
            return `
                <div style="text-align: center; padding: 3rem;">
                    <div style="width: 3rem; height: 3rem; border: 3px solid var(--border-light); border-top: 3px solid var(--rose-gold); border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 1rem;"></div>
                    <p style="color: var(--light-text); margin: 0;">Chargement des détails...</p>
                </div>
                <style>
                    @keyframes spin {
                        0% { transform: rotate(0deg); }
                        100% { transform: rotate(360deg); }
                    }
                </style>
            `;
        }

        function displayErrorInModal() {
            console.log('❌ Affichage de l\'erreur dans la modal');
            
            const modalTitle = document.getElementById('modalTitle');
            if (modalTitle) {
                modalTitle.textContent = 'Erreur';
            }
            
            const modalBody = document.getElementById('orderModalContent');
            if (modalBody) {
                modalBody.innerHTML = `
                    <div style="text-align: center; padding: 3rem;">
                        <i class="fas fa-exclamation-triangle" style="font-size: 3rem; color: var(--warning); margin-bottom: 1rem;"></i>
                        <h3 style="margin-bottom: 1rem; color: var(--dark-text);">Impossible de charger les détails</h3>
                        <p style="color: var(--light-text); margin-bottom: 2rem;">
                            Une erreur s'est produite lors du chargement des détails de votre commande.
                        </p>
                        <button onclick="closeOrderModal()" class="btn-action btn-primary-action">
                            <i class="fas fa-times"></i>
                            Fermer
                        </button>
                    </div>
                `;
            }
        }

        function showNotification(message, type = 'info') {
            console.log(`📢 Notification ${type}: ${message}`);
            
            const toast = document.createElement('div');
            toast.className = `toast-notification toast-${type}`;
            toast.innerHTML = `
                <div style="display: flex; align-items: center; gap: 0.5rem;">
                    <i class="fas fa-${getIconForType(type)}"></i>
                    <span>${message}</span>
                </div>
            `;

            Object.assign(toast.style, {
                position: 'fixed',
                top: '20px',
                right: '20px',
                padding: '12px 20px',
                borderRadius: '8px',
                color: 'white',
                fontWeight: '600',
                zIndex: '9999',
                boxShadow: '0 4px 12px rgba(0,0,0,0.2)',
                opacity: '0',
                transform: 'translateY(-50px)',
                transition: 'all 0.3s ease',
                backgroundColor: getColorForType(type),
                maxWidth: '300px',
                fontSize: '0.9rem',
                fontFamily: 'Montserrat, sans-serif'
            });

            document.body.appendChild(toast);

            setTimeout(() => {
                toast.style.opacity = '1';
                toast.style.transform = 'translateY(0)';
            }, 100);

            setTimeout(() => {
                toast.style.opacity = '0';
                toast.style.transform = 'translateY(-50px)';
                setTimeout(() => toast.remove(), 300);
            }, 4000);
        }

        function getIconForType(type) {
            const icons = {
                'success': 'check-circle',
                'error': 'exclamation-circle',
                'warning': 'exclamation-triangle',
                'info': 'info-circle'
            };
            return icons[type] || 'info-circle';
        }

        function getColorForType(type) {
            const colors = {
                'success': '#27ae60',
                'error': '#e74c3c',
                'warning': '#f39c12',
                'info': '#3498db'
            };
            return colors[type] || '#3498db';
        }

        // =============================================================================
        // EXPORT DES FONCTIONS GLOBALES
        // =============================================================================
        window.showOrderDetails = showOrderDetails;
        window.closeOrderModal = closeOrderModal;

        console.log('✅ Script mescommandes entièrement chargé et fonctionnel');
    </script>

</body>
</html>                                <option value="quarter" <%= typeof currentPeriod !== 'undefined' && currentPeriod === 'quarter' ? 'selected' : '' %>>Ce trimestre</option>
                                <option value="year" <%= typeof currentPeriod !== 'undefined' && currentPeriod === 'year' ? 'selected' : '' %>>Cette année</option>
                            </select>
                        </div>
                        <button type="submit" class="search-btn">
                            <i class="fas fa-filter"></i>
                            Filtrer
                        </button>
                    </div>
                </form>
            </div>

            <!-- Orders List -->
            <div class="orders-container">
                <% if (orders && orders.length > 0) { %>
                    <% orders.forEach(order => { %>
                        <div class="order-card" 
                             data-order-id="<%= order.id %>"
                             data-status="<%= order.status %>"
                             data-tracking="<%= order.tracking_number || '' %>"
                             data-total="<%= order.total %>"
                             data-date="<%= order.created_at %>">
                            <div class="order-header">
                                <div class="order-info">
                                    <div class="order-number">Commande <%= order.display_number %></div>
                                    <div class="order-date">
                                        <%= order.formatted_date %> à <%= order.formatted_time %>
                                    </div>
                                    <span class="order-status <%= order.status_class %>">
                                        <%= order.status_display %>
                                    </span>
                                </div>
                                <div class="order-total">
                                    <%= order.total.toFixed(2) %>€
                                </div>
                            </div>
                            
                            <div class="order-details">
                                <% if (order.first_item && order.first_item.jewel && order.first_item.jewel.image) { %>
                                    <img src="/uploads/jewels/<%= order.first_item.jewel.image %>" 
                                         alt="<%= order.first_item.jewel.name %>" 
                                         class="order-image"
                                         onerror="this.onerror=null; this.src='/images/no-image.jpg';">
                                <% } else { %>
                                    <div class="order-image-placeholder">
                                        <i class="fas fa-gem"></i>
                                    </div>
                                <% } %>
                                
                                <div class="order-items">
                                    <% if (order.first_item && order.first_item.jewel) { %>
                                        <div class="order-primary-item">
                                            <%= order.first_item.jewel.name %>
                                        </div>
                                    <% } %>
                                    <div class="order-items-count">
                                        <%= order.items_count %> article<%= order.items_count > 1 ? 's' : '' %>
                                        <% if (order.items_count > 1) { %>
                                            <% if (order.first_item && order.first_item.jewel) { %>
                                                et <%= order.items_count - 1 %> autre<%= order.items_count - 1 > 1 ? 's' : '' %>
                                            <% } %>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="order-actions">
                                <button class="btn-action btn-primary-action" type="button" onclick="showOrderDetails(<%= order.id %>)">
                                    <i class="fas fa-eye"></i>
                                    Détails
                                </button>
                                <!-- <button class="btn-action" type="button" onclick="showOrderDetails(<%= order.id %>)">
                                    <% if (order.tracking_number) { %>
                                        <i class="fas fa-truck"></i>
                                        Suivre
                                    <% } else { %>
                                        <i class="fas fa-clock"></i>
                                        Statut
                                    <% } %>
                                </button> -->
                            </div>
                        </div>
                    <% }); %>

                    <!-- Pagination -->
                    <% if (pagination.totalPages > 1) { %>
                        <div class="pagination">
                            <% if (pagination.hasPrev) { %>
                                <a href="?page=<%= pagination.currentPage - 1 %>&statut=<%= currentStatut %>&period=<%= typeof currentPeriod !== 'undefined' ? currentPeriod : 'all' %>" 
                                   class="pagination-btn">
                                    <i class="fas fa-chevron-left"></i>
                                    Précédent
                                </a>
                            <% } else { %>
                                <span class="pagination-btn disabled">
                                    <i class="fas fa-chevron-left"></i>
                                    Précédent
                                </span>
                            <% } %>

                            <% for (let i = 1; i <= pagination.totalPages; i++) { %>
                                <% if (i === pagination.currentPage) { %>
                                    <span class="pagination-btn active"><%= i %></span>
                                <% } else { %>
                                    <a href="?page=<%= i %>&statut=<%= currentStatut %>&period=<%= typeof currentPeriod !== 'undefined' ? currentPeriod : 'all' %>" 
                                       class="pagination-btn"><%= i %></a>
                                <% } %>
                            <% } %>

                            <% if (pagination.hasNext) { %>
                                <a href="?page=<%= pagination.currentPage + 1 %>&statut=<%= currentStatut %>&period=<%= typeof currentPeriod !== 'undefined' ? currentPeriod : 'all' %>" 
                                   class="pagination-btn">
                                    Suivant
                                    <i class="fas fa-chevron-right"></i>
                                </a>
                            <% } else { %>
                                <span class="pagination-btn disabled">
                                    Suivant
                                    <i class="fas fa-chevron-right"></i>
                                </span>
                            <% } %>
                        </div>
                    <% } %>

                <% } else { %>
                    <!-- Empty State -->
                    <div class="empty-orders">
                        <i class="fas fa-shopping-bag"></i>
                        <h3>Aucune commande trouvée</h3>
                        <p>
                            <% if (currentStatut !== 'all' || (typeof currentPeriod !== 'undefined' && currentPeriod !== 'all')) { %>
                                Aucune commande ne correspond à vos critères de recherche.
                                <br>
                                <a href="/mescommandes" style="color: var(--rose-gold); text-decoration: none; font-weight: 600;">Voir toutes les commandes</a>
                            <% } else { %>
                                Vous n'avez pas encore passé de commande. Découvrez notre magnifique collection de bijoux !
                            <% } %>
                        </p>
                        <% if (currentStatut === 'all' && (typeof currentPeriod === 'undefined' || currentPeriod === 'all')) { %>
                            <a href="/bijoux" class="btn-shop">
                                <i class="fas fa-gem"></i>
                                Découvrir nos bijoux
                            </a>
                        <% } %>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Modal for Order Details -->
    <div class="modal" id="orderModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="modalTitle">Détails de la commande</h2>
                <button class="modal-close" onclick="closeOrderModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body" id="orderModalContent">
                <!-- Content will be loaded here -->
            </div>
        </div>
    </div>

    <script>
        // =============================================================================
        // SCRIPT COMPLET POUR LA PAGE /MESCOMMANDES - Version corrigée
        // =============================================================================

        // Variables globales
        let currentOrderData = null;

        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Page mescommandes chargée');
            setupEventListeners();
            console.log('✅ Événements configurés');
        });

        // =============================================================================
        // GESTION DES ÉVÉNEMENTS
        // =============================================================================
        function setupEventListeners() {
            // Fermer les modales avec Escape
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    closeOrderModal();
                }
            });

            // Fermer les modales en cliquant sur l'arrière-plan
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('modal')) {
                    closeOrderModal();
                }
            });
        }

        // =============================================================================
        // FONCTION showOrderDetails (AMÉLIORÉE)
        // =============================================================================
        async function showOrderDetails(orderId) {
            try {
                console.log(`🔍 Affichage détails commande: ${orderId}`);
                
                if (!orderId || orderId === 'undefined') {
                    showNotification('ID de commande invalide', 'error');
                    return;
                }

                // Afficher le modal avec loading
                showOrderModal();
                document.getElementById('orderModalContent').innerHTML = getLoadingHTML();

                // Essayer de récupérer les détails depuis l'API
                try {
                    const response = await fetch(`/api/commandes/${orderId}/details`, {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        const data = await response.json();
                        if (data.success) {
                            displayFullOrderDetails(data);
                            return;
                        }
                    }
                } catch (apiError) {
                    console.warn('⚠️ API non disponible, utilisation des données locales');
                }

                // Fallback: utiliser les données du DOM
                displayLocalOrderDetailsComplete(orderId);

            } catch (error) {
                console.error('❌ Erreur:', error);
                displayErrorInModal();
            }
        }

        function displayFullOrderDetails(data) {
            const { order, items = [], tracking = [], summary = {} } = data;
            
            document.getElementById('modalTitle').textContent = `Commande ${order.display_number || '#' + order.id}`;
            
            const modalContent = `
                <!-- Informations générales -->
                <div class="detail-section">
                    <h4><i class="fas fa-info-circle"></i> Informations de la commande</h4>
                    <div class="detail-grid">
                        <div class="detail-item">
                            <label>Numéro de commande</label>
                            <span class="order-number-display">${order.display_number || '#' + order.id}</span>
                        </div>
                        <div class="detail-item">
                            <label>Statut actuel</label>
                            <span class="status-badge ${order.status_class || 'status-' + order.status}">
                                ${order.status_display || translateStatus(order.status)}
                            </span>
                        </div>
                        <div class="detail-item">
                            <label>Date de commande</label>
                            <span>${formatDate(order.created_at || order.order_date)}</span>
                        </div>
                        <div class="detail-item">
                            <label>Méthode de paiement</label>
                            <span>${translatePaymentMethod(order.payment_method || 'card')}</span>
                        </div>
                    </div>
                </div>

                <!-- Articles commandés avec détails -->
                <div class="detail-section">
                    <h4><i class="fas fa-gem"></i> Articles commandés (${items.length})</h4>
                    <div class="items-list">
                        ${items.map(item => `
                            <div class="item-row">
                                ${item.jewel && item.jewel.image ? `
                                    <img src="/uploads/jewels/${item.jewel.image}" 
                                         alt="${item.jewel.name}" 
                                         class="item-image"
                                         onerror="this.onerror=null; this.style.display='none'; this.nextElementSibling.style.display='flex';">
                                    <div class="item-image-placeholder" style="display: none;">
                                        <i class="fas fa-gem"></i>
                                    </div>
                                ` : `
                                    <div class="item-image-placeholder">
                                        <i class="fas fa-gem"></i>
                                    </div>
                                `}
                                <div class="item-details">
                                    <div class="item-name">${item.jewel ? item.jewel.name : 'Article'}</div>
                                    ${item.jewel && item.jewel.category ? `
                                        <div class="item-specs">Catégorie: ${item.jewel.category.name || item.jewel.category}</div>
                                    ` : ''}
                                    ${item.jewel && item.jewel.material ? `
                                        <div class="item-specs">Matériau: ${item.jewel.material}</div>
                                    ` : ''}
                                    ${item.size ? `
                                        <div class="item-specs">Taille: ${item.size}</div>
                                    ` : ''}
                                    <div class="item-quantity">Quantité: ${item.quantity || 1}</div>
                                </div>
                                <div class="item-price">
                                    <div style="font-weight: 700; color: var(--rose-gold-dark);">${parseFloat(item.unit_price || 0).toFixed(2)}€</div>
                                    <div style="font-size: 0.8rem; color: var(--light-text);">l'unité</div>
                                    <div style="font-size: 0.9rem; color: var(--dark-text); margin-top: 0.25rem; font-weight: 600;">
                                        Total: ${(parseFloat(item.unit_price || 0) * parseInt(item.quantity || 1)).toFixed(2)}€
                                    </div>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>

                <!-- Résumé de la commande -->
                <div class="detail-section">
                    <h4><i class="fas fa-calculator"></i> Résumé de la commande</h4>
                    <div class="order-summary">
                        <div class="summary-row">
                            <span class="summary-label">Sous-total articles</span>
                            <span class="summary-value">${(summary.subtotal || order.subtotal || calculateSubtotal(items)).toFixed(2)}€</span>
                        </div>
                        ${order.promo_code ? `
                        <div class="summary-row">
                            <span class="summary-label">Code promo (${order.promo_code})</span>
                            <span class="summary-value promo-value">-${(summary.discount || order.promo_discount_amount || 0).toFixed(2)}€</span>
                        </div>` : ''}
                        <div class="summary-row">
                            <span class="summary-label">Frais de livraison</span>
                            <span class="summary-value">${(summary.shipping || order.shipping_price || 0).toFixed(2)}€</span>
                        </div>
                        ${(summary.tax || order.tax_amount) ? `
                        <div class="summary-row">
                            <span class="summary-label">TVA</span>
                            <span class="summary-value">${(summary.tax || order.tax_amount || 0).toFixed(2)}€</span>
                        </div>` : ''}
                        <div class="summary-row">
                            <span class="summary-label">Total</span>
                            <span class="summary-value">${parseFloat(order.total || 0).toFixed(2)}€</span>
                        </div>
                    </div>
                </div>

                <!-- Suivi de livraison -->
                ${order.tracking_number || tracking.length > 0 ? `
                <div class="detail-section">
                    <h4><i class="fas fa-truck"></i> Suivi de livraison</h4>
                    ${order.tracking_number ? `
                        <div class="tracking-number-display">
                            <div style="margin-bottom: 0.5rem; font-weight: 600;">Numéro de suivi</div>
                            <div class="tracking-number">${order.tracking_number}</div>
                        </div>
                    ` : ''}
                    
                    <div class="tracking-timeline">
                        ${generateTrackingTimeline(order, tracking)}
                    </div>
                </div>` : `
                <div class="detail-section">
                    <h4><i class="fas fa-clock"></i> Statut de la commande</h4>
                    <div style="text-align: center; padding: 2rem; background: rgba(245, 158, 11, 0.1); border-radius: 8px; border-left: 4px solid #f59e0b;">
                        <i class="fas fa-hourglass-half" style="font-size: 2rem; color: #f59e0b; margin-bottom: 1rem;"></i>
                        <p style="margin: 0; color: var(--dark-text); font-weight: 600;">
                            Votre commande est en cours de traitement
                        </p>
                        <p style="margin: 0.5rem 0 0 0; color: var(--medium-text); font-size: 0.9rem;">
                            Vous recevrez un email avec le numéro de suivi dès l'expédition
                        </p>
                    </div>
                </div>`}

                <!-- Adresse de livraison -->
                ${order.shipping_address ? `
                <div class="detail-section">
                    <h4><i class="fas fa-map-marker-alt"></i> Adresse de livraison</h4>
                    <div style="background: white; padding: 1.5rem; border-radius: 8px; border: 1px solid var(--border-light);">
                        <div style="white-space: pre-line; line-height: 1.6; color: var(--dark-text);">${order.shipping_address}</div>
                    </div>
                </div>` : ''}
            `;

            document.getElementById('orderModalContent').innerHTML = modalContent;
        }

        function generateTrackingTimeline(order, trackingEvents = []) {
            // Statuts prédéfinis avec leurs informations
            const statusSteps = [
                {
                    status: 'waiting',
                    title: 'Commande reçue',
                    icon: 'fas fa-check',
                    date: order.created_at || order.order_date
                },
                {
                    status: 'preparing',
                    title: 'En préparation',
                    icon: 'fas fa-cog',
                    date: order.preparing_date
                },
                {
                    status: 'shipped',
                    title: 'Expédiée',
                    icon: 'fas fa-truck',
                    date: order.shipping_date || order.shipped_date
                },
                {
                    status: 'delivered',
                    title: 'Livrée',
                    icon: 'fas fa-home',
                    date: order.delivery_date || order.delivered_date
                }
            ];

            const currentStatus = order.status;
            const currentStatusIndex = statusSteps.findIndex(step => step.status === currentStatus);

            let timelineHTML = '';

            statusSteps.forEach((step, index) => {
                let iconClass = 'pending';
                let dateDisplay = '';

                if (index < currentStatusIndex) {
                    iconClass = 'completed';
                } else if (index === currentStatusIndex) {
                    iconClass = 'current';
                }

                // Afficher la date si disponible
                if (step.date) {
                    dateDisplay = formatDate(step.date);
                } else if (index === currentStatusIndex) {
                    dateDisplay = 'En cours...';
                } else if (index > currentStatusIndex) {
                    // Dates estimées pour les étapes futures
                    if (step.status === 'shipped' && order.estimated_shipping_date) {
                        dateDisplay = `Prévu le ${formatDate(order.estimated_shipping_date)}`;
                    } else if (step.status === 'delivered' && order.estimated_delivery_date) {
                        dateDisplay = `Prévu le ${formatDate(order.estimated_delivery_date)}`;
                    } else {
                        dateDisplay = 'En attente';
                    }
                }

                timelineHTML += `
                    <div class="timeline-item">
                        <div class="timeline-icon ${iconClass}">
                            <i class="${step.icon}"></i>
                        </div>
                        <div class="timeline-content">
                            <div class="timeline-title">${step.title}</div>
                            <div class="timeline-date">${dateDisplay}</div>
                        </div>
                    </div>
                `;
            });

            return timelineHTML;
        }

        function displayLocalOrderDetailsComplete(orderId) {
            // Récupérer les données depuis le DOM
            const orderCard = document.querySelector(`[data-order-id="${orderId}"]`);
            
            if (!orderCard) {
                displayErrorInModal();
                return;
            }

            const orderNumber = orderCard.querySelector('.order-number')?.textContent || '#' + orderId;
            const orderStatus = orderCard.querySelector('.order-status')?.textContent || 'Inconnu';
            const orderDate = orderCard.querySelector('.order-date')?.textContent || '';
            const orderTotal = orderCard.querySelector('.order-total')?.textContent || '0€';
            const orderItem = orderCard.querySelector('.order-primary-item')?.textContent || '';
            const orderCount = orderCard.querySelector('.order-items-count')?.textContent || '';
            const trackingNumber = orderCard.dataset.tracking || '';
            const orderStatusData = orderCard.dataset.status || '';

            document.getElementById('modalTitle').textContent = orderNumber;
            
            const modalContent = `
                <div class="detail-section">
                    <h4><i class="fas fa-info-circle"></i> Informations de la commande</h4>
                    <div class="detail-grid">
                        <div class="detail-item">
                            <label>Numéro</label>
                            <span class="order-number-display">${orderNumber}</span>
                        </div>
                        <div class="detail-item">
                            <label>Statut</label>
                            <span class="status-badge">${orderStatus}</span>
                        </div>
                        <div class="detail-item">
                            <label>Date</label>
                            <span>${orderDate}</span>
                        </div>
                        <div class="detail-item">
                            <label>Total</label>
                            <span class="total-amount">${orderTotal}</span>
                        </div>
                    </div>
                </div>

                ${orderItem ? `
                <div class="detail-section">
                    <h4><i class="fas fa-gem"></i> Articles de la commande</h4>
                    <div class="order-items-summary">
                        <div class="order-item-preview">
                            <div class="order-item-image-placeholder">
                                <i class="fas fa-gem"></i>
                            </div>
                            <div class="order-item-info">
                                <div class="order-item-name">${orderItem}</div>
                                <div class="order-item-details">
                                    <span>${orderCount}</span>
                                </div>
                            </div>
                            <div class="order-item-price">
                                <div class="order-item-unit-price">Voir détails complets</div>
                                <div class="order-item-quantity">dans l'email</div>
                            </div>
                        </div>
                        
                        <!-- Frais de livraison -->
                        <div class="order-shipping-info">
                            <div class="shipping-title">
                                <i class="fas fa-truck"></i>
                                Frais de livraison
                            </div>
                            <div class="shipping-amount shipping-free">
                                Information non disponible
                            </div>
                        </div>
                    </div>
                </div>` : ''}

                ${trackingNumber ? `
                <div class="detail-section">
                    <h4><i class="fas fa-truck"></i> Suivi de livraison</h4>
                    <div class="tracking-number-display">
                        <div style="margin-bottom: 0.5rem; font-weight: 600;">Numéro de suivi</div>
                        <div class="tracking-number">${trackingNumber}</div>
                    </div>
                    <div class="tracking-timeline">
                        ${generateSimpleTimeline(orderStatusData)}
                    </div>
                </div>` : `
                <div class="detail-section">
                    <h4><i class="fas fa-clock"></i> Statut</h4>
                ${generateStatusMessage(orderStatusData, trackingNumber)}

                <div class="detail-section">
                    <h4><i class="fas fa-info-circle"></i> Information</h4>
                    <div style="background: rgba(59, 130, 246, 0.1); padding: 1.5rem; border-radius: 8px; border-left: 4px solid #3b82f6;">
                        <p style="margin: 0; color: var(--dark-text);">
                            <i class="fas fa-envelope" style="color: #3b82f6; margin-right: 0.5rem;"></i>
                            Les détails complets de votre commande vous ont été envoyés par email.
                        </p>
                    </div>
                </div>
            `;

            document.getElementById('orderModalContent').innerHTML = modalContent;
        }

        function generateSimpleTimeline(status) {
            const steps = [
                { status: 'waiting', title: 'Commande reçue', icon: 'fas fa-check' },
                { status: 'preparing', title: 'En préparation', icon: 'fas fa-cog' },
                { status: 'shipped', title: 'Expédiée', icon: 'fas fa-truck' },
                { status: 'delivered', title: 'Livrée', icon: 'fas fa-home' }
            ];

            const currentIndex = steps.findIndex(step => step.status === status);
            
            return steps.map((step, index) => {
                let iconClass = 'pending';
                if (index < currentIndex) iconClass = 'completed';
                else if (index === currentIndex) iconClass = 'current';

                return `
                    <div class="timeline-item">
                        <div class="timeline-icon ${iconClass}">
                            <i class="${step.icon}"></i>
                        </div>
                        <div class="timeline-content">
                            <div class="timeline-title">${step.title}</div>
                            <div class="timeline-date">${index <= currentIndex ? 'Terminé' : 'En attente'}</div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function generateStatusMessage(status, trackingNumber = '') {
            const statusConfig = {
                'waiting': {
                    icon: 'fas fa-clock',
                    color: '#f59e0b',
                    bgColor: 'rgba(245, 158, 11, 0.1)',
                    title: 'Commande en attente',
                    message: 'Votre commande a été reçue et va être traitée sous peu'
                },
                'preparing': {
                    icon: 'fas fa-cog fa-spin',
                    color: '#3498db',
                    bgColor: 'rgba(52, 152, 219, 0.1)',
                    title: 'Commande en préparation',
                    message: 'Votre commande est actuellement en cours de préparation'
                },
                'shipped': {
                    icon: 'fas fa-truck',
                    color: '#27ae60',
                    bgColor: 'rgba(39, 174, 96, 0.1)',
                    title: 'Commande expédiée',
                    message: trackingNumber ? 
                        'Votre commande a été expédiée et est en cours de livraison' : 
                        'Votre commande a été expédiée'
                },
                'delivered': {
                    icon: 'fas fa-check-circle',
                    color: '#27ae60',
                    bgColor: 'rgba(39, 174, 96, 0.1)',
                    title: 'Commande livrée',
                    message: 'Votre commande a été livrée avec succès'
                },
                'cancelled': {
                    icon: 'fas fa-times-circle',
                    color: '#e74c3c',
                    bgColor: 'rgba(231, 76, 60, 0.1)',
                    title: 'Commande annulée',
                    message: 'Cette commande a été annulée'
                }
            };

            const config = statusConfig[status] || statusConfig['waiting'];

            return `
                <div style="text-align: center; padding: 2rem; background: ${config.bgColor}; border-radius: 8px; border-left: 4px solid ${config.color};">
                    <i class="${config.icon}" style="font-size: 2rem; color: ${config.color}; margin-bottom: 1rem;"></i>
                    <p style="margin: 0; color: var(--dark-text); font-weight: 600; margin-bottom: 0.5rem;">
                        ${config.title}
                    </p>
                    <p style="margin: 0; color: var(--medium-text); font-size: 0.9rem;">
                        ${config.message}
                    </p>
                </div>
            `;
        }

        // =============================================================================
        // FONCTIONS UTILITAIRES
        // =============================================================================
        function calculateSubtotal(items) {
            return items.reduce((sum, item) => {
                return sum + (parseFloat(item.unit_price || 0) * parseInt(item.quantity || 1));
            }, 0);
        }

        function getLoadingHTML() {
            return `
                <div style="text-align: center; padding: 3rem;">
                    <div style="width: 3rem; height: 3rem; border: 3px solid var(--border-light); border-top: 3px solid var(--rose-gold); border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 1rem;"></div>
                    <p style="color: var(--light-text); margin: 0;">Chargement des détails...</p>
                </div>
                <style>
                    @keyframes spin {
                        0% { transform: rotate(0deg); }
                        100% { transform: rotate(360deg); }
                    }
                </style>
            `;
        }

        function displayErrorInModal() {
            document.getElementById('modalTitle').textContent = 'Erreur';
            document.getElementById('orderModalContent').innerHTML = `
                <div style="text-align: center; padding: 3rem;">
                    <i class="fas fa-exclamation-triangle" style="font-size: 3rem; color: var(--warning); margin-bottom: 1rem;"></i>
                    <h3 style="margin-bottom: 1rem; color: var(--dark-text);">Impossible de charger les détails</h3>
                    <p style="color: var(--light-text); margin-bottom: 2rem;">
                        Une erreur s'est produite lors du chargement des détails de votre commande.
                    </p>
                    <button onclick="closeOrderModal()" class="btn-action btn-primary-action">
                        <i class="fas fa-times"></i>
                        Fermer
                    </button>
                </div>
            `;
        }

        function translateStatus(status) {
            const translations = {
                'waiting': 'En attente',
                'preparing': 'En préparation',
                'shipped': 'Expédiée',
                'delivered': 'Livrée',
                'cancelled': 'Annulée'
            };
            return translations[status] || status;
        }

        function translatePaymentMethod(method) {
            const translations = {
                'card': 'Carte bancaire',
                'paypal': 'PayPal',
                'bank_transfer': 'Virement bancaire',
                'cash': 'Espèces',
                'check': 'Chèque'
            };
            return translations[method] || method;
        }

        function formatDate(dateString) {
            if (!dateString) return 'Non spécifié';
            
            try {
                const date = new Date(dateString);
                if (isNaN(date.getTime())) return dateString;
                
                return date.toLocaleDateString('fr-FR', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            } catch (e) {
                return dateString;
            }
        }

        // =============================================================================
        // GESTION DES MODALES
        // =============================================================================
        function showOrderModal() {
            const modal = document.getElementById('orderModal');
            if (modal) {
                modal.classList.add('active');
                document.body.style.overflow = 'hidden';
            }
        }

        function closeOrderModal() {
            const modal = document.getElementById('orderModal');
            if (modal) {
                modal.classList.remove('active');
                document.body.style.overflow = 'auto';
            }
        }

        function showNotification(message, type = 'info') {
            // Créer une notification toast simple
            const toast = document.createElement('div');
            toast.className = `toast-notification toast-${type}`;
            toast.innerHTML = `
                <div style="display: flex; align-items: center; gap: 0.5rem;">
                    <i class="fas fa-${getIconForType(type)}"></i>
                    <span>${message}</span>
                </div>
            `;

            // Styles en ligne
            Object.assign(toast.style, {
                position: 'fixed',
                top: '20px',
                right: '20px',
                padding: '12px 20px',
                borderRadius: '8px',
                color: 'white',
                fontWeight: '600',
                zIndex: '9999',
                boxShadow: '0 4px 12px rgba(0,0,0,0.2)',
                opacity: '0',
                transform: 'translateY(-50px)',
                transition: 'all 0.3s ease',
                backgroundColor: getColorForType(type),
                maxWidth: '300px',
                fontSize: '0.9rem',
                fontFamily: 'Montserrat, sans-serif'
            });

            document.body.appendChild(toast);

            // Animation d'entrée
            setTimeout(() => {
                toast.style.opacity = '1';
                toast.style.transform = 'translateY(0)';
            }, 100);

            // Auto-suppression
            setTimeout(() => {
                toast.style.opacity = '0';
                toast.style.transform = 'translateY(-50px)';
                setTimeout(() => toast.remove(), 300);
            }, 4000);
        }

        function getIconForType(type) {
            const icons = {
                'success': 'check-circle',
                'error': 'exclamation-circle',
                'warning': 'exclamation-triangle',
                'info': 'info-circle'
            };
            return icons[type] || 'info-circle';
        }

        function getColorForType(type) {
            const colors = {
                'success': '#27ae60',
                'error': '#e74c3c',
                'warning': '#f39c12',
                'info': '#3498db'
            };
            return colors[type] || '#3498db';
        }

        // =============================================================================
        // EXPORT DES FONCTIONS GLOBALES
        // =============================================================================
        window.showOrderDetails = showOrderDetails;
        window.closeOrderModal = closeOrderModal;

        console.log('✅ Script mescommandes chargé - Fonctions disponibles');
    </script>
</body>
</html>