<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Modifier <%= jewel.name %> | Administration</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  
  <style>
    .image-preview {
      position: relative;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      margin-bottom: 15px;
    }
    
    .image-preview img {
      width: 100%;
      height: 200px;
      object-fit: cover;
    }
    
    .image-actions {
      position: absolute;
      top: 5px;
      right: 5px;
      display: flex;
      gap: 5px;
    }
    
    .image-actions .btn {
      padding: 4px 8px;
      font-size: 12px;
    }
    
    .main-image-badge {
      position: absolute;
      top: 5px;
      left: 5px;
      background: #28a745;
      color: white;
      padding: 2px 6px;
      border-radius: 4px;
      font-size: 11px;
      font-weight: bold;
    }
    
    .marked-for-deletion {
      opacity: 0.5;
      border: 2px solid #dc3545 !important;
    }
    
    .marked-for-deletion::after {
      content: 'SUPPRIMÉ';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(220, 53, 69, 0.9);
      color: white;
      padding: 5px 10px;
      border-radius: 4px;
      font-weight: bold;
      font-size: 14px;
      z-index: 10;
    }
    
    .discount-preview {
      background: linear-gradient(135deg, #28a745, #20c997);
      color: white;
      padding: 15px;
      border-radius: 8px;
      margin: 15px 0;
    }
    
    .price-comparison {
      display: flex;
      align-items: center;
      gap: 15px;
      margin-top: 10px;
    }
    
    .price-original {
      text-decoration: line-through;
      color: #6c757d;
      font-size: 18px;
    }
    
    .price-final {
      color: #28a745;
      font-size: 22px;
      font-weight: bold;
    }
    
    .savings {
      background: #dc3545;
      color: white;
      padding: 4px 8px;
      border-radius: 15px;
      font-size: 12px;
      font-weight: bold;
    }

    .image-container {
      border: 2px dashed #ddd;
      padding: 10px;
      border-radius: 8px;
      min-height: 120px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .no-images {
      color: #6c757d;
      font-style: italic;
      text-align: center;
    }

    .add-new-btn {
      background: linear-gradient(45deg, #007bff, #0056b3);
      border: none;
      color: white;
      padding: 5px 10px;
      border-radius: 5px;
      font-size: 12px;
      margin-left: 10px;
    }

    .add-new-btn:hover {
      background: linear-gradient(45deg, #0056b3, #004085);
      color: white;
    }

    /* Fix pour la navbar mobile */
    .navbar-toggler {
      border: none;
      padding: 4px 8px;
    }
    
    .navbar-toggler:focus {
      box-shadow: none;
    }
    
    @media (max-width: 991.98px) {
      .navbar-collapse {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #ddd;
        border-radius: 0 0 8px 8px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        z-index: 1000;
      }
      
      .navbar-nav {
        padding: 10px;
      }
    }

    .spinner-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }

    .spinner-content {
      background: white;
      padding: 30px;
      border-radius: 10px;
      text-align: center;
    }
  </style>
</head>

<body class="bg-light">
  <%- include('partials/navbarre.ejs') %>

  <!-- Overlay de chargement -->
  <div class="spinner-overlay" id="loadingOverlay">
    <div class="spinner-content">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Chargement...</span>
      </div>
      <div class="mt-2">Mise à jour en cours...</div>
    </div>
  </div>

  <div class="container mt-4">
    <div class="row">
      <div class="col-md-12">
        
        <!-- En-tête -->
        <div class="d-flex justify-content-between align-items-center mb-4">
          <h2><i class="fas fa-edit text-primary"></i> Modifier le bijou : <%= jewel.name %></h2>
          <div>
            <a href="/gestionnaire-bijoux" class="btn btn-secondary">
              <i class="fas fa-arrow-left"></i> Retour
            </a>
            <a href="/bijoux/<%= jewel.slug %>" class="btn btn-info" target="_blank">
              <i class="fas fa-eye"></i> Voir
            </a>
          </div>
        </div>

        <!-- Messages -->
        <% if (typeof error !== 'undefined' && error) { %>
          <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle"></i> <%= error %>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
          </div>
        <% } %>
        
        <% if (typeof success !== 'undefined' && success) { %>
          <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle"></i> <%= success %>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
          </div>
        <% } %>

        <!-- Formulaire principal - AVEC DEBUG -->
        <form id="jewelForm" action="/admin/bijoux/<%= jewel.slug %>/update" method="POST" enctype="multipart/form-data">
          
          <!-- Champ de test caché pour vérifier que le formulaire envoie bien les données -->
          <input type="hidden" name="test_field" value="formulaire_fonctionne">
          <input type="hidden" name="timestamp" value="<%= Date.now() %>">

          <!-- Informations générales -->
          <div class="card mb-4">
            <div class="card-header bg-primary text-white">
              <h5 class="mb-0"><i class="fas fa-info-circle"></i> Informations générales</h5>
            </div>
            <div class="card-body">
              <div class="row">
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="name" class="form-label">Nom du bijou <span class="text-danger">*</span></label>
                    <input type="text" class="form-control" id="name" name="name" 
                           value="<%= jewel.name %>" required>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="category_id" class="form-label">Catégorie <span class="text-danger">*</span></label>
                    <div class="d-flex">
                      <select class="form-select" id="category_id" name="category_id" required>
                        <option value="">-- Sélectionner --</option>
                        <% categories.forEach(category => { %>
                          <option value="<%= category.id %>" <%= jewel.category_id == category.id ? 'selected' : '' %>>
                            <%= category.name %>
                          </option>
                        <% }); %>
                      </select>
                      <button type="button" class="add-new-btn" onclick="addNewCategory()">
                        <i class="fas fa-plus"></i> Nouveau
                      </button>
                    </div>
                  </div>
                </div>
              </div>
              <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="3"><%= jewel.description || '' %></textarea>
              </div>
            </div>
          </div>

          <!-- Caractéristiques -->
          <div class="card mb-4">
            <div class="card-header bg-success text-white">
              <h5 class="mb-0"><i class="fas fa-gem"></i> Caractéristiques</h5>
            </div>
            <div class="card-body">
              <div class="row">
                <div class="col-md-3">
                  <div class="mb-3">
                    <label for="poids" class="form-label">Poids (g)</label>
                    <input type="number" class="form-control" id="poids" name="poids" 
                           step="0.01" value="<%= jewel.poids || '' %>" placeholder="Ex: 2.5">
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="mb-3">
                    <label for="matiere" class="form-label">Matière <span class="text-danger">*</span></label>
                    <div class="d-flex">
                      <select class="form-select" id="matiere" name="matiere" required>
                        <option value="">-- Sélectionner --</option>
                        <% materials.forEach(material => { %>
                          <option value="<%= material.name %>" <%= jewel.matiere === material.name ? 'selected' : '' %>>
                            <%= material.name %>
                          </option>
                        <% }); %>
                      </select>
                      <button type="button" class="add-new-btn" onclick="addNewMaterial()">
                        <i class="fas fa-plus"></i> Nouveau
                      </button>
                    </div>
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="mb-3">
                    <label for="type_id" class="form-label">Type</label>
                    <div class="d-flex">
                      <select class="form-select" id="type_id" name="type_id">
                        <option value="">-- Sélectionner --</option>
                        <% types.forEach(type => { %>
                          <option value="<%= type.id %>" <%= jewel.type_id == type.id ? 'selected' : '' %>>
                            <%= type.name %>
                          </option>
                        <% }); %>
                      </select>
                      <button type="button" class="add-new-btn" onclick="addNewType()">
                        <i class="fas fa-plus"></i> Nouveau
                      </button>
                    </div>
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="mb-3">
                    <label for="carat" class="form-label">Carat</label>
                    <select class="form-select" id="carat" name="carat">
                      <option value="">-- Sélectionner --</option>
                      <option value="9" <%= jewel.carat == 9 ? 'selected' : '' %>>9 carats</option>
                      <option value="14" <%= jewel.carat == 14 ? 'selected' : '' %>>14 carats</option>
                      <option value="18" <%= jewel.carat == 18 ? 'selected' : '' %>>18 carats</option>
                      <option value="22" <%= jewel.carat == 22 ? 'selected' : '' %>>22 carats</option>
                      <option value="24" <%= jewel.carat == 24 ? 'selected' : '' %>>24 carats</option>
                    </select>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Tarification et Réductions -->
          <div class="card mb-4">
            <div class="card-header bg-warning text-dark">
              <h5 class="mb-0"><i class="fas fa-euro-sign"></i> Tarification et Réductions</h5>
            </div>
            <div class="card-body">
              <!-- Prix de base -->
              <div class="row mb-4">
                <div class="col-md-4">
                  <div class="mb-3">
                    <label for="price_ttc" class="form-label">Prix TTC (€) <span class="text-danger">*</span></label>
                    <input type="number" class="form-control" id="price_ttc" name="price_ttc" 
                           step="0.01" value="<%= jewel.price_ttc || '' %>" required placeholder="Ex: 299.99">
                  </div>
                </div>
                <div class="col-md-4">
                  <div class="mb-3">
                    <label for="tva" class="form-label">TVA (%) <span class="text-danger">*</span></label>
                    <input type="number" class="form-control" id="tva" name="tva" 
                           step="0.1" value="<%= jewel.tva || 20 %>" required>
                  </div>
                </div>
                <div class="col-md-4">
                  <div class="mb-3">
                    <label for="price_ht" class="form-label">Prix HT (€)</label>
                    <input type="number" class="form-control" id="price_ht" name="price_ht" 
                           step="0.01" value="<%= jewel.price_ht || '' %>" readonly>
                    <div class="form-text">Calculé automatiquement</div>
                  </div>
                </div>
              </div>

              <hr>

              <!-- Section Réductions -->
              <h6 class="mb-3"><i class="fas fa-percent text-danger"></i> Gestion des réductions</h6>
              
              <div class="row">
                <div class="col-md-3">
                  <div class="mb-3">
                    <label for="discount_percentage" class="form-label">Réduction (%)</label>
                    <input type="number" class="form-control" id="discount_percentage" name="discount_percentage" 
                           min="0" max="90" step="1" value="<%= jewel.discount_percentage || 0 %>"
                           placeholder="Ex: 20 pour -20%">
                    <div class="form-text">0 = aucune réduction</div>
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="mb-3">
                    <label for="discount_start_date" class="form-label">Date de début</label>
                    <input type="datetime-local" class="form-control" id="discount_start_date" name="discount_start_date"
                           value="<%= jewel.discount_start_date ? new Date(jewel.discount_start_date).toISOString().slice(0,16) : '' %>">
                    <div class="form-text">Optionnel</div>
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="mb-3">
                    <label for="discount_end_date" class="form-label">Date de fin</label>
                    <input type="datetime-local" class="form-control" id="discount_end_date" name="discount_end_date"
                           value="<%= jewel.discount_end_date ? new Date(jewel.discount_end_date).toISOString().slice(0,16) : '' %>">
                    <div class="form-text">Optionnel</div>
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="mb-3">
                    <label class="form-label">Prix final (€)</label>
                    <div class="form-control-plaintext bg-light border rounded p-2" id="final_price_display">
                      <strong id="final_price_value">-</strong>
                    </div>
                    <div class="form-text">Avec réduction appliquée</div>
                  </div>
                </div>
              </div>

              <!-- Aperçu de la réduction -->
              <div id="discount_preview" class="discount-preview d-none">
                <div class="d-flex align-items-center gap-3">
                  <i class="fas fa-percentage fa-2x"></i>
                  <div>
                    <div id="discount_preview_text" class="fw-bold"></div>
                    <div class="price-comparison">
                      <span class="price-original" id="original_price_display">-</span>
                      <i class="fas fa-arrow-right"></i>
                      <span class="price-final" id="discounted_price_display">-</span>
                      <span class="savings" id="savings_display">-</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Tailles et Stock -->
          <div class="card mb-4">
            <div class="card-header bg-info text-white">
              <h5 class="mb-0"><i class="fas fa-boxes"></i> Tailles et Stock</h5>
            </div>
            <div class="card-body">
              <div id="sizesContainer">
                <% 
                let tailles = [];
                if (jewel.tailles) {
                  if (Array.isArray(jewel.tailles)) {
                    tailles = jewel.tailles;
                  } else if (typeof jewel.tailles === 'string') {
                    try {
                      tailles = JSON.parse(jewel.tailles);
                    } catch (e) {
                      tailles = [];
                    }
                  }
                }
                
                if (tailles.length === 0) {
                  tailles = [{ taille: '', stock: jewel.stock || 0 }];
                }
                %>
                
                <% tailles.forEach((taille, index) => { %>
                  <div class="row mb-2 size-entry" data-index="<%= index %>">
                    <div class="col-md-5">
                      <input type="text" class="form-control" name="sizes[<%= index %>][taille]" 
                             value="<%= taille.taille || '' %>" placeholder="Taille (ex: S, M, L ou 52, 54...)">
                    </div>
                    <div class="col-md-5">
                      <input type="number" class="form-control" name="sizes[<%= index %>][stock]" 
                             value="<%= taille.stock || 0 %>" min="0" placeholder="Quantité en stock">
                    </div>
                    <div class="col-md-2">
                      <button type="button" class="btn btn-danger btn-sm" onclick="removeSizeEntry(<%= index %>)">
                        <i class="fas fa-trash"></i>
                      </button>
                    </div>
                  </div>
                <% }); %>
              </div>
              <button type="button" class="btn btn-outline-secondary btn-sm mt-2" onclick="addSizeEntry()">
                <i class="fas fa-plus"></i> Ajouter une taille
              </button>
            </div>
          </div>

          <!-- Images actuelles -->
          <div class="card mb-4">
            <div class="card-header bg-secondary text-white">
              <h5 class="mb-0"><i class="fas fa-images"></i> Images actuelles</h5>
            </div>
            <div class="card-body">
              <% if (jewel.additionalImages && jewel.additionalImages.length > 0) { %>
                <div class="row" id="current-images-container">
                  <% jewel.additionalImages.forEach((image, index) => { %>
                    <div class="col-md-3 mb-3">
                      <div class="image-preview" data-image="<%= image.image_url %>" 
                           data-image-id="<%= image.id || '' %>" 
                           data-is-main="<%= image.is_main || (image.image_url === jewel.image) ? 'true' : 'false' %>">
                        
                        <img src="/uploads/jewels/<%= image.image_url %>" 
                             alt="<%= image.is_main || (image.image_url === jewel.image) ? 'Image principale' : 'Image additionnelle' %>"
                             onerror="this.src='/images/no-image.jpg'; this.alt='Image non trouvée'">
                        
                        <!-- Badge pour l'image principale -->
                        <% if (image.is_main || image.image_url === jewel.image) { %>
                          <div class="main-image-badge">Image principale</div>
                        <% } %>
                        
                        <!-- Actions sur l'image -->
                        <div class="image-actions">
                          <% if (!image.is_main && image.image_url !== jewel.image) { %>
                            <button type="button" class="btn btn-primary btn-sm" 
                                    onclick="setAsMainImage(this, '<%= image.image_url %>')"
                                    title="Définir comme image principale">
                              <i class="fas fa-star"></i>
                            </button>
                          <% } %>
                          
                          <button type="button" class="btn btn-danger btn-sm" 
                                  onclick="markImageForDeletion(this, '<%= image.id || '' %>', '<%= image.image_url %>')"
                                  title="Supprimer cette image">
                            <i class="fas fa-trash"></i>
                          </button>
                        </div>
                      </div>
                    </div>
                  <% }); %>
                </div>
              <% } else { %>
                <div class="image-container">
                  <div class="no-images">
                    <i class="fas fa-images fa-3x mb-2 text-muted"></i><br>
                    <span class="text-muted">Aucune image actuellement. Utilisez la section ci-dessous pour ajouter des images.</span>
                  </div>
                </div>
              <% } %>
            </div>
          </div>

          <!-- Nouvelles images -->
          <div class="card mb-4">
            <div class="card-header bg-dark text-white">
              <h5 class="mb-0"><i class="fas fa-upload"></i> Ajouter de nouvelles images</h5>
            </div>
            <div class="card-body">
              <div class="row">
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="newMainImage" class="form-label">Nouvelle image principale</label>
                    <input type="file" class="form-control" id="newMainImage" name="newMainImage" accept="image/*">
                    <div class="form-text">Remplace l'image principale actuelle</div>
                  </div>
                  <div id="newMainImagePreview"></div>
                </div>
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="newImages" class="form-label">Images additionnelles</label>
                    <input type="file" class="form-control" id="newImages" name="newImages" accept="image/*" multiple>
                    <div class="form-text">Sélectionnez plusieurs images</div>
                  </div>
                  <div id="newImagesPreview" class="row"></div>
                </div>
              </div>
            </div>
          </div>

          <!-- Options avancées -->
          <div class="card mb-4">
            <div class="card-header bg-light">
              <h5 class="mb-0"><i class="fas fa-cog"></i> Options avancées</h5>
            </div>
            <div class="card-body">
              <div class="row">
                <div class="col-md-6">
                  <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="is_featured" name="is_featured" value="1"
                           <%= jewel.is_featured ? 'checked' : '' %>>
                    <label class="form-check-label" for="is_featured">
                      <i class="fas fa-star text-warning"></i> Bijou mis en avant
                    </label>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="is_active" name="is_active" value="1"
                           <%= jewel.is_active !== false ? 'checked' : '' %>>
                    <label class="form-check-label" for="is_active">
                      <i class="fas fa-eye text-success"></i> Bijou visible sur le site
                    </label>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Champs cachés -->
          <input type="hidden" id="imagesToDelete" name="imagesToDelete" value="">
          <input type="hidden" id="mainImage" name="mainImage" value="<%= jewel.image || '' %>">
          <input type="hidden" id="taillesToSave" name="taillesToSave" value="">

          <!-- Boutons -->
          <div class="card">
            <div class="card-body">
              <div class="d-flex justify-content-between align-items-center">
                <a href="/gestionnaire-bijoux" class="btn btn-secondary">
                  <i class="fas fa-times"></i> Annuler
                </a>
                <div>
                  <button type="button" class="btn btn-info me-2" onclick="previewChanges()">
                    <i class="fas fa-eye"></i> Aperçu
                  </button>
                  <button type="submit" class="btn btn-success btn-lg">
                    <i class="fas fa-save"></i> Mettre à jour
                  </button>
                </div>
              </div>
            </div>
          </div>

        </form>

      </div>
    </div>
  </div>

  <!-- Modales pour ajouter nouveaux éléments -->
  <!-- Modal Nouvelle Catégorie -->
  <div class="modal fade" id="newCategoryModal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Ajouter une nouvelle catégorie</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label for="newCategoryName" class="form-label">Nom de la catégorie</label>
            <input type="text" class="form-control" id="newCategoryName" placeholder="Ex: Bracelets">
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
          <button type="button" class="btn btn-primary" onclick="saveNewCategory()">Ajouter</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal Nouveau Matériau -->
  <div class="modal fade" id="newMaterialModal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Ajouter un nouveau matériau</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label for="newMaterialName" class="form-label">Nom du matériau</label>
            <input type="text" class="form-control" id="newMaterialName" placeholder="Ex: Or blanc 18k">
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
          <button type="button" class="btn btn-primary" onclick="saveNewMaterial()">Ajouter</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal Nouveau Type -->
  <div class="modal fade" id="newTypeModal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Ajouter un nouveau type</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label for="newTypeName" class="form-label">Nom du type</label>
            <input type="text" class="form-control" id="newTypeName" placeholder="Ex: Alliance">
          </div>
          <div class="mb-3">
            <label for="newTypeCategory" class="form-label">Catégorie</label>
            <select class="form-select" id="newTypeCategory">
              <option value="">-- Sélectionner --</option>
              <% categories.forEach(category => { %>
                <option value="<%= category.id %>"><%= category.name %></option>
              <% }); %>
            </select>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
          <button type="button" class="btn btn-primary" onclick="saveNewType()">Ajouter</button>
        </div>
      </div>
    </div>
  </div>


  <script>
    // Variables globales
    let imagesToDelete = [];
    let sizeCounter = <%= tailles.length %>;

    // Fix pour la navbar mobile - fermeture automatique
    document.addEventListener('DOMContentLoaded', function() {
      const navbarToggler = document.querySelector('.navbar-toggler');
      const navbarCollapse = document.querySelector('.navbar-collapse');
      
      if (navbarToggler && navbarCollapse) {
        // Fermer la navbar quand on clique sur un lien
        const navLinks = navbarCollapse.querySelectorAll('a');
        navLinks.forEach(link => {
          link.addEventListener('click', () => {
            if (navbarCollapse.classList.contains('show')) {
              navbarToggler.click();
            }
          });
        });
        
        // Fermer la navbar quand on clique en dehors
        document.addEventListener('click', (e) => {
          if (!navbarCollapse.contains(e.target) && !navbarToggler.contains(e.target)) {
            if (navbarCollapse.classList.contains('show')) {
              navbarToggler.click();
            }
          }
        });
      }
    });

    // Calcul automatique des prix
    document.getElementById('price_ttc').addEventListener('input', calculatePrices);
    document.getElementById('tva').addEventListener('input', calculatePrices);
    document.getElementById('discount_percentage').addEventListener('input', calculatePrices);

    function calculatePrices() {
      const priceTTC = parseFloat(document.getElementById('price_ttc').value) || 0;
      const tva = parseFloat(document.getElementById('tva').value) || 20;
      const discount = parseFloat(document.getElementById('discount_percentage').value) || 0;
      
      // Prix HT
      if (priceTTC > 0) {
        const priceHT = priceTTC / (1 + (tva / 100));
        document.getElementById('price_ht').value = priceHT.toFixed(2);
      } else {
        document.getElementById('price_ht').value = '';
      }

      // Prix final avec réduction
      let finalPrice = priceTTC;
      const preview = document.getElementById('discount_preview');
      
      if (discount > 0 && priceTTC > 0) {
        finalPrice = priceTTC * (1 - discount / 100);
        const saving = priceTTC - finalPrice;
        
        // Afficher l'aperçu
        document.getElementById('discount_preview_text').textContent = `Réduction de ${discount}% appliquée`;
        document.getElementById('original_price_display').textContent = `${priceTTC.toFixed(2)}€`;
        document.getElementById('discounted_price_display').textContent = `${finalPrice.toFixed(2)}€`;
        document.getElementById('savings_display').textContent = `-${saving.toFixed(2)}€`;
        
        preview.classList.remove('d-none');
      } else {
        preview.classList.add('d-none');
      }

      document.getElementById('final_price_value').textContent = 
        finalPrice > 0 ? finalPrice.toFixed(2) + '€' : '-';
    }

    // Gestion des tailles
    function addSizeEntry() {
      const container = document.getElementById('sizesContainer');
      const newRow = document.createElement('div');
      newRow.className = 'row mb-2 size-entry';
      newRow.setAttribute('data-index', sizeCounter);
      
      newRow.innerHTML = `
        <div class="col-md-5">
          <input type="text" class="form-control" name="sizes[${sizeCounter}][taille]" placeholder="Taille (ex: S, M, L ou 52, 54...)">
        </div>
        <div class="col-md-5">
          <input type="number" class="form-control" name="sizes[${sizeCounter}][stock]" value="0" min="0" placeholder="Quantité en stock">
        </div>
        <div class="col-md-2">
          <button type="button" class="btn btn-danger btn-sm" onclick="removeSizeEntry(${sizeCounter})">
            <i class="fas fa-trash"></i>
          </button>
        </div>
      `;
      
      container.appendChild(newRow);
      sizeCounter++;
    }

    function removeSizeEntry(index) {
      const entry = document.querySelector(`[data-index="${index}"]`);
      if (entry && document.querySelectorAll('.size-entry').length > 1) {
        entry.remove();
      } else {
        showAlert('Au moins une taille est requise', 'warning');
      }
    }

    // Gestion des images
    function markImageForDeletion(button, imageId, imageUrl) {
      const preview = button.closest('.image-preview');
      const isMain = preview.dataset.isMain === 'true';
      
      if (preview.classList.contains('marked-for-deletion')) {
        // Annuler suppression
        preview.classList.remove('marked-for-deletion');
        button.innerHTML = '<i class="fas fa-trash"></i>';
        button.className = 'btn btn-danger btn-sm';
        button.title = 'Supprimer cette image';
        
        // Retirer de la liste
        if (imageId && imageId !== '') {
          imagesToDelete = imagesToDelete.filter(id => id !== imageId);
        }
      } else {
        // Marquer pour suppression
        if (isMain && !confirm('Supprimer l\'image principale ? Assurez-vous d\'ajouter une nouvelle image ou de définir une autre image comme principale.')) {
          return;
        }
        
        preview.classList.add('marked-for-deletion');
        button.innerHTML = '<i class="fas fa-undo"></i>';
        button.className = 'btn btn-success btn-sm';
        button.title = 'Annuler la suppression';
        
        if (imageId && imageId !== '') {
          imagesToDelete.push(imageId);
        } else if (isMain) {
          // Si c'est l'image principale sans ID, on la marque pour suppression
          document.getElementById('mainImage').value = '';
        }
      }
      
      document.getElementById('imagesToDelete').value = JSON.stringify(imagesToDelete);
    }

    function setAsMainImage(button, imageUrl) {
      // Retirer l'ancienne image principale
      const oldMain = document.querySelector('[data-is-main="true"]');
      if (oldMain) {
        oldMain.dataset.isMain = 'false';
        const badge = oldMain.querySelector('.main-image-badge');
        if (badge) badge.remove();
        
        const actions = oldMain.querySelector('.image-actions');
        const oldImageUrl = oldMain.dataset.image;
        const oldImageId = oldMain.dataset.imageId;
        
        actions.innerHTML = `
          <button type="button" class="btn btn-primary btn-sm" onclick="setAsMainImage(this, '${oldImageUrl}')" title="Définir comme image principale">
            <i class="fas fa-star"></i>
          </button>
          <button type="button" class="btn btn-danger btn-sm" onclick="markImageForDeletion(this, '${oldImageId || ''}', '${oldImageUrl}')" title="Supprimer cette image">
            <i class="fas fa-trash"></i>
          </button>
        `;
      }
      
      // Marquer la nouvelle comme principale
      const newMain = button.closest('.image-preview');
      newMain.dataset.isMain = 'true';
      
      // Ajouter le badge d'image principale
      const existingBadge = newMain.querySelector('.main-image-badge');
      if (!existingBadge) {
        const badge = document.createElement('div');
        badge.className = 'main-image-badge';
        badge.textContent = 'Image principale';
        newMain.appendChild(badge);
      }
      
      const actions = newMain.querySelector('.image-actions');
      const newImageId = newMain.dataset.imageId;
      
      actions.innerHTML = `
        <button type="button" class="btn btn-danger btn-sm" onclick="markImageForDeletion(this, '${newImageId || ''}', '${imageUrl}')" title="Supprimer cette image">
          <i class="fas fa-trash"></i>
        </button>
      `;
      
      document.getElementById('mainImage').value = imageUrl;
      
      showAlert('Image principale mise à jour', 'success');
    }

    // Gestion des nouvelles images
    document.getElementById('newImages').addEventListener('change', function(e) {
      previewNewImages(e.target.files, 'newImagesPreview');
    });

    document.getElementById('newMainImage').addEventListener('change', function(e) {
      previewNewImages(e.target.files, 'newMainImagePreview', true);
    });

    function previewNewImages(files, containerId, isMain = false) {
      const container = document.getElementById(containerId);
      
      if (isMain) {
        container.innerHTML = '';
      }
      
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        if (!file.type.startsWith('image/')) continue;
        
        const reader = new FileReader();
        reader.onload = function(e) {
          const col = document.createElement('div');
          col.className = isMain ? 'col-12' : 'col-md-6 mb-2';
          col.innerHTML = `
            <div class="image-preview ${isMain ? 'border border-primary' : ''}">
              <img src="${e.target.result}" style="height: 100px; object-fit: cover;">
              <div class="image-actions">
                <button type="button" class="btn btn-danger btn-sm" onclick="this.closest('.col-12, .col-md-6').remove()">
                  <i class="fas fa-times"></i>
                </button>
              </div>
              ${isMain ? '<div class="main-image-badge">Nouvelle image principale</div>' : ''}
            </div>
          `;
          container.appendChild(col);
        };
        
        reader.readAsDataURL(file);
      }
    }

    // Fonctions pour ajouter de nouveaux éléments
    function addNewCategory() {
      const modal = new bootstrap.Modal(document.getElementById('newCategoryModal'));
      modal.show();
    }

    function addNewMaterial() {
      const modal = new bootstrap.Modal(document.getElementById('newMaterialModal'));
      modal.show();
    }

    function addNewType() {
      const modal = new bootstrap.Modal(document.getElementById('newTypeModal'));
      modal.show();
    }

    async function saveNewCategory() {
      const name = document.getElementById('newCategoryName').value.trim();
      
      if (!name) {
        showAlert('Veuillez saisir un nom de catégorie', 'warning');
        return;
      }

      try {
        const response = await fetch('/admin/categories/add', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ name })
        });

        const data = await response.json();

        if (data.success) {
          // Ajouter à la liste
          const select = document.getElementById('category_id');
          const option = document.createElement('option');
          option.value = data.category.id;
          option.textContent = data.category.name;
          option.selected = true;
          select.appendChild(option);

          // Fermer la modal
          bootstrap.Modal.getInstance(document.getElementById('newCategoryModal')).hide();
          document.getElementById('newCategoryName').value = '';
          
          showAlert('Catégorie ajoutée avec succès', 'success');
        } else {
          showAlert(data.message, 'danger');
        }
      } catch (error) {
        showAlert('Erreur lors de l\'ajout de la catégorie', 'danger');
      }
    }

    async function saveNewMaterial() {
      const name = document.getElementById('newMaterialName').value.trim();
      
      if (!name) {
        showAlert('Veuillez saisir un nom de matériau', 'warning');
        return;
      }

      try {
        const response = await fetch('/admin/materials/add', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ name })
        });

        const data = await response.json();

        if (data.success) {
          // Ajouter à la liste
          const select = document.getElementById('matiere');
          const option = document.createElement('option');
          option.value = data.material.name;
          option.textContent = data.material.name;
          option.selected = true;
          select.appendChild(option);

          // Fermer la modal
          bootstrap.Modal.getInstance(document.getElementById('newMaterialModal')).hide();
          document.getElementById('newMaterialName').value = '';
          
          showAlert('Matériau ajouté avec succès', 'success');
        } else {
          showAlert(data.message, 'danger');
        }
      } catch (error) {
        showAlert('Erreur lors de l\'ajout du matériau', 'danger');
      }
    }

    async function saveNewType() {
      const name = document.getElementById('newTypeName').value.trim();
      const categoryId = document.getElementById('newTypeCategory').value;
      
      if (!name) {
        showAlert('Veuillez saisir un nom de type', 'warning');
        return;
      }

      if (!categoryId) {
        showAlert('Veuillez sélectionner une catégorie', 'warning');
        return;
      }

      try {
        const response = await fetch('/admin/types/add', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ name, category_id: categoryId })
        });

        const data = await response.json();

        if (data.success) {
          // Ajouter à la liste
          const select = document.getElementById('type_id');
          const option = document.createElement('option');
          option.value = data.type.id;
          option.textContent = data.type.name;
          option.selected = true;
          select.appendChild(option);

          // Fermer la modal
          bootstrap.Modal.getInstance(document.getElementById('newTypeModal')).hide();
          document.getElementById('newTypeName').value = '';
          document.getElementById('newTypeCategory').value = '';
          
          showAlert('Type ajouté avec succès', 'success');
        } else {
          showAlert(data.message, 'danger');
        }
      } catch (error) {
        showAlert('Erreur lors de l\'ajout du type', 'danger');
      }
    }

    function previewChanges() {
      const changes = [];
      
      const currentPrice = parseFloat(document.getElementById('price_ttc').value);
      const currentDiscount = parseFloat(document.getElementById('discount_percentage').value) || 0;
      
      if (currentDiscount > 0) {
        const finalPrice = currentPrice * (1 - currentDiscount / 100);
        changes.push(`Prix avec réduction : ${finalPrice.toFixed(2)}€ (${currentDiscount}% de réduction)`);
      }
      
      if (imagesToDelete.length > 0) {
        changes.push(`${imagesToDelete.length} image(s) seront supprimée(s)`);
      }
      
      const newMainImage = document.getElementById('newMainImage').files.length;
      const newImages = document.getElementById('newImages').files.length;
      
      if (newMainImage > 0) {
        changes.push('Nouvelle image principale sera ajoutée');
      }
      if (newImages > 0) {
        changes.push(`${newImages} nouvelle(s) image(s) additionnelle(s) seront ajoutée(s)`);
      }
      
      // Compter les tailles
      const sizes = document.querySelectorAll('.size-entry').length;
      changes.push(`${sizes} taille(s) configurée(s)`);
      
      if (changes.length === 0) {
        changes.push('Aucune modification détectée');
      }
      
      alert('Aperçu des modifications :\n\n• ' + changes.join('\n• '));
    }

    function showAlert(message, type = 'info') {
      const alertDiv = document.createElement('div');
      alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
      alertDiv.style.top = '20px';
      alertDiv.style.right = '20px';
      alertDiv.style.zIndex = '9999';
      alertDiv.style.maxWidth = '400px';
      alertDiv.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'warning' ? 'exclamation-triangle' : type === 'danger' ? 'times-circle' : 'info-circle'}"></i> ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      document.body.appendChild(alertDiv);
      
      setTimeout(() => {
        if (alertDiv.parentNode) alertDiv.remove();
      }, 5000);
    }

    // Soumission du formulaire
  document.getElementById('jewelForm').addEventListener('submit', function(e) {
  console.log('📝 === DÉBUT SOUMISSION FORMULAIRE ===');
  
  // ✅ NE PAS FAIRE e.preventDefault() tout de suite
  
  // Validation
  const required = ['name', 'category_id', 'matiere', 'price_ttc', 'tva'];
  let valid = true;
  
  required.forEach(field => {
    const element = document.getElementById(field);
    if (!element.value.trim()) {
      element.classList.add('is-invalid');
      valid = false;
      console.log('❌ Champ manquant:', field);
    } else {
      element.classList.remove('is-invalid');
      element.classList.add('is-valid');
    }
  });
  
  if (!valid) {
    e.preventDefault(); // ⚠️ Empêcher SEULEMENT si erreur de validation
    showAlert('Veuillez remplir tous les champs obligatoires', 'danger');
    return;
  }

  // Validation des dates de réduction
  const startDate = document.getElementById('discount_start_date').value;
  const endDate = document.getElementById('discount_end_date').value;
  
  if (startDate && endDate && new Date(startDate) >= new Date(endDate)) {
    e.preventDefault(); // ⚠️ Empêcher SEULEMENT si erreur de validation
    showAlert('La date de fin de réduction doit être postérieure à la date de début', 'warning');
    return;
  }

  // Collecter les tailles
  const sizes = [];
  document.querySelectorAll('.size-entry').forEach(entry => {
    const taille = entry.querySelector('input[name*="[taille]"]').value.trim();
    const stock = entry.querySelector('input[name*="[stock]"]').value;
    if (taille || stock > 0) {
      sizes.push({ taille: taille || 'Standard', stock: parseInt(stock) || 0 });
    }
  });
  
  if (sizes.length === 0) {
    e.preventDefault(); // ⚠️ Empêcher SEULEMENT si erreur de validation
    showAlert('Au moins une taille doit être définie', 'warning');
    return;
  }
  
  // ✅ IMPORTANT: Mettre les tailles dans le champ caché AVANT la soumission
  document.getElementById('taillesToSave').value = JSON.stringify(sizes);
  
  // DEBUG
  console.log('✅ Validation OK, soumission normale du formulaire');
  console.log('📤 Action:', this.action);
  console.log('📤 Method:', this.method);
  console.log('📤 Enctype:', this.enctype);
  
  // Afficher le spinner
  document.getElementById('loadingOverlay').style.display = 'flex';
  
  // Désactiver le bouton
  const submitBtn = document.querySelector('button[type="submit"]');
  const originalText = submitBtn.innerHTML;
  submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Mise à jour...';
  submitBtn.disabled = true;
  
  // ✅ LAISSER LA SOUMISSION NORMALE SE FAIRE (ne pas faire this.submit())
  // Le formulaire va se soumettre naturellement et passer par parseJewelForm
  
  // Remettre le bouton en état après 15 secondes pour éviter les blocages
  setTimeout(() => {
    submitBtn.innerHTML = originalText;
    submitBtn.disabled = false;
    document.getElementById('loadingOverlay').style.display = 'none';
  }, 15000);
});

    // Initialisation
    document.addEventListener('DOMContentLoaded', function() {
      calculatePrices();
      
      // Focus sur le premier champ
      document.getElementById('name').focus();
      
      // Validation en temps réel
      const inputs = document.querySelectorAll('input[required], select[required]');
      inputs.forEach(input => {
        input.addEventListener('blur', function() {
          if (this.value.trim()) {
            this.classList.remove('is-invalid');
            this.classList.add('is-valid');
          } else {
            this.classList.add('is-invalid');
            this.classList.remove('is-valid');
          }
        });
      });

      // Masquer les alertes automatiquement
      setTimeout(() => {
        document.querySelectorAll('.alert').forEach(alert => {
          if (alert.querySelector('.btn-close')) {
            alert.querySelector('.btn-close').click();
          }
        });
      }, 8000);
    });

    // 🔧 FIX SIMPLE pour l'erreur timeOnPage - sans rien changer d'autre
    // Override silencieux pour corriger automatiquement les données manquantes
    if (window.fetch) {
      const originalFetch = window.fetch;
      window.fetch = function(url, options = {}) {
        if (options.method === 'POST' && options.body && typeof options.body === 'string') {
          try {
            const data = JSON.parse(options.body);
            if (data && typeof data === 'object' && data.timeOnPage === undefined) {
              data.timeOnPage = 0; // Valeur par défaut
              options.body = JSON.stringify(data);
            }
          } catch (e) {
            // Si erreur de parsing, continuer normalement
          }
        }
        return originalFetch.apply(this, arguments);
      };
    }
  </script>

</body>
</html>