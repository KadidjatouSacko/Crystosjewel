// app/controlleurs/maintenanceController.js

import Setting from '../models/SettingModel.js';
// import { invalidateMaintenanceCache, getMaintenanceStatus } from '../middleware/MaintenanceMiddleware.js';

/**
 * Contr√¥leur pour la gestion de la maintenance du site
 */
export const maintenanceController = {

    /**
     * Page d'administration de la maintenance
     */
    async renderAdminPage(req, res) {
        try {
            console.log('üîß Chargement page admin maintenance');

            // R√©cup√©rer le statut actuel
            const status = await getMaintenanceStatus();

            // Messages flash
            const flashMessages = [];
            if (req.session.flashMessage) {
                flashMessages.push(req.session.flashMessage);
                delete req.session.flashMessage;
            }

            res.render('admin/maintenance', {
                title: 'Gestion de la Maintenance',
                maintenance: status,
                flashMessages,
                user: req.session.user,
                currentTime: new Date().toISOString()
            });

        } catch (error) {
            console.error('‚ùå Erreur page admin maintenance:', error);
            
            req.session.flashMessage = {
                type: 'error',
                message: 'Erreur lors du chargement de la page de maintenance'
            };
            
            res.redirect('/admin');
        }
    },

    /**
     * Activer/d√©sactiver la maintenance imm√©diatement
     */
    async toggleMaintenance(req, res) {
        try {
            const { enabled } = req.body;
            const isEnabled = enabled === true || enabled === 'true';

            console.log(`üîß ${isEnabled ? 'Activation' : 'D√©sactivation'} maintenance imm√©diate`);

            // Sauvegarder le param√®tre
            await Setting.setValue('maintenance', 'enabled', isEnabled, 'boolean', 
                'Maintenance manuelle activ√©e/d√©sactiv√©e');

            // Si on d√©sactive, nettoyer aussi la programmation
            if (!isEnabled) {
                await Setting.setValue('maintenance', 'scheduled_start', null, 'string');
                await Setting.setValue('maintenance', 'scheduled_end', null, 'string');
            }

            // Invalider le cache
            const status = { isActive: false, message: 'Maintenance d√©sactiv√©e' };;

            // Log et notification
            const message = isEnabled ? 
                'Maintenance activ√©e imm√©diatement' : 
                'Maintenance d√©sactiv√©e';

            console.log(`‚úÖ ${message}`);

            // R√©ponse JSON
            if (req.xhr || req.headers.accept?.includes('application/json')) {
                return res.json({
                    success: true,
                    message,
                    enabled: isEnabled,
                    timestamp: new Date().toISOString()
                });
            }

            // R√©ponse formulaire
            req.session.flashMessage = {
                type: 'success',
                message
            };

            res.redirect('/admin/maintenance');

        } catch (error) {
            console.error('‚ùå Erreur toggle maintenance:', error);

            if (req.xhr || req.headers.accept?.includes('application/json')) {
                return res.status(500).json({
                    success: false,
                    message: 'Erreur lors de la modification du statut'
                });
            }

            req.session.flashMessage = {
                type: 'error',
                message: 'Erreur lors de la modification du statut de maintenance'
            };

            res.redirect('/admin/maintenance');
        }
    },

    /**
     * Programmer la maintenance
     */
    async scheduleMaintenance(req, res) {
        try {
            const { scheduled_start, scheduled_end, message } = req.body;

            console.log('üìÖ Programmation maintenance:', { scheduled_start, scheduled_end });

            // Validation des dates
            if (!scheduled_start || !scheduled_end) {
                throw new Error('Dates de d√©but et fin requises');
            }

            const startDate = new Date(scheduled_start);
            const endDate = new Date(scheduled_end);
            const now = new Date();

            if (startDate <= now) {
                throw new Error('La date de d√©but doit √™tre dans le futur');
            }

            if (endDate <= startDate) {
                throw new Error('La date de fin doit √™tre apr√®s la date de d√©but');
            }

            // Sauvegarder les param√®tres
            await Setting.setValue('maintenance', 'scheduled_start', 
                startDate.toISOString(), 'string', 'Date/heure de d√©but de maintenance programm√©e');
            
            await Setting.setValue('maintenance', 'scheduled_end', 
                endDate.toISOString(), 'string', 'Date/heure de fin de maintenance programm√©e');

            if (message) {
                await Setting.setValue('maintenance', 'message', 
                    message, 'string', 'Message affich√© pendant la maintenance');
            }

            // D√©sactiver la maintenance manuelle si elle √©tait active
            await Setting.setValue('maintenance', 'enabled', false, 'boolean');

            // Invalider le cache
            const status = { isActive: false, message: 'Maintenance d√©sactiv√©e' };;

            const successMessage = `Maintenance programm√©e du ${startDate.toLocaleString('fr-FR')} au ${endDate.toLocaleString('fr-FR')}`;
            console.log(`‚úÖ ${successMessage}`);

            // R√©ponse JSON
            if (req.xhr || req.headers.accept?.includes('application/json')) {
                return res.json({
                    success: true,
                    message: successMessage,
                    scheduled_start: startDate.toISOString(),
                    scheduled_end: endDate.toISOString()
                });
            }

            // R√©ponse formulaire
            req.session.flashMessage = {
                type: 'success',
                message: successMessage
            };

            res.redirect('/admin/maintenance');

        } catch (error) {
            console.error('‚ùå Erreur programmation maintenance:', error);

            if (req.xhr || req.headers.accept?.includes('application/json')) {
                return res.status(400).json({
                    success: false,
                    message: error.message
                });
            }

            req.session.flashMessage = {
                type: 'error',
                message: error.message
            };

            res.redirect('/admin/maintenance');
        }
    },

    /**
     * Annuler la maintenance programm√©e
     */
    async cancelScheduledMaintenance(req, res) {
        try {
            console.log('‚ùå Annulation maintenance programm√©e');

            // Supprimer les param√®tres de programmation
            await Setting.setValue('maintenance', 'scheduled_start', null, 'string');
            await Setting.setValue('maintenance', 'scheduled_end', null, 'string');
            await Setting.setValue('maintenance', 'enabled', false, 'boolean');

            // Invalider le cache
            const status = { isActive: false, message: 'Maintenance d√©sactiv√©e' };;

            const message = 'Maintenance programm√©e annul√©e';
            console.log(`‚úÖ ${message}`);

            // R√©ponse JSON
            if (req.xhr || req.headers.accept?.includes('application/json')) {
                return res.json({
                    success: true,
                    message
                });
            }

            // R√©ponse formulaire
            req.session.flashMessage = {
                type: 'success',
                message
            };

            res.redirect('/admin/maintenance');

        } catch (error) {
            console.error('‚ùå Erreur annulation maintenance:', error);

            if (req.xhr || req.headers.accept?.includes('application/json')) {
                return res.status(500).json({
                    success: false,
                    message: 'Erreur lors de l\'annulation'
                });
            }

            req.session.flashMessage = {
                type: 'error',
                message: 'Erreur lors de l\'annulation de la maintenance'
            };

            res.redirect('/admin/maintenance');
        }
    },

    /**
     * Mettre √† jour le message de maintenance
     */
    async updateMessage(req, res) {
        try {
            const { message } = req.body;

            console.log('üí¨ Mise √† jour message maintenance');

            await Setting.setValue('maintenance', 'message', 
                message || 'Site en maintenance. Veuillez revenir plus tard.', 
                'string', 'Message affich√© pendant la maintenance');

            // Invalider le cache
            const status = { isActive: false, message: 'Maintenance d√©sactiv√©e' };;

            const successMessage = 'Message de maintenance mis √† jour';
            console.log(`‚úÖ ${successMessage}`);

            // R√©ponse JSON
            if (req.xhr || req.headers.accept?.includes('application/json')) {
                return res.json({
                    success: true,
                    message: successMessage
                });
            }

            // R√©ponse formulaire
            req.session.flashMessage = {
                type: 'success',
                message: successMessage
            };

            res.redirect('/admin/maintenance');

        } catch (error) {
            console.error('‚ùå Erreur mise √† jour message:', error);

            if (req.xhr || req.headers.accept?.includes('application/json')) {
                return res.status(500).json({
                    success: false,
                    message: 'Erreur lors de la mise √† jour du message'
                });
            }

            req.session.flashMessage = {
                type: 'error',
                message: 'Erreur lors de la mise √† jour du message'
            };

            res.redirect('/admin/maintenance');
        }
    },

    /**
     * API pour obtenir le statut de maintenance
     */
    async getStatus(req, res) {
        try {
            const status = await getMaintenanceStatus();
            
            res.json({
                success: true,
                data: status
            });

        } catch (error) {
            console.error('‚ùå Erreur API statut maintenance:', error);
            
            res.status(500).json({
                success: false,
                message: 'Erreur lors de la r√©cup√©ration du statut'
            });
        }
    },

    /**
     * G√©rer les IPs autoris√©es
     */
    async updateAllowedIPs(req, res) {
        try {
            const { allowed_ips } = req.body;
            
            // Parser et valider les IPs
            let ips = [];
            if (typeof allowed_ips === 'string') {
                ips = allowed_ips.split(',').map(ip => ip.trim()).filter(ip => ip);
            } else if (Array.isArray(allowed_ips)) {
                ips = allowed_ips;
            }

            console.log('üåê Mise √† jour IPs autoris√©es:', ips);

            await Setting.setValue('maintenance', 'allowed_ips', 
                ips, 'json', 'Adresses IP autoris√©es pendant la maintenance');

            // Invalider le cache
            const status = { isActive: false, message: 'Maintenance d√©sactiv√©e' };;

            const message = `${ips.length} adresse(s) IP autoris√©e(s)`;
            console.log(`‚úÖ ${message}`);

            // R√©ponse JSON
            if (req.xhr || req.headers.accept?.includes('application/json')) {
                return res.json({
                    success: true,
                    message,
                    allowed_ips: ips
                });
            }

            // R√©ponse formulaire
            req.session.flashMessage = {
                type: 'success',
                message
            };

            res.redirect('/admin/maintenance');

        } catch (error) {
            console.error('‚ùå Erreur IPs autoris√©es:', error);

            if (req.xhr || req.headers.accept?.includes('application/json')) {
                return res.status(500).json({
                    success: false,
                    message: 'Erreur lors de la mise √† jour des IPs'
                });
            }

            req.session.flashMessage = {
                type: 'error',
                message: 'Erreur lors de la mise √† jour des IPs autoris√©es'
            };

            res.redirect('/admin/maintenance');
        }
    },
 // Page de maintenance pour les visiteurs
   showMaintenancePage: (req, res) => {
        console.log('üîß Affichage page maintenance pour:', {
            isAdmin: req.session?.user?.role_id === 2,
            userId: req.session?.user?.id,
            maintenanceActive: global.maintenanceMode || false
        });

        const estimatedDuration = global.maintenanceEstimatedEnd || null;
        const message = global.maintenanceMessage || 'Site temporairement indisponible pour maintenance.';
        
        res.render('maintenance', {
            title: 'Maintenance en cours',
            message,
            estimatedDuration,
            user: req.session?.user || null,
            isAdmin: req.session?.user?.role_id === 2,
            isAuthenticated: !!req.session?.user
        });
    },
    
    
    // API: Activer la maintenance (instantan√©)
    activateMaintenance: (req, res) => {
        try {
            const { message, estimatedDuration } = req.body;
            
            global.maintenanceMode = true;
            global.maintenanceMessage = message || 'Site en maintenance. Nous reviendrons bient√¥t !';
            global.maintenanceEstimatedEnd = estimatedDuration || null;
            global.scheduledMaintenance = null; // Annuler toute maintenance programm√©e
            
            console.log('üîß Maintenance activ√©e imm√©diatement par admin:', req.session.user.email);
            
            res.json({
                success: true,
                message: 'Maintenance activ√©e',
                status: {
                    active: true,
                    message: global.maintenanceMessage,
                    estimatedEnd: global.maintenanceEstimatedEnd
                }
            });
            
        } catch (error) {
            console.error('‚ùå Erreur activation maintenance:', error);
            res.status(500).json({
                success: false,
                message: 'Erreur lors de l\'activation de la maintenance'
            });
        }
    },
    
    // API: Programmer la maintenance
    scheduleMaintenance: (req, res) => {
        try {
            const { scheduledTime, message, estimatedDuration } = req.body;
            
            if (!scheduledTime) {
                return res.status(400).json({
                    success: false,
                    message: 'Heure de maintenance requise'
                });
            }
            
            const scheduledDate = new Date(scheduledTime);
            if (scheduledDate <= new Date()) {
                return res.status(400).json({
                    success: false,
                    message: 'L\'heure de maintenance doit √™tre dans le futur'
                });
            }
            
            global.scheduledMaintenance = scheduledDate.toISOString();
            global.maintenanceMessage = message || 'Maintenance programm√©e en cours';
            global.maintenanceEstimatedEnd = estimatedDuration || null;
            
            console.log('‚è∞ Maintenance programm√©e pour:', scheduledDate, 'par admin:', req.session.user.email);
            
            res.json({
                success: true,
                message: `Maintenance programm√©e pour ${scheduledDate.toLocaleString('fr-FR')}`,
                scheduledFor: scheduledDate.toISOString()
            });
            
        } catch (error) {
            console.error('‚ùå Erreur programmation maintenance:', error);
            res.status(500).json({
                success: false,
                message: 'Erreur lors de la programmation'
            });
        }
    },
    
    // API: D√©sactiver la maintenance
    deactivateMaintenance: (req, res) => {
        try {
            global.maintenanceMode = false;
            global.maintenanceMessage = null;
            global.maintenanceEstimatedEnd = null;
            global.scheduledMaintenance = null;
            
            console.log('‚úÖ Maintenance d√©sactiv√©e par admin:', req.session.user.email);
            
            res.json({
                success: true,
                message: 'Maintenance d√©sactiv√©e',
                status: {
                    active: false
                }
            });
            
        } catch (error) {
            console.error('‚ùå Erreur d√©sactivation maintenance:', error);
            res.status(500).json({
                success: false,
                message: 'Erreur lors de la d√©sactivation'
            });
        }
    },
    
   async getMaintenanceStatus(req, res) {
        try {
            console.log('üìä Statut maintenance demand√© par:', {
                isAdmin: req.session?.user?.role_id === 2,
                userId: req.session?.user?.id
            });

            res.json({
                success: true,
                status: {
                    active: global.maintenanceMode || false,
                    message: global.maintenanceMessage || null,
                    estimatedEnd: global.maintenanceEstimatedEnd || null,
                    scheduledFor: global.scheduledMaintenance || null
                }
            });
        } catch (error) {
            console.error('‚ùå Erreur statut maintenance:', error);
            res.status(500).json({
                success: false,
                message: 'Erreur lors de la r√©cup√©ration du statut'
            });
        }
    },
  
    
     // Page de gestion de la maintenance (admin)
    async renderMaintenancePage(req, res) {
        try {
            // R√©cup√©rer les param√®tres de maintenance actuels depuis la base
            const maintenanceSettings = await SiteSetting.findAll({
                where: { 
                    setting_key: [
                        'maintenance_mode', 
                        'maintenance_duration', 
                        'maintenance_message', 
                        'maintenance_end_time',
                        'maintenance_start_time'
                    ] 
                }
            });
            
            const settings = {};
            maintenanceSettings.forEach(setting => {
                settings[setting.setting_key] = setting.setting_value;
            });
            
            const isActive = settings.maintenance_mode === 'true';
            const endTime = settings.maintenance_end_time ? new Date(settings.maintenance_end_time) : null;
            const isExpired = endTime && new Date() > endTime;
            
            // Si maintenance expir√©e, la d√©sactiver automatiquement
            if (isActive && isExpired) {
                await this.disableMaintenance();
            }
            
            res.render('admin/maintenance-settings', {
                title: 'Gestion de la Maintenance',
                user: req.session.user,
                isAuthenticated: true,
                isAdmin: true,
                settings,
                isActive: isActive && !isExpired,
                endTime,
                timeRemaining: this.getTimeRemaining(endTime)
            });
            
        } catch (error) {
            console.error('Erreur page maintenance:', error);
            res.status(500).render('error', { 
                message: 'Erreur lors du chargement de la page de maintenance'
            });
        }
    },
    
    // Activer le mode maintenance avec dur√©e personnalis√©e
    async enableMaintenance(req, res) {
        try {
            const { duration, unit, message } = req.body;
            
            // Validation des donn√©es
            if (!duration || !unit || isNaN(duration) || duration <= 0) {
                return res.status(400).json({
                    success: false,
                    message: 'Dur√©e invalide. Veuillez entrer un nombre positif.'
                });
            }
            
            // Convertir en millisecondes
            let durationMs;
            switch(unit) {
                case 'minutes':
                    durationMs = parseInt(duration) * 60 * 1000;
                    break;
                case 'hours':
                    durationMs = parseInt(duration) * 60 * 60 * 1000;
                    break;
                case 'days':
                    durationMs = parseInt(duration) * 24 * 60 * 60 * 1000;
                    break;
                default:
                    return res.status(400).json({
                        success: false,
                        message: 'Unit√© non support√©e. Utilisez minutes, hours ou days.'
                    });
            }
            
            const startTime = new Date();
            const endTime = new Date(startTime.getTime() + durationMs);
            
            // Sauvegarder en base de donn√©es
            const settingsToSave = [
                { setting_key: 'maintenance_mode', setting_value: 'true' },
                { setting_key: 'maintenance_duration', setting_value: duration.toString() },
                { setting_key: 'maintenance_unit', setting_value: unit },
                { setting_key: 'maintenance_message', setting_value: message || 'Maintenance en cours...' },
                { setting_key: 'maintenance_start_time', setting_value: startTime.toISOString() },
                { setting_key: 'maintenance_end_time', setting_value: endTime.toISOString() }
            ];
            
            for (const setting of settingsToSave) {
                await SiteSetting.upsert({
                    setting_key: setting.setting_key,
                    setting_value: setting.setting_value,
                    setting_type: 'string',
                    description: `Param√®tre de maintenance: ${setting.setting_key}`
                });
            }
            
            // Activer globalement
            global.maintenanceMode = true;
            global.maintenanceData = {
                startTime,
                endTime,
                duration: parseInt(duration),
                unit,
                message: message || 'Maintenance en cours...',
                adminBypass: true
            };
            
            console.log(`üîß Maintenance activ√©e pour ${duration} ${unit}, fin pr√©vue: ${endTime.toLocaleString('fr-FR')}`);
            
            // Programmer la d√©sactivation automatique
            const timeoutId = setTimeout(async () => {
                console.log('‚è∞ Timeout de maintenance atteint, d√©sactivation automatique...');
                await this.disableMaintenance();
            }, durationMs);
            
            // Stocker l'ID du timeout pour pouvoir l'annuler si n√©cessaire
            global.maintenanceTimeoutId = timeoutId;
            
            res.json({
                success: true,
                message: `Maintenance activ√©e pour ${duration} ${unit}`,
                data: {
                    startTime: startTime.toISOString(),
                    endTime: endTime.toISOString(),
                    duration,
                    unit,
                    message: message || 'Maintenance en cours...'
                }
            });
            
        } catch (error) {
            console.error('Erreur activation maintenance:', error);
            res.status(500).json({
                success: false,
                message: 'Erreur lors de l\'activation de la maintenance'
            });
        }
    },
    
    // D√©sactiver le mode maintenance
    async disableMaintenance(req = null, res = null) {
        try {
            // Mettre √† jour en base
            await SiteSetting.update(
                { setting_value: 'false' },
                { where: { setting_key: 'maintenance_mode' } }
            );
            
            // D√©sactiver globalement
            global.maintenanceMode = false;
            global.maintenanceData = null;
            
            // Annuler le timeout si il existe
            if (global.maintenanceTimeoutId) {
                clearTimeout(global.maintenanceTimeoutId);
                global.maintenanceTimeoutId = null;
            }
            
            console.log('üîß Maintenance d√©sactiv√©e');
            
            if (res) {
                res.json({
                    success: true,
                    message: 'Maintenance d√©sactiv√©e avec succ√®s'
                });
            }
            
        } catch (error) {
            console.error('Erreur d√©sactivation maintenance:', error);
            if (res) {
                res.status(500).json({
                    success: false,
                    message: 'Erreur lors de la d√©sactivation'
                });
            }
        }
    },
    
    // Obtenir le statut de la maintenance
    async getStatus(req, res) {
        try {
            // V√©rifier si la maintenance est expir√©e
            if (global.maintenanceData && global.maintenanceData.endTime) {
                const now = new Date();
                const endTime = new Date(global.maintenanceData.endTime);
                
                if (now > endTime) {
                    await this.disableMaintenance();
                }
            }
            
            res.json({
                success: true,
                isActive: !!global.maintenanceMode,
                data: global.maintenanceData || null,
                timeRemaining: global.maintenanceData ? 
                    this.getTimeRemaining(global.maintenanceData.endTime) : null
            });
        } catch (error) {
            console.error('Erreur status maintenance:', error);
            res.status(500).json({
                success: false,
                message: 'Erreur lors de la r√©cup√©ration du statut'
            });
        }
    },
    
    // Fonction utilitaire pour calculer le temps restant
    getTimeRemaining(endTime) {
        if (!endTime) return null;
        
        const now = new Date();
        const end = new Date(endTime);
        const remaining = end.getTime() - now.getTime();
        
        if (remaining <= 0) return null;
        
        const hours = Math.floor(remaining / (1000 * 60 * 60));
        const minutes = Math.floor((remaining % (1000 * 60 * 60)) / (1000 * 60));
        
        return {
            hours,
            minutes,
            totalMinutes: Math.floor(remaining / (1000 * 60))
        };
    }
};

